<?php

/**
 * @file
 * OAuth2 tests.
 */

/**
 * Test basic API.
 */
class OAuth2ServerTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  /**
   * The client key of the test client.
   *
   * @var string
   */
  protected $client_key = 'test_client';

  /**
   * The client secret of the test client.
   *
   * @var string
   */
  protected $client_secret = 'test_secret';

  public static function getInfo() {
    return array(
      'name' => 'OAuth2 Server',
      'description' => 'Tests basic OAuth2 Server functionality.',
      'group' => 'OAuth2',
    );
  }

  public function setUp() {
    parent::setUp('oauth2_server', 'oauth2_server_test');

    // Create the server and client.
    $server = entity_create('oauth2_server', array());
    $server->name = 'test';
    $server->label = 'Test';
    $server->settings = array(
      'default_scope' => 'basic',
      'enforce_state' => TRUE,
      'allow_implicit' => TRUE,
      'grant_types' => array(
        'authorization_code' => 'authorization_code',
        'client_credentials' => 'client_credentials',
        'refresh_token' => 'refresh_token',
        'password' => 'password',
      ),
      'always_issue_new_refresh_token' => TRUE,
      'access_lifetime' => 3600,
      'refresh_token_lifetime' => 1209600,
    );
    $server->save();

    $client = entity_create('oauth2_server_client', array());
    $client->server = $server->name;
    $client->label = 'Test client';
    $client->client_key = $this->client_key;
    $client->client_secret = $this->client_secret;
    $client->redirect_uri = url('authorized', array('absolute' => TRUE));
    $client->automatic_authorization = TRUE;
    $client->save();

    $scopes = array(
      'basic' => 'Basic',
      'admin' => 'Admin',
      'forbidden' => 'Forbidden',
    );
    foreach ($scopes as $scope_name => $scope_label) {
      $scope = entity_create('oauth2_server_scope', array());
      $scope->server = $server->name;
      $scope->name = $scope_name;
      $scope->description = '';
      $scope->save();
    }
  }

  /**
   * Performs an authorization request and returns it.
   *
   * Used to test authorization, the implicit flow, and the authorization_code
   * grant type.
   *
   * @param $forward_cookies
   *   Whether the current session should be forwarded.
   *
   * @return
   *   The return value of drupal_http_request().
   */
  protected function authorizationCodeRequest($response_type, $forward_cookies = TRUE) {
    $query = array(
      'response_type' => $response_type,
      'client_id' => $this->client_key,
      'state' => drupal_get_token($this->client_key),
      // The "authorized" url doesn't actually exist, but we don't need it.
      'redirect_uri' => url('authorized', array('absolute' => TRUE)),
    );

    $authorize_url = url('oauth2/authorize', array('absolute' => TRUE, 'query' => $query));
    $options = array();
    if ($forward_cookies) {
      $cookie_string = '';
      foreach ($this->cookies as $name => $data) {
        $cookie_string .= $name . '=' . $data['value'] . ';';
      }

      $options = array(
        'max_redirects' => 0,
        'headers' => array(
          'Cookie' => $cookie_string,
        ),
      );
    }
    return drupal_http_request($authorize_url, $options);
  }

  /**
   * Tests the authorization part of the flow.
   */
  public function testAuthorization() {
    // Attempt authorization with no user logged in.
    $result = $this->authorizationCodeRequest('code', FALSE);
    // Test the login redirect.
    $login_redirect = FALSE;
    if ($result->redirect_code == 302 && strpos($result->redirect_url, 'user/login?destination=oauth2/authorize')) {
      $login_redirect = TRUE;
    }
    $this->assertTrue($login_redirect, 'User was properly redirected to login.');

    // Create a user, log him in, and retry the request.
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    $result = $this->authorizationCodeRequest('code');

    // Test the redirect_uri and authorization code.
    $redirect_url_parts = explode('?', $result->redirect_url);
    $authorize_redirect = FALSE;
    $redirect_uri = url('authorized', array('absolute' => TRUE));
    if ($result->code == 302 && $redirect_url_parts[0] == $redirect_uri) {
      $authorize_redirect = TRUE;
    }
    $this->assertTrue($authorize_redirect, 'User was properly redirected to the "redirect_uri".');
    $redirect_url_params = drupal_get_query_array($redirect_url_parts[1]);
    $redirect_url_params += array('code' => '');
    $this->assertTrue($redirect_url_params['code'], 'The server returned an authorization code');
    $valid_token = drupal_valid_token($redirect_url_params['state'], $this->client_key);
    $this->assertTrue($valid_token, 'The server returned a valid state');
  }

  /**
   * Tests the implicit flow.
   */
  function testImplicitFlow() {
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    $result = $this->authorizationCodeRequest('token');

    $this->assertEqual($result->code, 302, 'The implicit flow request completed successfully');
    $redirect_url_parts = explode('?#', $result->redirect_url);
    $response = drupal_get_query_array($redirect_url_parts[1]);
    $this->assertTokenResponse($response, FALSE);

    // We have received an access token. Verify it.
    // See http://drupal.org/node/1958718.
    if (!empty($response['access_token'])) {
      $verification_url = url('oauth2/tokens/' . $response['access_token'], array('absolute' => TRUE));
      $result = drupal_http_request($verification_url);
      $verification_response = json_decode($result->data);

      $this->assertEqual($result->code, 200, 'The provided access token was successfully verified.');
      $this->assertEqual($verification_response->scope, urldecode($response['scope']), 'The provided scope matches the scope of the verified access token.');
    }
  }

  /**
   * Tests the "Authorization code" grant type.
   */
  public function testAuthorizationCodeGrantType() {
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    // Perform authorization and get the code.
    $result = $this->authorizationCodeRequest('code');
    $redirect_url_parts = explode('?', $result->redirect_url);
    $redirect_url_params = drupal_get_query_array($redirect_url_parts[1]);
    $authorization_code = $redirect_url_params['code'];

    $token_url = url('oauth2/token', array('absolute' => TRUE));
    $data = array(
      'grant_type' => 'authorization_code',
      'code' => $authorization_code,
      'redirect_uri' => url('authorized', array('absolute' => TRUE)),
    );
    $options = array(
      'method' => 'POST',
      'data' => http_build_query($data),
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
        // Instead of the Authorization header, the server also supports
        // passing the client key and client secret inside the request body
        // ($data['client_id'] and $data['client_secret']) for all grant types,
        // but it is not recommended and should be limited to clients unable
        // to directly utilize the HTTP Basic authentication scheme.
        'Authorization' => 'Basic ' . base64_encode($this->client_key . ':' . $this->client_secret),
      ),
    );
    $result = drupal_http_request($token_url, $options);

    $this->assertEqual($result->code, 200, 'The token request completed successfully');
    $response = json_decode($result->data);
    $this->assertTokenResponse($response);
  }

  /**
   * Tests the "Client credentials" grant type.
   */
  public function testClientCredentialsGrantType() {
    $token_url = url('oauth2/token', array('absolute' => TRUE));
    $data = array(
      'grant_type' => 'client_credentials',
    );
    $options = array(
      'method' => 'POST',
      'data' => http_build_query($data),
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
        'Authorization' => 'Basic ' . base64_encode($this->client_key . ':' . $this->client_secret),
      ),
    );
    $result = drupal_http_request($token_url, $options);

    $this->assertEqual($result->code, 200, 'The token request completed successfully');
    $response = json_decode($result->data);
    $this->assertTokenResponse($response, FALSE);
  }

  /**
   * Tests the "User credentials" grant type.
   */
  public function testPasswordGrantType() {
    $result = $this->passwordGrantRequest();
    $this->assertEqual($result->code, 200, 'The token request completed successfully');
    $response = json_decode($result->data);
    $this->assertTokenResponse($response);
  }

  /**
   * Tests the "Refresh token" grant type.
   */
  public function testRefreshTokenGrantType() {
    // Do a password grant first, in order to get the refresh token.
    $result = $this->passwordGrantRequest();
    $response = json_decode($result->data);
    $refresh_token = $response->refresh_token;

    $token_url = url('oauth2/token', array('absolute' => TRUE));
    $data = array(
      'grant_type' => 'refresh_token',
      'refresh_token' => $refresh_token,
    );
    $options = array(
      'method' => 'POST',
      'data' => http_build_query($data),
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
        'Authorization' => 'Basic ' . base64_encode($this->client_key . ':' . $this->client_secret),
      ),
    );
    $result = drupal_http_request($token_url, $options);

    $this->assertEqual($result->code, 200, 'The token request completed successfully');
    $response = json_decode($result->data);
    // The response will include a new refresh_token because
    // always_issue_new_refresh_token is TRUE.
    $this->assertTokenResponse($response);
  }

  /**
   * Tests scopes.
   */
  public function testScopes() {
    // The default scope returned by oauth2_server_default_scope().
    $result = $this->passwordGrantRequest();
    $response = json_decode($result->data);
    $this->assertEqual($response->scope, 'basic admin', 'The correct default scope was returned.');

    // A non-existent scope.
    $result = $this->passwordGrantRequest('invalid_scope');
    $response = json_decode($result->data);
    $error = isset($response->error) && $response->error == 'invalid_scope';
    $this->assertTrue($error, 'Invalid scope correctly detected.');

    // A scope forbidden by oauth2_server_scope_access.
    // @see oauth2_server_test_entity_query_alter()
    $result = $this->passwordGrantRequest('forbidden');
    $response = json_decode($result->data);
    $error = isset($response->error) && $response->error == 'invalid_scope';
    $this->assertTrue($error, 'Inaccessible scope correctly detected.');

    // A specific requested scope.
    $result = $this->passwordGrantRequest('admin');
    $response = json_decode($result->data);
    $this->assertEqual($response->scope, 'admin', 'The correct scope was returned.');
  }

  /**
   * Tests resource requests.
   */
  public function testResourceRequests() {
    $result = $this->passwordGrantRequest('admin');
    $response = json_decode($result->data);
    $access_token = $response->access_token;

    // Check resource access with no access token.
    $resource_url = url('oauth2_test/resource/admin', array('absolute' => TRUE));
    $result = drupal_http_request($resource_url);
    $response = json_decode($result->data);
    $error = isset($response->error) && $response->error == 'invalid_request';
    $this->assertTrue($error, 'Missing access token correctly detected.');

    // Check resource access with an insufficient scope.
    $query = array(
      'access_token' => $access_token,
    );
    $resource_url = url('oauth2_test/resource/forbidden', array('absolute' => TRUE, 'query' => $query));
    $result = drupal_http_request($resource_url);
    $response = json_decode($result->data);
    $error = isset($response->error) && $response->error == 'insufficient_scope';
    $this->assertTrue($error, 'Insufficient scope correctly detected.');

    // Check resource access with the access token in the url.
    $query = array(
      'access_token' => $access_token,
    );
    $resource_url = url('oauth2_test/resource/admin', array('absolute' => TRUE, 'query' => $query));
    $result = drupal_http_request($resource_url);
    $this->assertEqual($result->code, 200, 'Access token in the URL correctly detected.');

    // Check resource access with the access token in the header.
    $resource_url = url('oauth2_test/resource/admin', array('absolute' => TRUE));
    $headers = array(
      'Authorization' => 'Bearer ' . $access_token,
    );
    $result = drupal_http_request($resource_url, array('headers' => $headers));
    $this->assertEqual($result->code, 200, 'Access token in the header correctly detected.');
  }

  /**
   * Performs a password grant request and returns it.
   *
   * Used to test the grant itself, as well as a helper for other tests
   * (since it's a fast way of getting an access token).
   *
   * @param $scope
   *   An optional scope to request.
   *
   * @return
   *   The return value of drupal_http_request().
   */
  protected function passwordGrantRequest($scope = NULL) {
    $user = $this->drupalCreateUser(array('access content'));

    $token_url = url('oauth2/token', array('absolute' => TRUE));
    $data = array(
      'grant_type' => 'password',
      'username' => $user->name,
      'password' => $user->pass_raw,
    );
    if ($scope) {
      $data['scope'] = $scope;
    }

    $options = array(
      'method' => 'POST',
      'data' => http_build_query($data),
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
        'Authorization' => 'Basic ' . base64_encode($this->client_key . ':' . $this->client_secret),
      ),
    );
    return drupal_http_request($token_url, $options);
  }

  /**
   * Assert that the given token response has the expected values.
   *
   * @param $response
   *   The response (either an object decoded from a json string or the
   *   query string taken from the url in case of the implicit flow).
   * @param $has_refresh_token
   *   A boolean indicating whether this response should have a refresh token.
   */
  protected function assertTokenResponse($response, $has_refresh_token = TRUE) {
    // Make sure we have an array.
    $response = (array) $response;

    $this->assertTrue(array_key_exists('access_token', $response), 'The "access token" value is present in the return values');
    $this->assertTrue(array_key_exists('expires_in', $response), 'The "expires_in" value is present in the return values');
    $this->assertTrue(array_key_exists('token_type', $response), 'The "token_type" value is present in the return values');
    $this->assertTrue(array_key_exists('scope', $response), 'The "scope" value is present in the return values');
    if ($has_refresh_token) {
      $this->assertTrue(array_key_exists('refresh_token', $response), 'The "refresh_token" value is present in the return values');
    }
  }
}

/**
 * Test OAuth2_Storage_Drupal.
 */
class OAuth2ServerStorageTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  /**
   * The client key of the test client.
   *
   * @var string
   */
  protected $client_key = 'test_client';

  /**
   * The client secret of the test client.
   *
   * @var string
   */
  protected $client_secret = 'test_secret';

  /**
   * The storage instance to be tested.
   *
   * @var OAuth2_Storage_Drupal
   */
  protected $storage;

  public static function getInfo() {
    return array(
      'name' => 'OAuth2 Server Storage',
      'description' => 'Tests the Storage implementation for the oauth2-server-php library.',
      'group' => 'OAuth2',
    );
  }

  public function setUp() {
    parent::setUp('oauth2_server');
    oauth2_server_register_autoloader();

    // Create the server and client.
    $server = entity_create('oauth2_server', array());
    $server->name = 'test';
    $server->label = 'Test';
    $server->settings = array(
      'default_scope' => '',
      'allow_implicit' => TRUE,
      'grant_types' => array(
        'authorization_code' => 'authorization_code',
        'client_credentials' => 'client_credentials',
        'refresh_token' => 'refresh_token',
        'password' => 'password',
      ),
      'always_issue_new_refresh_token' => TRUE,
    );
    $server->save();

    $client = entity_create('oauth2_server_client', array());
    $client->server = $server->name;
    $client->label = 'Test client';
    $client->client_key = $this->client_key;
    $client->client_secret = $this->client_secret;
    $client->redirect_uri = url('authorized', array('absolute' => TRUE));
    $client->automatic_authorization = TRUE;
    $client->save();

    $this->storage = new OAuth2_Storage_Drupal();
  }

  public function testCheckClientCredentials() {
    // Nonexistent client_id.
    $result = $this->storage->checkClientCredentials('fakeclient', 'testpass');
    $this->assertFalse($result, 'Invalid client credentials correctly detected.');

    // Invalid client_secret.
    $result = $this->storage->checkClientCredentials($this->client_key, 'invalidcredentials');
    $this->assertFalse($result, 'Invalid client_secret correctly detected.');

    // Valid credentials.
    $result = $this->storage->checkClientCredentials($this->client_key, $this->client_secret);
    $this->assertTrue($result, 'Valid client credentials correctly detected.');
  }

  public function testGetClientDetails() {
    // Nonexistent client_id.
    $details = $this->storage->getClientDetails('fakeclient');
    $this->assertFalse($details, 'Invalid client_id correctly detected.');

    // Valid client_id.
    $details = $this->storage->getClientDetails($this->client_key);
    $this->assertNotNull($details, 'Client details successfully returned.');
    $this->assertTrue(array_key_exists('client_id', $details), 'The "client_id" value is present in the client details.');
    $this->assertTrue(array_key_exists('client_secret', $details), 'The "client_secret" value is present in the client details.');
    $this->assertTrue(array_key_exists('redirect_uri', $details), 'The "redirect_uri" value is present in the client details.');
  }

  public function testAccessToken() {
    $user = $this->drupalCreateUser(array('access content'));

    $token = $this->storage->getAccessToken('newtoken');
    $this->assertFalse($token, 'Trying to load a nonexistent token is unsuccessful.');

    $expires = time() + 20;
    $success = $this->storage->setAccessToken('newtoken', $this->client_key, $user->name, $expires);
    $this->assertTrue($success, 'A new access token has been successfully created.');

    // Verify the return format of getAccessToken().
    $token = $this->storage->getAccessToken('newtoken');
    $this->assertTrue($token, 'An access token was successfully returned.');
    $this->assertTrue(array_key_exists('access_token', $token), 'The "access_token" value is present in the token array.');
    $this->assertTrue(array_key_exists('client_id', $token), 'The "client_id" value is present in the token array.');
    $this->assertTrue(array_key_exists('user_id', $token), 'The "user_id" value is present in the token array.');
    $this->assertTrue(array_key_exists('expires', $token), 'The "expires" value is present in the token array.');
    $this->assertEqual($token['access_token'], 'newtoken', 'The "access_token" key has the expected value.');
    $this->assertEqual($token['client_id'], $this->client_key, 'The "client_id" key has the expected value.');
    $this->assertEqual($token['user_id'], $user->name, 'The "user_id" key has the expected value.');
    $this->assertEqual($token['expires'], $expires, 'The "expires" key has the expected value.');

    // Update the token.
    $expires = time() + 42;
    $success = $this->storage->setAccessToken('newtoken', $this->client_key, $user->name, $expires);
    $this->assertTrue($success, 'The access token was successfully updated.');

    $token = $this->storage->getAccessToken('newtoken');
    $this->assertTrue($token, 'An access token was successfully returned.');
    $this->assertEqual($token['expires'], $expires, 'The expires timestamp matches the new value.');
  }

  public function testSetRefreshToken() {
    $user = $this->drupalCreateUser(array('access content'));

    $token = $this->storage->getRefreshToken('refreshtoken');
    $this->assertFalse($token, 'Trying to load a nonexistent token is unsuccessful.');

    $expires = time() + 20;
    $success = $this->storage->setRefreshToken('refreshtoken', $this->client_key, $user->name, $expires);
    $this->assertTrue($success, 'A new refresh token has been successfully created.');

    // Verify the return format of getRefreshToken().
    $token = $this->storage->getRefreshToken('refreshtoken');
    $this->assertTrue($token, 'A refresh token was successfully returned.');
    $this->assertTrue(array_key_exists('refresh_token', $token), 'The "refresh_token" value is present in the token array.');
    $this->assertTrue(array_key_exists('client_id', $token), 'The "client_id" value is present in the token array.');
    $this->assertTrue(array_key_exists('user_id', $token), 'The "user_id" value is present in the token array.');
    $this->assertTrue(array_key_exists('expires', $token), 'The "expires" value is present in the token array.');
    $this->assertEqual($token['refresh_token'], 'refreshtoken', 'The "refresh_token" key has the expected value.');
    $this->assertEqual($token['client_id'], $this->client_key, 'The "client_id" key has the expected value.');
    $this->assertEqual($token['user_id'], $user->name, 'The "user_id" key has the expected value.');
    $this->assertEqual($token['expires'], $expires, 'The "expires" key has the expected value.');
  }

  public function testAuthorizationCode() {
    $user = $this->drupalCreateUser(array('access content'));

    $code = $this->storage->getAuthorizationCode('newcode');
    $this->assertFalse($code, 'Trying to load a nonexistent authorization code is unsuccessful.');

    $expires = time() + 20;
    $success = $this->storage->setAuthorizationCode('newcode', $this->client_key, $user->name, 'http://example.com', $expires);
    $this->assertTrue($success, 'A new authorization code was sucessfully created.');

    // Verify the return format of getAuthorizationCode().
    $code = $this->storage->getAuthorizationCode('newcode');
    $this->assertTrue($code, 'An authorization code was successfully returned.');
    $this->assertTrue(array_key_exists('authorization_code', $code), 'The "authorization_code" value is present in the code array.');
    $this->assertTrue(array_key_exists('client_id', $code), 'The "client_id" value is present in the code array.');
    $this->assertTrue(array_key_exists('user_id', $code), 'The "user_id" value is present in the code array.');
    $this->assertTrue(array_key_exists('redirect_uri', $code), 'The "redirect_uri" value is present in the code array.');
    $this->assertTrue(array_key_exists('expires', $code), 'The "expires" value is present in the code array.');
    $this->assertEqual($code['authorization_code'], 'newcode', 'The "authorization_code" key has the expected value.');
    $this->assertEqual($code['client_id'], $this->client_key, 'The "client_id" key has the expected value.');
    $this->assertEqual($code['user_id'], $user->name, 'The "user_id" key has the expected value.');
    $this->assertEqual($code['redirect_uri'], 'http://example.com', 'The "redirect_uri" key has the expected value.');
    $this->assertEqual($code['expires'], $expires, 'The "expires" key has the expected value.');

    // Change an existing code
    $expires = time() + 42;
    $success = $this->storage->setAuthorizationCode('newcode', $this->client_key, $user->name, 'http://example.org', $expires);
    $this->assertTrue($success, 'The authorization code was sucessfully updated.');

    $code = $this->storage->getAuthorizationCode('newcode');
    $this->assertTrue($code, 'An authorization code was successfully returned.');
    $this->assertEqual($code['expires'], $expires, 'The expires timestamp matches the new value.');
  }

  public function testCheckUserCredentials() {
    $user = $this->drupalCreateUser(array('access content'));

    // Correct credentials
    $result = $this->storage->checkUserCredentials($user->name, $user->pass_raw);
    $this->assertTrue($result, 'Valid user credentials correctly detected.');
    // Invalid username.
    $result = $this->storage->checkUserCredentials('fakeusername', $user->pass_raw);
    $this->assertFalse($result, 'Invalid username correctly detected.');
    // Invalid password.
    $result = $this->storage->checkUserCredentials($user->name, 'fakepass');
    $this->assertFalse($result, 'Invalid password correctly detected');
  }
}
