<?php
/**
 * @file edgemarkes media upload
 */


/**
 * Implements hook_init().
 */
function edgemakers_media_upload_init() {
  drupal_add_css(drupal_get_path('module', 'edgemakers_media_upload') . '/css/edgemakers_media_upload.css');
  drupal_add_js(drupal_get_path('module', 'edgemakers_media_upload') . '/js/edgemakers_media_upload.js');
}

function edgemakers_media_upload_menu() {
  $items = array();

  // Module settings.
  $items['admin/config/system/ftesettings/media'] = array(
    'title' => 'Edgemakers Media Config',
    'description' => 'Edgemakers media settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgemakers_media_upload_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  //ajax callback add new organization
  $items['ajax/upload/%ctools_js/media'] = array(
    'title' => 'Upload media',
    'page callback' => 'edgemakers_media_upload_new',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['edgemarkers/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_html', // Render HTML
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',  // Magic goes here
    'page arguments' => array(5),
  );

  $items['edgemakers/media/info/ajax'] = array(
  	'page callback' => 'edgemakers_media_view_html', // Render HTML
  	'type' => MENU_CALLBACK,
  	'access arguments' => array('access content'),
  	'delivery callback' => 'edgemakers_stage_ajax_callback',  // Magic goes here
  	'page arguments' => array(4),
  	'file path' => drupal_get_path('module', 'edgemakers_stage'),
  	'file' => 'stage.api.inc',
  );

  $items['edgemarkers/studio/media/get/list/ajax'] = array(
  	'page callback' => 'edgemakers_media_list_on_studio', // Render HTML
  	'type' => MENU_CALLBACK,
  	'access arguments' => array('access content'),
  	'delivery callback' => 'edgemakers_stage_ajax_callback',  // Magic goes here
  	'page arguments' => array(6),
  	'file path' => drupal_get_path('module', 'edgemakers_stage'),
  	'file' => 'stage.api.inc',
  );

  $items['edgemarkers/gallery/media/get/list/ajax'] = array(
  	'page callback' => 'edgemakers_media_list_on_gallery', // Render HTML
  	'type' => MENU_CALLBACK,
  	'access arguments' => array('access content'),
  	'delivery callback' => 'edgemakers_stage_ajax_callback',  // Magic goes here
  	'page arguments' => array(6, 7, 8),
  	'file path' => drupal_get_path('module', 'edgemakers_stage'),
  	'file' => 'stage.api.inc',
  );

  return $items;
}


function edgemakers_media_view_html($nid) {
	if ($nid) {
		$node = node_load($nid);
		return drupal_render(node_view($node, 'full'));
	}
	return 'Media page building.';
}

/**
 * Implements hook_form_alter().
 */
function edgemakers_media_upload_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'media_for_upload_node_form') {

    if (arg(0) == 'modal') {

    	form_load_include($form_state, 'inc', 'node', 'node.pages');

      $form['#prefix'] = '<div id="upload-media-ajax-wrapper">';
      $form['#suffix'] = '</div>';

  //     $form['title']['#type'] = 'hidden';

      $form['title']['#attributes'] = array(
        'placeholder' => 'Media Title',
      );

      unset($form['field_media_type']);

      unset($form['actions']['preview']);
      unset($form['actions']['delete']);
      //unset($form['actions']['submit']);

  //     $form['field_s3_test_audoi']['#weight'] = 1;
  //     $form['field_youtube_url']['#weight'] = 2;
  //     $form['field_tags']['#weight'] = 3;
  //     $form['field_media_type']['#weight'] = 4;
  //     $form['field_share']['#weight'] = 5;

  //     drupal_set_message('<pre>' . print_r($form['field_youtube_url']['#attributes'], TRUE) . '</pre>');

  //     $form['field_youtube_url'][LANGUAGE_NONE][0][url]['#attributes']['placeholder'] = T('Media URL');

          $form['field_media_url'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = T('Media URL');


      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'edgemakers_media_upload_ajax_submit',
        'wrapper' => 'upload-media-ajax-wrapper',
      	'method' => 'replace',
        'effect' => 'fade',
      );


      $form['actions']['submit']['#value'] = t('Upload');

  //     $form['actions']['submit']['#submit'] = array('_media_upload_submit');

      array_unshift($form['#validate'], 'edgemakers_media_upload_ajax_validate');
      array_unshift($form['#submit'], '_media_upload_submit');

      //$form['actions']['submit']['#validate'] = array('edgemakers_media_upload_ajax_validate');
      //$form['actions']['submit']['#submit'] = array('_media_upload_submit');


      require_once(DRUPAL_ROOT . "/modules/node/node.pages.inc");

    }
  }
}

function edgemakers_media_upload_ajax_validate($form, &$form_state) {

	global $user;

	form_load_include($form_state, 'inc', 'node', 'node.pages');

  $vals = $form_state['values'];
//   dpm($vals);
  $media_url = $vals['field_media_url'][LANGUAGE_NONE][0]['value'];

  module_load_include('inc', 'edgemakers_stage', 'stage.api');

  $youtube_url = _youtube_parser($media_url);
//   dpm($youtube_url);

  if ($youtube_url) {
    $terms = taxonomy_get_term_by_name('Video');
//     dpm($terms);
    foreach ($terms AS $tid) {
      if ($tid->vocabulary_machine_name == 'media_file_types') {
        $media_type_tid = $tid->tid;
      }
    }
//     dpm($media_type_tid);
    $form_state['values']['field_media_type'][LANGUAGE_NONE][0]['tid'] = $media_type_tid;
  }
  else {
    $terms = taxonomy_get_term_by_name('Image');
//     dpm($terms);
    foreach ($terms AS $tid) {
      if ($tid->vocabulary_machine_name == 'media_file_types') {
        $media_type_tid = $tid->tid;
      }
    }
//     dpm($media_type_tid);
    $form_state['values']['field_media_type'][LANGUAGE_NONE][0]['tid'] = $media_type_tid;
  }

//   drupal_set_message('Form item: <pre>' . print_r($vals, TRUE) . '</pre>');

//   drupal_set_message('URL:' . $vals['field_youtube_url'][LANGUAGE_NONE][0]['url']);

//   if (empty($vals['field_media_url'])) {
//     form_set_error('field_youtube_url', 'Invalid url.');
//   }
//   if (empty($vals['field_youtube_url'][LANGUAGE_NONE][0]['value'])) {
//     form_set_error('field_youtube_url', 'Invalid url.');
//   }
//   else {
//     $url_parse = _youtube_parser($vals['field_youtube_url'][LANGUAGE_NONE][0]['url']);
//   }

//   if (isset($vals['field_youtube_url'][LANGUAGE_NONE][0]['url'])) {
//     $url_parse = _youtube_url_parse($vals['field_youtube_url'][LANGUAGE_NONE][0]['url']);
//     //drupal_set_message('<pre>' . print_r($url_parse, TRUE) . '</pre>');
//     if (isset($url_parse[1])) {
//       //drupal_set_message('<pre>' . print_r($url_parse[1], TRUE) . '</pre>');
//       $vaildYid = _youtube_validId($url_parse[1]);
//       if ($vaildYid !== TRUE) {
//         //drupal_set_message('<pre>' . print_r($vaildYid, TRUE) . '</pre>');
//         form_set_error('field_youtube_url', 'Invalid youtube url.');
//       }
//     }
//   }

}

function _media_upload_submit($form, &$form_state) {
  //$form_state['complete'] = TRUE;
//   form_load_include($form_state, 'inc', 'node', 'node.pages');

  $vals = $form_state['values'];

//   $node_nid = $form['node']->nid;

//   dpm($form);
//   dpm($form_state);

  /*$content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');

  $newNode = (object) NULL;
  $newNode->type = $content_type;
  $newNode->title = $vals['title'];
  $newNode->created = strtotime("now");
  $newNode->changed = strtotime("now");
  $newNode->status = 1;
  $newNode->comment = 0;
  $newNode->promote = 0;
  $newNode->moderate = 0;
  $newNode->sticky = 0;
  $newNode->language = 'und';
  $newNode->field_youtube_url['und'][0]['url'] = $vals['field_youtube_url'];

  node_object_prepare($newNode);
  node_save($newNode);

  if ($vals['title']) {
  	$items = edgemakers_media_list_html();
  	return $items;
  	//print('Update: ' . $items);
  }
  */
  //drupal_set_message("Upload an media.");
  //drupal_set_message('Submited: <pre>' . print_r($form_state, TRUE) . '</pre>');
  //return "Sumbited";
}

function _customReloadMediaList() {
	return array(
    'command' => 'mediaListAjaxload',
  );
}

/**
 * Ajax sumbit new media node.
 *
 * @param object $form
 * @param array $form_state
 */
function edgemakers_media_upload_ajax_submit($form, &$form_state) {

  if (form_get_errors()) {
    return $form;
  }

  //form_load_include($form_state, 'inc', 'node', 'node.pages');

  //drupal_add_js("Drupal.CTools.Modal.modal_dismiss", array('type' => 'inline'));

  $items = edgemakers_media_list_html();

  //$content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  //ctools_include('node.pages', 'node', '');
  ctools_include('modal');
  ctools_include('ajax');

  /*$form_state = array(
    'title' => $title,
    'ajax'  => TRUE,
    'build_info' => array(
      'args'  => array($node),
    ),
  );*/
	//drupal_add_library('system', 'ui.dialog');
  //$commands = ctools_modal_form_wrapper($content_type . '_node_form', $form_state);
  // overwrite commands.
  $commands = array();

  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();

  ctools_add_js('mediaListAjaxload', 'edgemakers_media_upload');
//   $commands[] = _customReloadMediaList();
  //$commands[] = ajax_command_html("#my-media-list", $items . '<script>media_list_reload()</script>');
  //$commands[] = ajax_render('media_list_reload()');

  ctools_add_js('ctools-ajax-upload-media', 'edgemakers_media_upload');

  //$commands[] = _customReloadMediaList();

  /*$vals = $form_state['values'];

  if ($vals['title']) {
  	$items = edgemakers_media_list_html();
  	return $items;
  }
  */
  print ajax_render($commands);
  exit;

  //return $form;

  /*$vals = $form_state['values'];
  if ($vals['field_upload_to_s3_media'][LANGUAGE_NONE][0]['fid']) {
    $img_info = file_load($vals['field_upload_to_s3_media'][LANGUAGE_NONE][0]['fid']);
    //drupal_set_message('Image\'s info: <pre>' . print_r($img_info, TRUE) . '</pre>');
    $form_state['title']['#value'] = $img_info->filename;

    //Update node title by filename.
    $node = node_load($form_state['node']->nid);
    $node->title = $img_info->filename;
    node_save($node);
  }*/

  # Create a new markup field and return it. It will replace the form output.
  /*$element = array();
  $element['#type'] = 'markup';
  $element['#markup'] = t("You upload " . $vals['field_youtube_url'][LANGUAGE_NONE][0]['value']);

  return $element;*/

}

/**
 * Implements hook_book_info();
 */
function edgemakers_media_upload_block_info() {

  $blocks['media_upload_link'] = array(
    'info' => t('Media upload link'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );

  $blocks['media_list'] = array(
		'info' => t('Media list'), //The name that will appear in the block list.
		'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );

  $blocks['studio_media_list'] = array(
		'info' => t('Media list on studio pane'), //The name that will appear in the block list.
		'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );

  $blocks['gallery_video_list'] = array(
		'info' => t('Video media list on gallery pane'), //The name that will appear in the block list.
		'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );

  $blocks['gallery_image_list'] = array(
		'info' => t('Image media list on gallery pane'), //The name that will appear in the block list.
		'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );

  return $blocks;
}

/**
 * Implements hook_book_view()
 * @param unknown_type $delta
 */
function edgemakers_media_upload_block_view($delta = '') {

  global $base_root;
  global $base_path;

  global $user;

  switch($delta){
    case 'media_upload_link':

      $link_html = '<div class="toolbar-item test1">';
      $link_html .= _build_ctool_modal_link();
      $link_html .= '</div>';
      $block['content'] = $link_html;

      break;
    case 'media_list':
    	$block['subject'] = t('Media List');
    	$block['content'] = '<div id="my-media-list" class="toolbar-item media"></div>';
    	break;
    case 'studio_media_list':
      $block['subject'] = t('Media lit on studio pane');
      $block['content'] = '<div class="pane-studio-box media item-studio" id="studio-media-list-pane">
                          	<h4>media</h4>
                              <div class="scroll-wrapper">
                              	<div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                            	  <ul id="studio-media-list"></ul>
                              </div>
                          </div>';
      break;
    case 'gallery_video_list':
      $block['subject'] = t('Video media lit on gallery pane');
      $block['content'] = '<div class="pane-gallery-box media item-studio" id="gallery-video-list-pane">
                          	<h4>Video</h4>
                            <div class="scroll-wrapper">
                            	<div class="arrow-left" pager="0"> < </div>
                              <div class="arrow-right" pager="1"> > </div>
                          	  <ul id="gallery-video-list"></ul>
                            </div>
                          </div>';
      break;
    case 'gallery_image_list':
      $block['subject'] = t('Image media lit on gallery pane');
      $block['content'] = '<div class="pane-gallery-box media item-studio" id="gallery-image-list-pane">
                          	<h4>Image</h4>
                            <div class="scroll-wrapper">
                            	<div class="arrow-left" pager="0"> < </div>
                              <div class="arrow-right" pager="1"> > </div>
                          	  <ul id="gallery-image-list"></ul>
                            </div>
                          </div>';
      break;
    default:
      break;
  }

  return $block;

}


function _build_ctool_modal_link() {

  global $user;

  $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  $type = str_replace('_', '-', $content_type);

  $html = '';

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  /******** Custom style of ctool modal **********/
  // Create our own javascript that will be used to theme a modal.
  $sample_style = array(
    'ctools-sample-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 600,
        'height' => 420,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      //'modalTheme' => 'CToolsSampleModal',
    	'modalTheme' => 'CToolsEdgemakersUploadMediaModal',
      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );

  drupal_add_js($sample_style, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  //ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
  ctools_add_js('ctools-ajax-upload-media', 'edgemakers_media_upload');
  ctools_add_css('ctools-ajax-upload-media', 'edgemakers_media_upload');

  // Create a list of clickable links.
  $links = array();

  // Four ways to do our animal picking wizard.
  $link_class = array();

  if ($user->uid) {
    $upload_link = 'modal/node/add/' . $type . '/nojs/0';
    $link_class = array('ctools-use-modal', 'ctools-modal-ctools-sample-style');
  }
  else {
    $upload_link = 'modal_forms/nojs/login';
    $link_class = array('ctools-use-modal',  'ctools-modal-modal-popup-small');
  }

  $links[] = l(t('Upload'), $upload_link, array(
  	'html' => TRUE,
  	'attributes' => array(
  		'class' => $link_class,
  	)
  ));

  $output = theme('item_list', array('items' => $links, 'title' => ''));

  /******** End custom style of ctool modal **********/


  $html .= '<h4>' . $output . '</h4>';

  return $html;
}

/**
 * Copy from ctools_example.
 *
 * @param unknown_type $js
 * @param unknown_type $step
 * @return Ambigous <multitype:string The , multitype:string The Ambigous <The, unknown, string, A, Optional> >|Ambigous <The, void, string, A, boolean>
 */
function edgemakers_media_upload_new($js = NULL, $step = NULL) {

  global $user;
  $type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  $args = arg();

  //drupal_set_message("Load js is $js <pre>" . print_r($args, TRUE) . '</pre>');

  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }

  module_load_include('inc', 'node', 'node.pages');
  $form = node_add($type);
  $form['#states'] = array(
    'ajax' => $js,
  );

  //$output = '<h2>Call from my define menu.</h2>';
  $output .= drupal_render($form);

  if ($output === FALSE || !empty($form_state['complete'])) {
    drupal_set_message("Output is FALSE");
  }

  // If $output is FALSE, there was no actual form.
  if ($js) {
    // If javascript is active, we have to use a render array.
    $commands = array();
    if ($output === FALSE || !empty($form_state['complete'])) {
      // Dismiss the modal.
      $commands[] = ajax_command_html('#ctools-sample', $animal);
      $commands[] = ctools_modal_command_dismiss();
      $commands[] = ctools_ajax_command_redirect();
      ctools_ajax_render($commands);
    }
    else if (!empty($form_state['cancel'])) {
      // If cancelling, return to the activity.
      $commands[] = ctools_modal_command_dismiss();
    }
    else {
      $commands = ctools_modal_form_render($form_state, $output);
    }
    print ajax_render($commands);
    exit;
  }
  else {
    if ($output === FALSE || !empty($form_state['complete'])) {
      return $animal;
    }
    else if (!empty($form_state['cancel'])) {
      drupal_goto('ctools_ajax_sample');
    }
    else {
      return $output;
    }
  }

  //return drupal_render($form);

}

/**
 * Form builder function for module settings.
 */
function edgemakers_media_upload_settings() {

  $types = node_type_get_types();
  $content_type_options = array();
  $terms_optins = array();

  $vocabularies = taxonomy_get_vocabularies();

  foreach ($vocabularies AS $voca) {
    $voca_optins[$voca->vid] = $voca->name;
  }

  foreach ($vocabularies as $vocabula) {

    $terms_tree[$vocabula->vid] = taxonomy_get_tree($vocabula->vid);
    foreach ($terms_tree[$vocabula->vid] as $ter) {

      $perfix = '';

      for ($i = 0; $i < $ter->depth; $i++) {
        $perfix .= '-';
      }

      $terms_optins[$ter->tid] = $perfix . $ter->name;
    }

  }


  foreach ($types as $type) {
    $content_type_options[$type->type] = $type->name;
  }

  $form['Content_Type']['edgemakers_media_content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type for media.'),
    '#default_value' => variable_get('edgemakers_media_content_type', 'media_for_upload'),
    '#description' => t('Set the content type to media.'),
    '#options' => $content_type_options,
  );

  /*
  // Config it in field.
  $form['Content_Type']['edgemakers_media_type_term'] = array(
    '#type' => 'select',
    '#title' => t('Type term of Set.'),
    '#default_value' => variable_get('edgemakers_media_type_term', 'media_file_types'),
    '#description' => t('Set the type term to media.'),
    '#options' => $voca_optins,
  );
  */

  //dpm($form);

  //return $form;

  return system_settings_form($form);

}


/**
 * Valida youtube id.
 *
 * @param unknown_type $id
 * @return boolean
 */
function _youtube_validId($id) {
  $url = 'http://www.youtube.com/oembed?url=http%3A//youtube.com/watch%3Fv%3D'. $id;
  //$response = drupal_http_request($url, array('method' => 'HEAD'));
  $response = curl_http_request($url, array('method' => 'HEAD'));
  //drupal_set_message('<pre>' . print_r($response, TRUE) . '</pre>');
  if ($response->code == 401) {
    return FALSE;
//     return "Embedding has been disabled for this video.";
  }
  elseif ($response->code != 200) {
    return TRUE;
    //return "The YouTube video ID is invalid or the video was deleted.";
  }
  return TRUE;
}

/**
 * Parse youtube url.
 * @param unknown_type $embedCode
 * @return Ambigous <The, String, string>
 */
function _youtube_url_parse($embedCode) {

  $url = array();

  $patterns = array(
    //http://www.youtube.com/watch?v=Hh3M9kiz_EQ
    '@www\.youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
    '@youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
    '@youtube\.com/embed/([^"\&\? ]+)@i',
    '@youtube\.com/v/([^"\&\? ]+)@i',
    '@youtube\.com/\?v=([^"\& ]+)@i',
    '@youtu\.be/([^"\&\? ]+)@i',
    '@gdata\.youtube\.com/feeds/api/videos/([^"\&\? ]+)@i',
  );

  foreach ($patterns as $pattern) {
    preg_match($pattern, $embedCode, $matches);
    //print('matches: <pre>' . print_r($matches, TRUE) . '</pre>');

    if (isset($matches[1])) {
      //drupal_set_message('<pre>' . print_r($matches, TRUE) . '</pre>');
      //print('matches: <pre>' . print_r($matches, TRUE) . '</pre>');
      return $matches;
    }

  }

  return $url;
}


function _get_media_tid($type) {
  $media_type_tid = '';

  $field_name = 'field_media_type';
  $info = field_info_field($field_name);
  $vocab_keys = array();
  foreach ($info['settings']['allowed_values'] as $item) {
    $vocab_keys[] = $item['vocabulary'];
    $vocab_machine_name = $item['vocabulary'];
  }

  switch ($type) {
    case 'video':
      $terms = taxonomy_get_term_by_name('Video', $vocab_machine_name);
      break;
    case 'image':
      $terms = taxonomy_get_term_by_name('Image', $vocab_machine_name);
      break;
  }

  foreach ($terms AS $term) {
    $media_type_tid = $term->tid;
  }

  return $media_type_tid;

}

function edgemakers_media_list($uid = '', $media_type = '' , $start = 0, $limit = 5) {

  $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  $media_nodes = array();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', array($content_type))
    ->propertyOrderBy('created', 'DESC')
    ->range($start, $limit);

  if ($uid) {
    $query->propertyCondition('uid', $uid);
  }

  if ($media_type) {
    $media_type_tid = _get_media_tid($media_type);
    $query->fieldCondition('field_media_type', 'tid', $media_type_tid);
    $query->fieldCondition('field_share', 'value', '1');
  }

  $result = $query->execute();

//   print('Query:<pre>'. print_r($query, TRUE) . '</pre>');
//   print('Result:<pre>'. print_r($result, TRUE) . '</pre>');

  if (!empty($result['node'])) {
    $media_nodes = node_load_multiple(array_keys($result['node']), '' , TRUE);
  }

//    print('<pre>' . print_r($media_nodes, TRUE) . '</pre>');
// dpm($media_nodes);


  return $media_nodes;

}


function _get_media_thumb($node) {
  $thumb_url = '';

  $field_media_url = field_get_items('node', $node, 'field_media_url');
  $media_url = $field_media_url && count($field_media_url) > 0 ? $field_media_url[0]['value'] : '';

  $youtube_id = _youtube_parser($media_url);

  if($youtube_id) {
    $thumb_url = 'http://img.youtube.com/vi/'.$youtube_id.'/0.jpg';
//     echo '<li>Youtube thumbnail: ' . $thumbnail . '</li>';
  }
  else {
    $thumb_url = $media_url;
  }

  return $thumb_url;
}

/**
 * Return media list on gallry pane.
 *
 * @param string $keyword
 *   - Search keyword.
 * @param int $pager
 *   - Current pager.
 */
function edgemakers_media_list_on_gallery($type = '', $pager = 0, $keyword = '') {

  global $user;
  $limit = 4;
  $start = $pager * $limit;

  if ($keyword) {
    $media_list = _edgemakers_media_upload_search_execute($type, $keyword, $pager);
  }
  else {
    $media_list = edgemakers_media_list('', $type, $start, $limit);
  }

  if (count($media_list) == 0) {
    return "";
  }

	arsort($media_list);

	$html = '<div class="pane-studio-box media item-studio">';

	$i = 1;
	foreach ($media_list as $node) {
	  $class = '';
		if ($i == 1) {
      $class = 'first';
    }

    if ($i == count($media_list)) {
      $class = 'last';
    }

    $node_thumb = _get_media_thumb($node);

    $html .= '<li class="' . $class . '">
            <span class="mediathumb ' . $node->title . ' ">
              <img src="' . $node_thumb . '"/>
            </span>';
    $edit_url = l('<span class =""></span>', 'node/' . $node->nid, array(
        'html' => true,
        'attributes' => array(
          'nid' => $node->nid,
          'class' => array('studio-media-list-item-link'),
        ),
              )
      );
    $html .= $edit_url;

    $html .= '</li>';

    $i++;
  }

	$html .= '</div>';

	return $html;

}

/**
 * Return media list on studiao pane.
 *
 * @param int $pager
 * @return string
 */
function edgemakers_media_list_on_studio($pager = 0) {

  global $user;
  $limit = 8;
  $start = $pager * $limit;

  $html = '<div class="pane-studio-box media item-studio">';

  if ($user->uid !== 0) {
    $my_media_nodes = edgemakers_media_list($user->uid, '', $start, $limit);

    if (count($my_media_nodes) == 0) {
      return "";
    }
//     dd($my_media_nodes);
		arsort($my_media_nodes);
		$i = 1;

		foreach ($my_media_nodes as $node) {
		  $class = '';
			if ($i == 1) {
        $class = 'first';
      }

      if ($i == count($my_media_nodes)) {
        $class = 'last';
      }

      $node_thumb = _get_media_thumb($node);

      $html .= '<li class="' . $class . '">
              <span class="mediathumb ' . $node->title . ' ">
                <img src="' . $node_thumb . '"/>
              </span>';
      $edit_url = l('<span class =""></span>', 'node/' . $node->nid, array(
          'html' => true,
          'attributes' => array(
            'nid' => $node->nid,
            'class' => array('studio-media-list-item-link'),
          ),
                )
        );
      $html .= $edit_url;

      $html .= '</li>';

      $i++;
    }

	}

	$html .= '</div>';

	return $html;
}

function edgemakers_my_media_list_on_toolbar($limit = 5) {

  global $user;

  $html = '<div class="toolbar-item media">';

  if ($user->uid !== 0) {
    $my_media_nodes = edgemakers_media_list($user->uid, '', 0, $limit);
//     dpm($my_media_nodes);
		arsort($my_media_nodes);
		$i = 0;

		foreach ($my_media_nodes as $node) {
			if ($i < 5) {

				$media_item['items'][$i]['data'] = l($node->title,
					'node/' . $node->nid,
					array(
						'attributes' => array(
							'id' => 'media-node-' . $node->nid,
	      		)
	      	)
	      );

	      $media_item['items'][$i]['class'][] = 'media-item';

	      $i++;
      }
    }

		if (count($media_item['items']) > 0) {

			$html .= '<h4 class="has-child">Media<em></em></h4>';

			$media_item['title'] = '';
			$media_item['type'] = 'ul';
			$media_item['attributes'] = array('id' => 'media-list', 'class' => 'media-video');

			$media_html = theme_item_list($media_item);
		}

		//dd($media_html, 'media list');

		$html .= $media_html;

	}

	if(count($my_media_nodes) <= 0) {
		$html .= '<h4 class="has-child">Media</h4>';
	}

	$html .= '</div>';

	return $html;

}

/**
 * Return media list data by uid.
 *
 * @param int $limit
 * @return string html
 */
function edgemakers_media_list_html($limit = 5) {

	global $user;
	$my_media_nodes = array();

	$content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');

	$html = '<div class="toolbar-item media">';
	//<h4 class="has-child">Media<em></em></h4>';

	if ($user->uid !== 0) {

		$my_coditions = array(
    	'uid' => $user->uid,
      'type' => $content_type,
    );

		$my_media_nodes = node_load_multiple('', $my_coditions);

		arsort($my_media_nodes);

		$i = 0;

		foreach ($my_media_nodes as $node) {
			if ($i < 5) {

				$media_item['items'][$i]['data'] = l($node->title,
					'node/' . $node->nid,
					array(
						'attributes' => array(
							'id' => 'media-node-' . $node->nid,
	      		)
	      	)
	      );

	      $media_item['items'][$i]['class'][] = 'media-item';

	      $i++;
      }
    }

		if (count($media_item['items']) > 0) {

			$html .= '<h4 class="has-child">Media<em></em></h4>';

			$media_item['title'] = '';
			$media_item['type'] = 'ul';
			$media_item['attributes'] = array('id' => 'media-list', 'class' => 'media-video');

			$media_html = theme_item_list($media_item);
		}

		//dd($media_html, 'media list');

		$html .= $media_html;

	}

	if(count($my_media_nodes) <= 0) {
		$html .= '<h4 class="has-child">Media</h4>';
	}

	$html .= '</div>';

	return $html;

}

/**
 * Ajax link callback;
 * @param unknown_type $page_callback_result
 */
function edgemakers_media_ajax_callback($page_callback_result) {
	// Only render content
	print $page_callback_result;
	// Perform end-of-request tasks.
	drupal_page_footer();
}

/**
 * Custome search by search module, but not hook_search_execute().
 * Configuration the search weight for it.
 */
function _edgemakers_media_upload_search_execute($type = '', $keys = '', $page = 0) {

  $pager = 5;
  $start = $page * $pager;

//   dpm('Start: ' . $start . ' | Pager: ' . $pager);

  if ($keys) {
    // Build matching conditions
    $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
    $query->join('node', 'n', 'n.nid = i.sid');
    $query->condition('n.type', 'media_for_upload');

    if ($type) {
      $media_type_tid = _get_media_tid($type);
      $query->innerJoin('field_data_field_media_type','media_type', 'n.nid = media_type.entity_id');
      $query->condition('media_type.field_media_type_tid' , $media_type_tid);

      $query->innerJoin('field_data_field_share','field_share', 'n.nid = field_share.entity_id');
      $query->condition('field_share.field_share_value', '1');
//       $query->condition('media_type.field_media_type_tid' , $media_type_tid);

//       $query->innerJoin('taxonomy_term_data', 'media_type', 'media_type.tid = ');
    }

    // Sort by Alphabetical, Date, Tags
    $query->orderBy('n.title', 'ASC');//ORDER BY title
    $query->orderBy('nid', 'DESC');//ORDER BY created

    // Join  field_tags table and term table.
    $query->leftJoin('field_data_field_tags','field_tags','n.nid = field_tags.entity_id');
    $query->leftJoin('taxonomy_term_data','term','field_tags.field_tags_tid = term.tid');
    // Order by tags by term ASC.
    $query->orderBy('term.name', 'ASC');//ORDER BY created

    //Debug
//     $query->isNotNull('field_tags.field_tags_tid');

    $query->condition('n.status', 1)->addTag('node_access')->searchExpression($keys, 'node');
    $query->range($start, $pager);


    // Insert special keywords.
    $query->setOption('type', 'n.type');
    $query->setOption('language', 'n.language');
    if ($query->setOption('term', 'ti.tid')) {
      $query->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
    }


    // Only continue if the first pass query matches.
    if (!$query->executeFirstPass()) {
      return array();
    }

    // Add the ranking expressions.
    _node_rankings($query);

    // Load results.
    $find = $query->limit(1000)->execute();

//     print('Find query: <pre>' . print_r($find, TRUE) . '</pre>');
//     dpm($find);

    $results = array();

    $i = 0;
    $j = 0;
    foreach ($find as $item) {

      if ($j >= $pager) {
        break;
      }

      if ($i >= $start) {
        // Render the node.
        $node = node_load($item->sid);
        $results[] = $node;
        $j++;
      }

      $i++;

    }

//     dpm($results);
    return $results;
  }

  return false;

}

/**
 * Implements hook_theme().
 */
// function edgemakers_media_upload_theme($existing, $type, $theme, $path) {


//   return array(
//     'media_for_upload_node_form' => array(
//       'render element' => 'form',
//       'template' => 'media-upload-node-form',
//       // this will set to module/theme path by default:
//       'path' => drupal_get_path('module', 'edgemakers_media_upload') . '/templates',
//     ),
//   );

// }

/**
 * Preprocessor for theme('article_node_form').
 */
// function template_preprocess_media_for_upload_node_form(&$variables) {

//   // nodeformcols is an alternative for this solution.
//   if (!module_exists('nodeformcols')) {

//     $variables['sidebar'] = array();   // Put taxonomy fields in sidebar.

//     $variables['sidebar'][] = $variables['form']['field_tags'];
//     hide($variables['form']['field_tags']);

//     // Extract the form buttons, and put them in independent variable.
//     $variables['buttons'] = $variables['form']['actions'];
//     hide($variables['form']['actions']);
//   }

// }

