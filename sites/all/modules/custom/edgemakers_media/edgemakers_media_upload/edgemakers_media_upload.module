<?php
/**
 * @file edgemarkes media upload
 */


/**
 * Implements hook_init().
 */
function edgemakers_media_upload_init() {
  drupal_add_css(drupal_get_path('module', 'edgemakers_media_upload') . '/css/edgemakers_media_upload.css');
  drupal_add_js(drupal_get_path('module', 'edgemakers_media_upload') . '/js/edgemakers_media_upload.js');
}

function edgemakers_media_upload_menu() {
  $items = array();

  // Module settings.
  $items['admin/config/system/ftesettings/media'] = array(
    'title' => 'Edgemakers Media Config',
    'description' => 'Edgemakers media settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgemakers_media_upload_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  //ajax callback add new organization
  $items['ajax/upload/%ctools_js/media'] = array(
    'title' => 'Upload media',
    'page callback' => 'edgemakers_media_upload_new',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['edgemarkers/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_html', // Render HTML
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',  // Magic goes here
    'page arguments' => array(5),
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function edgemakers_media_upload_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'media_for_upload_node_form') {

  	form_load_include($form_state, 'inc', 'node', 'node.pages');

    $form['#prefix'] = '<div id="upload-media-ajax-wrapper">';
    $form['#suffix'] = '</div>';

    unset($form['actions']['preview']);
    unset($form['actions']['delete']);
    //unset($form['actions']['submit']);


    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'edgemakers_media_upload_ajax_submit',
      'wrapper' => 'upload-media-ajax-wrapper',
    	'method' => 'replace',
      'effect' => 'fade',
    );


    $form['actions']['submit']['#value'] = t('Upload');

    //$form['actions']['submit']['#submit'] = array('_media_upload_submit');
    
    array_unshift($form['#validate'], 'edgemakers_media_upload_ajax_validate');
    //array_unshift($form['#submit'], '_media_upload_submit');
    
    //$form['actions']['submit']['#validate'] = array('edgemakers_media_upload_ajax_validate');
    //$form['actions']['submit']['#submit'] = array('_media_upload_submit');


    require_once(DRUPAL_ROOT . "/modules/node/node.pages.inc");

  }
}

function edgemakers_media_upload_ajax_validate($form, &$form_state) {
	
	global $user;

	form_load_include($form_state, 'inc', 'node', 'node.pages');
	
  $vals = $form_state['values'];

  //drupal_set_message('URL:' . $vals['field_youtube_url'][LANGUAGE_NONE][0]['url']);
  
  if (isset($vals['field_youtube_url'][LANGUAGE_NONE][0]['url'])) {
    $url_parse = _youtube_url_parse($vals['field_youtube_url'][LANGUAGE_NONE][0]['url']);
    //drupal_set_message('<pre>' . print_r($url_parse, TRUE) . '</pre>');
    if (isset($url_parse[1])) {
      //drupal_set_message('<pre>' . print_r($url_parse[1], TRUE) . '</pre>');
      $vaildYid = _youtube_validId($url_parse[1]);
      if ($vaildYid !== TRUE) {
        //drupal_set_message('<pre>' . print_r($vaildYid, TRUE) . '</pre>');
        form_set_error('field_youtube_url', 'Invalid youtube url.');
      }
    }
  }

}

function _media_upload_submit($form, &$form_state) {
  //$form_state['complete'] = TRUE;
  form_load_include($form_state, 'inc', 'node', 'node.pages');
  
  $vals = $form_state['values'];
  
  /*$content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  
  $newNode = (object) NULL;
  $newNode->type = $content_type;
  $newNode->title = $vals['title'];
  $newNode->created = strtotime("now");
  $newNode->changed = strtotime("now");
  $newNode->status = 1;
  $newNode->comment = 0;
  $newNode->promote = 0;
  $newNode->moderate = 0;
  $newNode->sticky = 0;
  $newNode->language = 'und';
  $newNode->field_youtube_url['und'][0]['url'] = $vals['field_youtube_url'];
  
  node_object_prepare($newNode);
  node_save($newNode);
  
  if ($vals['title']) {
  	$items = edgemakers_media_list_html();
  	return $items;
  	//print('Update: ' . $items);
  }
  */
  //drupal_set_message("Upload an media.");
  //drupal_set_message('Submited: <pre>' . print_r($form_state, TRUE) . '</pre>');
  //return "Sumbited";
}

function _customReloadMediaList() {
	return array(
    'command' => 'media_list_reload',
  );
}

/**
 * Ajax sumbit new media node.
 *
 * @param object $form
 * @param array $form_state
 */
function edgemakers_media_upload_ajax_submit($form, &$form_state) {

  if (form_get_errors()) {
    return $form;
  }
  
  //form_load_include($form_state, 'inc', 'node', 'node.pages');

  //drupal_add_js("Drupal.CTools.Modal.modal_dismiss", array('type' => 'inline'));

  $items = edgemakers_media_list_html();
  
  $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  ctools_include('node.pages', 'node', '');
  ctools_include('modal');
  ctools_include('ajax');

  /*$form_state = array(
    'title' => $title,
    'ajax'  => TRUE,
    'build_info' => array(
      'args'  => array($node),
    ),
  );*/
	//drupal_add_library('system', 'ui.dialog');
  $commands = ctools_modal_form_wrapper($content_type . '_node_form', $form_state);
  // overwrite commands.
  //$commands = array();
  
  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();
  //$commands[] = ajax_command_html("#my-media-list", $items . '<script>media_list_reload()</script>');
  //$commands[] = ajax_render('media_list_reload()');
  
  //ctools_add_js('ctools-ajax-upload-media', 'edgemakers_media_upload');
  
  //$commands[] = _customReloadMediaList();
  
  /*$vals = $form_state['values'];
  
  if ($vals['title']) {
  	$items = edgemakers_media_list_html();
  	return $items;
  }
  */
  print ajax_render($commands);
  exit;

  //return $form;

  /*$vals = $form_state['values'];
  if ($vals['field_upload_to_s3_media'][LANGUAGE_NONE][0]['fid']) {
    $img_info = file_load($vals['field_upload_to_s3_media'][LANGUAGE_NONE][0]['fid']);
    //drupal_set_message('Image\'s info: <pre>' . print_r($img_info, TRUE) . '</pre>');
    $form_state['title']['#value'] = $img_info->filename;

    //Update node title by filename.
    $node = node_load($form_state['node']->nid);
    $node->title = $img_info->filename;
    node_save($node);
  }*/

  # Create a new markup field and return it. It will replace the form output.
  /*$element = array();
  $element['#type'] = 'markup';
  $element['#markup'] = t("You upload " . $vals['field_youtube_url'][LANGUAGE_NONE][0]['value']);

  return $element;*/

}

/**
 * Implements hook_book_info();
 */
function edgemakers_media_upload_block_info() {

  $blocks['media_upload_link'] = array(
    'info' => t('Media upload link'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  
  $blocks['media_list'] = array(
  		'info' => t('Media list'), //The name that will appear in the block list.
  		'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );

  return $blocks;
}

/**
 * Implements hook_book_view()
 * @param unknown_type $delta
 */
function edgemakers_media_upload_block_view($delta = '') {

  global $base_root;
  global $base_path;

  global $user;

  switch($delta){
    case 'media_upload_link':

      global $user;

      $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
      $type = str_replace('_', '-', $content_type);

      $html = '<div class="toolbar-item test1">';

      // Include the CTools tools that we need.
      ctools_include('ajax');
      ctools_include('modal');

      // Add CTools' javascript to the page.
      ctools_modal_add_js();

      /******** Custom style of ctool modal **********/
      // Create our own javascript that will be used to theme a modal.
      $sample_style = array(
        'ctools-sample-style' => array(
          'modalSize' => array(
            'type' => 'fixed',
            'width' => 500,
            'height' => 320,
            'addWidth' => 20,
            'addHeight' => 15,
          ),
          'modalOptions' => array(
            'opacity' => .5,
            'background-color' => '#000',
          ),
          'animation' => 'fadeIn',
          //'modalTheme' => 'CToolsSampleModal',
        	'modalTheme' => 'CToolsEdgemakersUploadMediaModal',
          'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
        ),
      );

      drupal_add_js($sample_style, 'setting');
      
      // Since we have our js, css and images in well-known named directories,
      // CTools makes it easy for us to just use them without worrying about
      // using drupal_get_path() and all that ugliness.
      //ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
      ctools_add_js('ctools-ajax-upload-media', 'edgemakers_media_upload');
      ctools_add_css('ctools-ajax-upload-media', 'edgemakers_media_upload');

      // Create a list of clickable links.
      $links = array();

      // Four ways to do our animal picking wizard.
      $link_class = '';

      if ($user->uid) {
        $upload_link = 'modal/node/add/' . $type . '/nojs/0';
        //$upload_link = 'ajax/upload/media/ajax/1';
        //$upload_link = 'ajax/upload/nojs/media/1';
        $link_class = 'ctools-modal-ctools-sample-style';
        //'attributes' => array('class' => array('ctools-use-modal')
        //$links[] = ctools_modal_text_button('<h4>' . t('Upload') . '</h4>', $upload_link, t('Upload media'),  $link_class);
        $links[] = l(t('Upload'), $upload_link, array(
        	'html' => TRUE,
        	'attributes' => array(
        		'class' => array(
        			'ctools-use-modal',
        			'ctools-modal-ctools-sample-style'
        		),
        	)
        ));
      }
      else {
        $links[] = l(t('Upload'), 'user', array('html' => TRUE));
        $upload_link = 'user';
      }

      $output = theme('item_list', array('items' => $links, 'title' => ''));

      /******** End custom style of ctool modal **********/
      

      /*$output = l(t('Upload') , 'ajax/upload/nojs/media/1', array('attributes' => 
      		array(
      			'class' => array(
      				'ctools-use-modal',
      				//'ctools-use-modal-processed',
      			)
      		)
      	)
      );*/
      
      
      /*ctools_include('modal');
      ctools_include('ajax');
      ctools_modal_add_js();

      
      if ($user->uid) {
      	$upload_link = 'modal/node/add/' . $type . '/nojs/0';
      	$link_class = array('ctools-use-modal');
      }
      else {
      	$upload_link = 'user';
      	$link_class = array();
      }
      
      $output = l(t('Upload'), $upload_link , array(
      		'query' => array(
      			'destination' => $_GET['q'],
      		),
      		'attributes' => array(
      			'class' => $link_class,
      		)
      	)
      );
      */

      $html .= '<h4>' . $output . '</h4>';

      /*
      $type = variable_get('edgemakers_media_content_type', 'media_for_upload');
      $type = str_replace('_', '-', $type);

      $block['subject'] = t('Media upload');
      $html = '<div class="toolbar-item test1">';

      if ($user->uid) {
        $upload_link = 'modal/node/add/' . $type . '/ajax/1';
        //$upload_link = 'ajax/upload/media/ajax/1';
        $upload_link = 'ajax/upload/nojs/media/1';
        $link_class = array('ctools-use-modal');
      }
      else {
        $upload_link = 'user';
        $link_class = array();
      }

      $html .= $output;

      $html .= l('<h4>Upload</h4>',
          $upload_link,
            array(
              'query' => array(
                'destination' => $_GET["q"],
              ),
              'attributes' => array(
                'class' => $link_class,
              ),
              'html' => TRUE,
            )
        );
      */
      //$html .= '<li><a class="orgbtn ctools-use-modal  ctools-use-modal-processed" id="edit-add-test" href="/ajax/upload/media/nojs"><span>Add New Test</span></a></li>';
      $html .= '</div>';
      
      //$html .= '<div id="my-media-list" class="toolbar-item media"></div>';

      $block['content'] = $html;

      //$block['content'] .= '</div>';

      break;
    case 'media_list':
    	$block['subject'] = t('Media List');
    	$block['content'] = '<div id="my-media-list" class="toolbar-item media"></div>';
    default:
      break;
  }

  return $block;
}

/**
 * Copy from ctools_example.
 *
 * @param unknown_type $js
 * @param unknown_type $step
 * @return Ambigous <multitype:string The , multitype:string The Ambigous <The, unknown, string, A, Optional> >|Ambigous <The, void, string, A, boolean>
 */
function edgemakers_media_upload_new($js = NULL, $step = NULL) {

  global $user;
  $type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  $args = arg();

  //drupal_set_message("Load js is $js <pre>" . print_r($args, TRUE) . '</pre>');

  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }

  module_load_include('inc', 'node', 'node.pages');
  $form = node_add($type);
  $form['#states'] = array(
    'ajax' => $js,
  );

  //$output = '<h2>Call from my define menu.</h2>';
  $output .= drupal_render($form);

  if ($output === FALSE || !empty($form_state['complete'])) {
    drupal_set_message("Output is FALSE");
  }

  // If $output is FALSE, there was no actual form.
  if ($js) {
    // If javascript is active, we have to use a render array.
    $commands = array();
    if ($output === FALSE || !empty($form_state['complete'])) {
      // Dismiss the modal.
      $commands[] = ajax_command_html('#ctools-sample', $animal);
      $commands[] = ctools_modal_command_dismiss();
      $commands[] = ctools_ajax_command_redirect();
      ctools_ajax_render($commands);
    }
    else if (!empty($form_state['cancel'])) {
      // If cancelling, return to the activity.
      $commands[] = ctools_modal_command_dismiss();
    }
    else {
      $commands = ctools_modal_form_render($form_state, $output);
    }
    print ajax_render($commands);
    exit;
  }
  else {
    if ($output === FALSE || !empty($form_state['complete'])) {
      return $animal;
    }
    else if (!empty($form_state['cancel'])) {
      drupal_goto('ctools_ajax_sample');
    }
    else {
      return $output;
    }
  }

  //return drupal_render($form);

}

/**
 * Form builder function for module settings.
 */
function edgemakers_media_upload_settings() {

  $types = node_type_get_types();
  $content_type_options = array();
  $terms_optins = array();

  $vocabularies = taxonomy_get_vocabularies();

  foreach ($vocabularies AS $voca) {
    $voca_optins[$voca->vid] = $voca->name;
  }

  foreach ($vocabularies as $vocabula) {

    $terms_tree[$vocabula->vid] = taxonomy_get_tree($vocabula->vid);
    foreach ($terms_tree[$vocabula->vid] as $ter) {

      $perfix = '';

      for ($i = 0; $i < $ter->depth; $i++) {
        $perfix .= '-';
      }

      $terms_optins[$ter->tid] = $perfix . $ter->name;
    }

  }


  foreach ($types as $type) {
    $content_type_options[$type->type] = $type->name;
  }

  $form['Content_Type']['edgemakers_media_content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type for media.'),
    '#default_value' => variable_get('edgemakers_media_content_type', 'media_for_upload'),
    '#description' => t('Set the content type to media.'),
    '#options' => $content_type_options,
  );

  /*
  // Config it in field.
  $form['Content_Type']['edgemakers_media_type_term'] = array(
    '#type' => 'select',
    '#title' => t('Type term of Set.'),
    '#default_value' => variable_get('edgemakers_media_type_term', 'media_file_types'),
    '#description' => t('Set the type term to media.'),
    '#options' => $voca_optins,
  );
  */

  //dpm($form);

  //return $form;

  return system_settings_form($form);

}


/**
 * Valida youtube id.
 *
 * @param unknown_type $id
 * @return boolean
 */
function _youtube_validId($id) {
  $url = 'http://www.youtube.com/oembed?url=http%3A//youtube.com/watch%3Fv%3D'. $id;
  //$response = drupal_http_request($url, array('method' => 'HEAD'));
  $response = curl_http_request($url, array('method' => 'HEAD'));
  //drupal_set_message('<pre>' . print_r($response, TRUE) . '</pre>');
  if ($response->code == 401) {
    return "Embedding has been disabled for this video.";
  }
  elseif ($response->code != 200) {
    return TRUE;
    //return "The YouTube video ID is invalid or the video was deleted.";
  }
  return TRUE;
}

/**
 * Parse youtube url.
 * @param unknown_type $embedCode
 * @return Ambigous <The, String, string>
 */
function _youtube_url_parse($embedCode) {

  $url = array();

  $patterns = array(
    '@youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
    '@youtube\.com/embed/([^"\&\? ]+)@i',
    '@youtube\.com/v/([^"\&\? ]+)@i',
    '@youtube\.com/\?v=([^"\& ]+)@i',
    '@youtu\.be/([^"\&\? ]+)@i',
    '@gdata\.youtube\.com/feeds/api/videos/([^"\&\? ]+)@i',
  );

  foreach ($patterns as $pattern) {
    preg_match($pattern, $embedCode, $matches);

    if (isset($matches[1])) {
      //drupal_set_message('<pre>' . print_r($matches, TRUE) . '</pre>');
      return $matches;
    }

  }

  return $url;
}

/**
 * Return media list data by uid.
 *
 * @param int $limit
 * @return string html
 */
function edgemakers_media_list_html($limit = 5) {

	global $user;
	$content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
	
	$html = '';

	if ($user->uid) {
		$my_coditions = array(
      	'uid' => $user->uid,
      	'type' => $content_type,
      );
      $my_media_nodes = node_load_multiple('', $my_coditions);
      
      arsort($my_media_nodes);

      $i = 0;
      foreach ($my_media_nodes as $node) {
      	if ($i < 5) {
	      	$media_item['items'][$i]['data'] = l($node->title, 
      			'node/' . $node->nid,
	      		array(
		      		'attributes' => array(
		      			'id' => 'media-node-' . $node->nid,
	      			)
	      		)
	      	);
	      	$media_item['items'][$i]['class'][] = 'media-item';
	      	//$media_item['items'][$i]['id'][] = 'media-node-' . $node->nid;

	      	$i++;
      	}
      }

      //$my_mural_node['items']['class'][] = 'media-video';
      $media_html = '<div class="toolbar-item media"><h4 class="has-child">Media<em></em></h4>';
      
      if (count($media_item['items']) > 0) {
	      $media_item['title'] = '';
	      $media_item['type'] = 'ul';
	      $media_item['attributes'] = array('id' => 'media-list', 'class' => 'media-video');
	      
	      $media_list = theme_item_list($media_item);
	      
	      $media_html .= $media_list;

      }
      
      $media_html .= '</div>';
		
		$html .= $media_html;

	}

	return $html;

}

/**
 * Ajax link callback;
 * @param unknown_type $page_callback_result
 */
function edgemakers_media_ajax_callback($page_callback_result) {
	// Only render content
	print $page_callback_result;
	// Perform end-of-request tasks.
	drupal_page_footer();
}