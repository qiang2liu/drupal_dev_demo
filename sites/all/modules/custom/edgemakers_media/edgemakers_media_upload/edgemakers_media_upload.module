<?php

/**
 * @file
 * Edgemarkes media upload
 */


/**
 * Implements hook_init().
 */
function edgemakers_media_upload_init() {
  drupal_add_css(drupal_get_path('module', 'edgemakers_media_upload') . '/css/edgemakers_media_upload.css');
  drupal_add_js(drupal_get_path('module', 'edgemakers_media_upload') . '/js/edgemakers_media_upload.js');
}

/**
 * Implements hook_menu().
 */
function edgemakers_media_upload_menu() {
  $items = array();

  // Module settings.
  $items['admin/config/system/ftesettings/media'] = array(
    'title' => 'Edgemakers Media Config',
    'description' => 'Edgemakers media settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgemakers_media_upload_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  $items['edgemarkers/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_html',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',
    'page arguments' => array(5),
  );

  $items['edgemakers/media/info/ajax'] = array(
    'page callback' => 'edgemakers_media_view_html',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_stage_ajax_callback',
    'page arguments' => array(4),
    'file path' => drupal_get_path('module', 'edgemakers_stage'),
    'file' => 'stage.api.inc',
  );

  $items['edgemarkers/studio/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_on_studio',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_stage_ajax_callback',
    'page arguments' => array(6),
    'file path' => drupal_get_path('module', 'edgemakers_stage'),
    'file' => 'stage.api.inc',
  );

  $items['edgemarkers/gallery/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_on_gallery',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_stage_ajax_callback',
    'page arguments' => array(6, 7, 8),
    'file path' => drupal_get_path('module', 'edgemakers_stage'),
    'file' => 'stage.api.inc',
  );

  $items['edgemakers/media/download'] = array(
    'page callback' => 'edgemakers_media_upload_download',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page arguments' => array(3),
  );

  return $items;
}

/* gets the data from a URL */
function _get_data_curl($url) {
	$ch = curl_init();
	$timeout = 5;
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
	$data = curl_exec($ch);
	curl_close($ch);
	return $data;
}

/**
 * Create temp file from url.
 *
 * @param array $file
 *   - File info.
 *
 * @return string
 *   - Tmpe file name.
 */
function _create_tmp_download_file($file) {
  $tmp_dir = file_directory_temp();

  $tmp_file = pathinfo($file->filename);
  $tmp_file_name = $tmp_file['filename'] . round(microtime(true)*1000) . '.' . $tmp_file['extension'];
  $tmp_full_file_name = $tmp_dir . '/' . $tmp_file_name;

  // Get file content from url;
  $file_url = file_create_url($file->uri);
  $content =  _get_data_curl($file_url);
  watchdog('Debug', 'Get content from url: ' . $file_url . '<pre>' . print_r($file_url, TRUE) . '</pre>');

// print($tmp_file_name);
  $fh = fopen($tmp_full_file_name, 'w') or die("can't open file");
  fwrite($fh, $content);
  fclose($fh);

  return $tmp_file_name;

}

/**
 * Download file by fid.
 *
 * @param int $fid
 *   - File id.
 */
function edgemakers_media_upload_download($fid = '') {

  if ($fid) {

    $file = file_load($fid);
    $download_file = file_directory_temp() .'/'. _create_tmp_download_file($file);

//     $file_url = file_create_url($file->uri);
    watchdog('Debug', 'file info: ' . $download_file . '<pre>' . print_r($file, TRUE) . '</pre>');

    if (file_exists($download_file)) {
      header('Content-Description: File Transfer');
      header('Content-Type: application/octet-stream');
      header('Content-Disposition: attachment; filename='.basename($file->filename));
      header('Content-Transfer-Encoding: binary');
      header('Expires: 0');
      header('Cache-Control: must-revalidate');
      header('Pragma: public');
      header('Content-Length: ' . filesize($download_file));
      ob_clean();
      flush();
      readfile($download_file);
      exit;
    }

    exit;

    $tmp_file = pathinfo($file->filename);

    switch($tmp_file['extension']){
      case 'xls':
        $mimeType = 'application/vnd.ms-excel';
        break;

      case 'xlsx':
        $mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;

      default:
        $mimeType = $file->filemime;
        break;

    }
//  echo $mimeType;
    header('Content-Description: File Transfer');
    header('Content-Type: ' . $mimeType);
    header('Content-Disposition: attachment; filename='.basename($download_file));
    header('Content-Transfer-Encoding: binary');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Content-Length: ' . $file->filesize);
    ob_clean();
    flush();
    readfile(file_directory_temp() . $download_file);
    exit;


    header("Pragma: public");
    header("Expires: 0");
    header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
    header("Content-Type: application/force-download");
    header("Content-Type: application/octet-stream");
    header("Content-Type: application/download");
    header("Content-Type: $file->filemime");
    header("Content-Disposition: attachment;filename=".basename($download_file));
    header("Content-Transfer-Encoding: binary ");
    header("Content-Length: " . $file->filesize);
//     ob_clean();
//     flush();
//     readfile($download_file);

    exit;
  }

  exit;
}

/**
 * Implements hook_theme_registry_alter().
 */
function edgemakers_media_upload_theme_registry_alter(&$theme_registry) {
  $theme_registry['html5_player_default']['path'] = drupal_get_path('theme', 'newfteui');
}

/**
 * Media view html function.
 *
 * @param int $nid
 *   - Node id;
 *
 * @return Ambigous
 *   - <The, void, string, A, boolean>|string.
 */
function edgemakers_media_view_html($nid) {
  if ($nid) {
    $node = node_load($nid);
    return drupal_render(node_view($node, 'full'));
  }
  return 'Media page building.';
}

/**
 * Implements hook_form_alter().
 */
function edgemakers_media_upload_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'media_for_upload_node_form') {

    form_load_include($form_state, 'inc', 'node', 'node.pages');

    $form['#prefix'] = '<div id="upload-media-ajax-wrapper">';
    $form['#suffix'] = '</div>';

    $form['title']['#attributes']['placeholder'] = t('MEDIA TITLE');
    $form['field_media_type'][LANGUAGE_NONE]['#options']['_none'] = t('MEDIA TYPE');
    $form['field_media_url'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('MEDIA URL');
    $form['field_tags'][LANGUAGE_NONE]['#attributes']['placeholder'] = t('TAGS');
    $form['field_challenges_category'][LANGUAGE_NONE]['#options']['_none'] = t('CATEGORY');

    unset($form['actions']['preview']);
    unset($form['actions']['delete']);

    $vid = taxonomy_vocabulary_machine_name_load('media_file_types')->vid;
    $terms = taxonomy_get_tree($vid);
    $video_tid = 0;
    foreach ($terms as $term) {
      if ($term->name == t('Video')) {
        $video_tid = $term->tid;
      }
    }
    $form['field_media_url'][LANGUAGE_NONE][0]['value']['#states'] = array(
      'visible' => array(
        ':input[name="field_media_type[und]"]' => array(
          'value' => $video_tid,
        ),
      ),
    );
    $form['field_media_upload']['#states'] = array(
      'invisible' => array(
        ':input[name="field_media_type[und]"]' => array(
          array(
            'value' => '_none',
          ),
          array(
            'value' => $video_tid,
          ),
        ),
      ),
    );

    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'edgemakers_media_upload_ajax_submit',
      'wrapper' => 'upload-media-ajax-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );

    $form['actions']['submit']['#value'] = t('Upload');
    //just for the issue fte-427, overwriting the message of node /add/edit submiting
    $form['actions']['submit']['#submit'][0] = 'edgemakers_media_upload_node_form_submit';
    array_unshift($form['#validate'], 'edgemakers_media_upload_ajax_validate');

  }
}

//just for the issue fte-427, copy the function node_form_submit, only remove the drupal_set_message.

function edgemakers_media_upload_node_form_submit($form, &$form_state) {

  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  node_save($node);
  $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_type_get_name($node), '%title' => $node->title);

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
   // drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
   // drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = node_access('view', $node) ? 'node/' . $node->nid : '<front>';
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  // Clear the page and block caches.
  cache_clear_all();

}


/**
 * Implements hook_form_after_build() for edgemakers_media_upload_form().
 */
function _media_upload_form_after_build($form, $form_state) {
  array_unshift($form['#validate'], 'edgemakers_media_upload_ajax_validate');
  return $form;
}

/**
 * Implements hook_form_validate() for edgemakers_media_upload_form_validate().
 */
function edgemakers_media_upload_ajax_validate($form, &$form_state) {
  form_load_include($form_state, 'inc', 'node', 'node.pages');

  $vals = $form_state['values'];
  // Validat url while from youtube.
  $types = isset($vals['field_media_type']) ? $vals['field_media_type'][LANGUAGE_NONE] : NULL;
  $term = $types && count($types) > 0 ? taxonomy_term_load($types[0]['tid']) : '';
  if ($term) {
    $type = $term->name;
  }
  if ($type == 'Video') {
    $urls = isset($vals['field_media_url']) ? $vals['field_media_url'][LANGUAGE_NONE] : NULL;
    $media_url = $urls && count($urls) > 0 ? $urls[0]['value'] : '';

    if ($media_url) {

      module_load_include('inc', 'edgemakers_stage', 'stage.api');
      $youtube_url = _youtube_parser($media_url);

      if (!$youtube_url) {
        form_set_error('field_media_url[und][0][value]', 'Sorry, it is not a valid YouTube Link');
      }
    } else {
      form_set_error('field_media_url[und][0][value]', 'Sorry, please input a YouTube Link');
    }
  }
  else {
    $uploads = isset($vals['field_media_upload']) ? $vals['field_media_upload'][LANGUAGE_NONE] : NULL;
    $file = $uploads && count($uploads) > 0 ? file_load($uploads[0]['fid']) : '';

    if($file) {
      $upload = $file->uri;
      $extension = drupal_strtolower(drupal_substr($upload, strrpos($upload, '.') + 1));
      if($type == 'Image') {
        $allowedExtensions = array('jpg', 'jpeg', 'png', 'gif');
      } else if($type == 'Audio') {
        $allowedExtensions = array('wav', 'aif', 'mp3', 'mid');
      } else if($type == 'Docs') {
        $allowedExtensions = array('pdf');
      }
      if(!in_array($extension, $allowedExtensions)) {
        form_set_error('field_media_type[und][0][tid]', 'Sorry, only these extensions are available for your selected media type "'.$type.'": '. implode(', ', $allowedExtensions));
      }
    } else {
      form_set_error('', 'Sorry, you have to upload a media for your selected media type "'.$type.'"');

    }
  }
}


/**
 * Implements hook_form_submit() for edgemakers_media_upload_form().
 */
function edgemakers_media_upload_ajax_submit($form, &$form_state) {

  form_load_include($form_state, 'inc', 'node', 'node.pages');

  if (form_get_errors()) {
    return $form;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $commands = array();

  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();

  ctools_add_js('mediaListAjaxload', 'edgemakers_media_upload');

  ctools_add_js('ctools-ajax-upload-media', 'edgemakers_media_upload');

  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_book_info().
 */
function edgemakers_media_upload_block_info() {

  $blocks['media_upload_link'] = array(
    'info' => t('Media upload link'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['media_list'] = array(
    'info' => t('Media list'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['studio_media_list'] = array(
    'info' => t('Media list on studio pane'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['gallery_media_list'] = array(
    'info' => t('All media list on gallery pane'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['gallery_video_list'] = array(
    'info' => t('Video media list on gallery pane'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['gallery_image_list'] = array(
    'info' => t('Image media list on gallery pane'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_book_view().
 */
function edgemakers_media_upload_block_view($delta = '') {

  global $base_root;
  global $base_path;

  global $user;

  switch ($delta) {
    case 'media_upload_link':
      $link_html = '<div class="toolbar-item test1">';
      $link_html .= _build_ctool_modal_link();
      $link_html .= '</div>';
      $block['content'] = $link_html;
      break;

    case 'media_list':
      $block['subject'] = t('Media List');
      $block['content'] = '<div id="my-media-list" class="toolbar-item media"></div>';
      break;

    case 'studio_media_list':
      $block['subject'] = t('Media list on studio pane');
      $block['content'] = '<div class="pane-studio-box media item-studio" id="studio-media-list-pane">
                            <h4>media</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="studio-media-list"></ul>
                              </div>
                          </div>';
      break;

    case 'gallery_media_list':
      $block['subject'] = t('All media list on gallery pane');
      $block['content'] = '<div class="pane-gallery-box pane-studio-box media item-studio" id="gallery-media-list-pane">
                            <h4>Media</h4>
                            <div class="scroll-wrapper">
                              <div class="arrow-left" pager="0"> < </div>
                              <div class="arrow-right" pager="1"> > </div>
                              <ul id="gallery-media-list"></ul>
                            </div>
                          </div>';
      break;

    case 'gallery_video_list':
      $block['subject'] = t('Video media list on gallery pane');
      $block['content'] = '<div class="pane-gallery-box pane-studio-box media item-studio" id="gallery-video-list-pane">
                            <h4>Video</h4>
                            <div class="scroll-wrapper">
                              <div class="arrow-left" pager="0"> < </div>
                              <div class="arrow-right" pager="1"> > </div>
                              <ul id="gallery-video-list"></ul>
                            </div>
                          </div>';
      break;

    case 'gallery_image_list':
      $block['subject'] = t('Image media list on gallery pane');
      $block['content'] = '<div class="pane-gallery-box pane-studio-box media item-studio" id="gallery-image-list-pane">
                            <h4>Image</h4>
                            <div class="scroll-wrapper">
                              <div class="arrow-left" pager="0"> < </div>
                              <div class="arrow-right" pager="1"> > </div>
                              <ul id="gallery-image-list"></ul>
                            </div>
                          </div>';
      break;

  }

  return $block;

}

/**
 * Build link by ctool modal, and popup modal window.
 *
 * @return string
 *   - Model processed html code.
 */
function _build_ctool_modal_link() {

  global $user;

  $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  $type = str_replace('_', '-', $content_type);

  $html = '';

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  /******** Custom style of ctool modal **********/
  // Create our own javascript that will be used to theme a modal.
  $sample_style = array(
    'ctools-sample-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 600,
        'height' => 420,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      // 'modalTheme' => 'CToolsSampleModal',
      'modalTheme' => 'CToolsEdgemakersUploadMediaModal',
      'throbber' => theme('image',
        array(
          'path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'),
          'alt' => t('Loading...'),
          'title' => t('Loading'),
        )
      ),
    ),
  );

  drupal_add_js($sample_style, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  // Ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
  ctools_add_js('ctools-ajax-upload-media', 'edgemakers_media_upload');
  ctools_add_css('ctools-ajax-upload-media', 'edgemakers_media_upload');

  // Create a list of clickable links.
  $links = array();

  // Four ways to do our animal picking wizard.
  $link_class = array();

  if ($user->uid) {
    $upload_link = 'modal/node/add/' . $type . '/nojs/0';
    $link_class = array('ctools-use-modal', 'ctools-modal-ctools-sample-style');
  }
  else {
    $upload_link = 'modal_forms/nojs/login';
    $link_class = array('ctools-use-modal',  'ctools-modal-modal-popup-small');
  }

  $links[] = l(t('Upload'), $upload_link, array(
    'html' => TRUE,
    'attributes' => array(
      'class' => $link_class,
    ),
  ));

  $output = theme('item_list', array('items' => $links, 'title' => t('')));

  /******** End custom style of ctool modal **********/

  $html .= '<h4>' . $output . '</h4>';

  return $html;
}

/**
 * Form builder function for module settings.
 *
 * @return array
 *   - System settings form elements.
 */
function edgemakers_media_upload_settings() {

  $types = node_type_get_types();
  $content_type_options = array();
  $terms_optins = array();

  $vocabularies = taxonomy_get_vocabularies();

  foreach ($vocabularies as $voca) {
    $voca_optins[$voca->vid] = $voca->name;
  }

  foreach ($vocabularies as $vocabula) {

    $terms_tree[$vocabula->vid] = taxonomy_get_tree($vocabula->vid);
    foreach ($terms_tree[$vocabula->vid] as $ter) {

      $perfix = '';

      for ($i = 0; $i < $ter->depth; $i++) {
        $perfix .= '-';
      }

      $terms_optins[$ter->tid] = $perfix . $ter->name;
    }

  }

  foreach ($types as $type) {
    $content_type_options[$type->type] = $type->name;
  }

  $form['Content_Type']['edgemakers_media_content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type for media.'),
    '#default_value' => variable_get('edgemakers_media_content_type', 'media_for_upload'),
    '#description' => t('Set the content type to media.'),
    '#options' => $content_type_options,
  );

  return system_settings_form($form);

}


/**
 * Valida youtube id.
 *
 * @param int $id
 *   - Youtube video id.
 *
 * @return bool
 *   - boolean value.
 */
function _youtube_validId($id) {

  $url = 'http://www.youtube.com/oembed?url=http%3A//youtube.com/watch%3Fv%3D' . $id;
  $response = curl_http_request($url, array('method' => 'HEAD'));

  if ($response->code == 401) {
    return FALSE;
  }
  elseif ($response->code != 200) {
    return TRUE;
  }

  return TRUE;

}

/**
 * Parse youtube url.
 *
 * @param string $embed_code
 *   - Youtube embedcode or url.
 *
 * @return Ambigous
 *   - <The, String, string>
 */
function _youtube_url_parse($embed_code) {

  $url = array();

  $patterns = array(
    '@www\.youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
    '@youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
    '@youtube\.com/embed/([^"\&\? ]+)@i',
    '@youtube\.com/v/([^"\&\? ]+)@i',
    '@youtube\.com/\?v=([^"\& ]+)@i',
    '@youtu\.be/([^"\&\? ]+)@i',
    '@gdata\.youtube\.com/feeds/api/videos/([^"\&\? ]+)@i',
  );

  foreach ($patterns as $pattern) {
    preg_match($pattern, $embed_code, $matches);

    if (isset($matches[1])) {
      return $matches;
    }

  }

  return $url;
}


/**
 * Get media term tid by type name.
 *
 * @param string $type
 *   - Media type name.
 *
 * @return string
 *   - Term tid.
 */
function _get_media_tid($type) {
  $media_type_tid = '';

  $field_name = 'field_media_type';
  $info = field_info_field($field_name);
  $vocab_keys = array();
  foreach ($info['settings']['allowed_values'] as $item) {
    $vocab_keys[] = $item['vocabulary'];
    $vocab_machine_name = $item['vocabulary'];
  }

  switch ($type) {
    case 'video':
      $terms = taxonomy_get_term_by_name('Video', $vocab_machine_name);
      break;

    case 'image':
      $terms = taxonomy_get_term_by_name('Image', $vocab_machine_name);
      break;

    case 'audio':
      $terms = taxonomy_get_term_by_name('Audio', $vocab_machine_name);
      break;

    case 'docs':
      $terms = taxonomy_get_term_by_name('Docs', $vocab_machine_name);
      break;

  }

  foreach ($terms as $term) {
    $media_type_tid = $term->tid;
  }

  return $media_type_tid;

}

/**
 * Get media list function as same get node_load_multiple.
 *
 * @param string $uid
 *   - Account uid.
 *
 * @param string $media_type
 *   - Media type.
 *
 * @param int $start
 *   - List start.
 *
 * @param int $limit
 *   - List limit.
 *
 * @return Ambigous
 *   - <multitype:, An>
 */
function edgemakers_media_list($uid = '', $media_type = '', $start = 0, $limit = 5) {

  $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  $media_nodes = array();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', array($content_type))
    ->propertyOrderBy('created', 'DESC')
    ->range($start, $limit);

  if ($uid) {
    $query->propertyCondition('uid', $uid);
  }

  if ($media_type) {

    // Query media type.
    if ($media_type !== 'media') {
      $media_type_tid = _get_media_tid($media_type);
      $query->fieldCondition('field_media_type', 'tid', $media_type_tid);
    }

    // Query condition is share to gallery.
    $query->fieldCondition('field_share_to_gallery', 'value', '1');
  }

  $result = $query->execute();

  if (!empty($result['node'])) {
    $media_nodes = node_load_multiple(array_keys($result['node']), '', TRUE);
  }

  return $media_nodes;

}

/**
 * Get the media thumb by node.
 *
 * @param array $node
 *   - Node data.
 *
 * @return string
 *   - HTML code.
 */
function _get_media_thumb($node) {

  $thumb_url = '';

  $field_media_url = field_get_items('node', $node, 'field_media_url');
  $media_url = $field_media_url && count($field_media_url) > 0 ? $field_media_url[0]['value'] : '';

  $youtube_id = _youtube_parser($media_url);

  if ($youtube_id) {
    $thumb_url = 'http://img.youtube.com/vi/' . $youtube_id . '/0.jpg';
  }
  else {

    $media_type_field = field_get_items('node', $node, 'field_media_type');
    $media_type_tid = $media_type_field && count($media_type_field) > 0 ? $media_type_field[0]['tid'] : '';
    $media_type_term = taxonomy_term_load($media_type_tid);
    $media_type_name = isset($media_type_term->name)?$media_type_term->name : '';

    switch (strtolower($media_type_name)) {
      case 'image':
        if (isset($node->field_media_upload[LANGUAGE_NONE])) {
          $thumb_url = $node->field_media_upload[LANGUAGE_NONE][0]['uri'];
        }
        else {
          $thumb_url = drupal_get_path('module', 'edgemakers_media_upload') . '/images/iconImageDefault.png';
        }
        break;

      case 'audio':
        $thumb_url = drupal_get_path('module', 'edgemakers_media_upload') . '/images/iconAudioDefault.png';
        break;

      case 'docs':
        $thumb_url = drupal_get_path('module', 'edgemakers_media_upload') . '/images/iconDocsDefault.png';
        break;

      default:
        $thumb_url = $media_url;
        break;

    }

  }

  return $thumb_url;
}

/**
 * Return media list on gallry pane.
 *
 * @param string $type
 *   - Search keyword.
 *
 * @param int $page
 *   - Current page.
 *
 * @param string $keyword
 *   - Search keyword.
 *
 * @return string
 *   - HTML code.
 */
function edgemakers_media_list_on_gallery($type = '', $page = 0, $keyword = '') {

  global $user;
  $limit = 4;

  // Get all data.
  if (strtolower($type) == 'media') {
    $limit = 12;
  }

  $start = $page * $limit;

  if ($keyword) {
    $media_list = _edgemakers_media_upload_search_execute_result($type, $keyword, $page, $limit);
  }
  else {
    $media_list = edgemakers_media_list('', $type, $start, $limit);
  }

  if (count($media_list) == 0) {
//     return t('There is no !type available', array('!type' => $type));
    return '';
  }

  arsort($media_list);

  $html = '<div class="media item-studio">';

  $i = 1;
  foreach ($media_list as $node) {
    $class = '';
    if ($i == 1) {
      $class = 'first';
    }

    if ($i == count($media_list)) {
      $class = 'last';
    }

    $video_class = '';

    $node_thumb = _get_media_thumb($node);

    $html .= '<li class="' . $class . '">';

    // Cover.
    $node_user = user_load($node->uid);
    $node_field_first_name = field_get_items('user', $node_user, 'field_firstname');
    $node_first_name = $node_field_first_name && count($node_field_first_name) > 0 ? $node_field_first_name[0]['value'] : '';
    $node_field_last_name = field_get_items('user', $node_user, 'field_lastname');
    $node_last_name = $node_field_last_name && count($node_field_last_name) > 0 ? $node_field_last_name[0]['value'] : '';
    $node_username = $node_first_name . ' ' . $node_last_name;

    // Media type.
    $media_type_field = field_get_items('node', $node, 'field_media_type');
    $media_type_tid = $media_type_field && count($media_type_field) > 0 ? $media_type_field[0]['tid'] : '';
    $media_type_term = taxonomy_term_load($media_type_tid);
    $media_type_name = $media_type_term->name;
    if (!$media_type_name) {
      $media_type_name = 'Media';
    }

    $html .= '<div class="set-cover">';
    $html .= '<h5>' . $node->title . '</h5>
                <p class="inspiration">' . $node_username . '</p>
                <p class="' . strtolower($media_type_name) . '">' . $media_type_name . '</p>
              </div>';


    if (
      (strpos($node_thumb, 'img.youtube.com') !== false) OR
      (strpos($node_thumb, 'iconAudioDefault') !== false) OR
      (strpos($node_thumb, 'iconDocsDefault') !== false )
    ) {
      $video_class = ' video ';
      $media_thumb = theme('image', array('path' => $node_thumb));
    }
    else {
      // edgemakers_studio_gallery_list should "Scale and crop 156x106"
      // $media_thumb = theme('image_style', array('path' => $node_thumb, 'style_name' => 'edgemakers_studio_gallery_list'));
      $media_thumb = theme('image', array('path' => $node_thumb));
    }

    $html .= '<span class="mediathumb ' . $video_class . $node->title . ' ">';
    $html .=  $media_thumb;
    $html .= '</span>';

    $edit_url = l(t('<span class =""></span>'), 'node/' . $node->nid,
      array(
        'html' => TRUE,
        'attributes' => array(
          'nid' => $node->nid,
          'class' => array('studio-media-list-item-link'),
          'title' => $node->title,
        ),
      )
    );

    $html .= $edit_url;

    $html .= '</li>';

    $i++;

  }

  $html .= '</div>';

  return $html;

}

/**
 * Return media list on studiao pane.
 *
 * @param int $pager
 *   - Current page.
 *
 * @return string
 *   - HTML code.
 */
function edgemakers_media_list_on_studio($pager = 0) {

  global $user;
  $limit = 8;
  $start = $pager * $limit;

  $html = '';

  if ($user->uid !== 0) {
    $my_media_nodes = edgemakers_media_list($user->uid, '', $start, $limit);

    if (count($my_media_nodes) == 0) {
//       return t('There is no media available for you.');
      return '';
    }
    else {
      $html .= '<div class="media item-studio">';
    }

    arsort($my_media_nodes);
    $i = 1;

    foreach ($my_media_nodes as $node) {
      $class = '';
      if ($i == 1) {
        $class = 'first';
      }

      if ($i == count($my_media_nodes)) {
        $class = 'last';
      }

      $node_thumb = _get_media_thumb($node);

      $html .= '<li class="' . $class . '">';

      // Cover.
      $node_user = user_load($node->uid);
      $node_field_first_name = field_get_items('user', $node_user, 'field_firstname');
      $node_first_name = $node_field_first_name && count($node_field_first_name) > 0 ? $node_field_first_name[0]['value'] : '';
      $node_field_last_name = field_get_items('user', $node_user, 'field_lastname');
      $node_last_name = $node_field_last_name && count($node_field_last_name) > 0 ? $node_field_last_name[0]['value'] : '';
      $node_username = $node_first_name . ' ' . $node_last_name;

      // Media type.
      $media_type_field = field_get_items('node', $node, 'field_media_type');
      $media_type_tid = $media_type_field && count($media_type_field) > 0 ? $media_type_field[0]['tid'] : '';
      $media_type_term = taxonomy_term_load($media_type_tid);
      $media_type_name = isset($media_type_term->name)?$media_type_term->name : '';
      if (!$media_type_name) {
        $media_type_name = 'Media';
      }

      $html .= '<div class="set-cover">
                  <h5>' . $node->title . '</h5>
                  <p class="inspiration">' . $node_username . '</p>
                  <p class="' . strtolower($media_type_name) . '">' . $media_type_name . '</p>
                </div>';

      if (
        (strpos($node_thumb, 'img.youtube.com') !== false) OR
        (strpos($node_thumb, 'iconAudioDefault') !== false) OR
        (strpos($node_thumb, 'iconDocsDefault') !== false )
      ) {
        $video_class = ' video ';
        $media_thumb = theme('image', array('path' => $node_thumb));
      }
      else {
        // edgemakers_studio_gallery_list should "Scale and crop 156x106"
        // $media_thumb = theme('image_style', array('path' => $node_thumb, 'style_name' => 'edgemakers_studio_gallery_list'));
        $media_thumb = theme('image', array('path' => $node_thumb));
      }

      $html .= '<span class="mediathumb '. $video_class . $node->title . ' ">
                <img src="' . $node_thumb . '"/>
              </span>';

      $edit_url = l(t('<span class =""></span>'), 'node/' . $node->nid,
        array(
          'html' => TRUE,
          'attributes' => array(
            'nid' => $node->nid,
            'class' => array('studio-media-list-item-link'),
            'title' => $node->title,
          ),
        )
      );

      $html .= $edit_url;

      $html .= '</li>';

      $i++;
    }

    $html .= '</div>';

  }

  return $html;
}

/**
 * Show media list on toolbar.
 *
 * @param int $limit
 *   - Limit in list.
 *
 * @return string
 *   - HTML code.
 */
function edgemakers_my_media_list_on_toolbar($limit = 5) {

  global $user;

  $my_media_nodes = array();
  $html = '<div class="toolbar-item media">';

  if ($user->uid !== 0) {
    $my_media_nodes = edgemakers_media_list($user->uid, '', 0, $limit);
    arsort($my_media_nodes);
    $i = 0;

    foreach ($my_media_nodes as $node) {
      if ($i < 5) {

        $media_item['items'][$i]['data'] = l($node->title,
          'node/' . $node->nid,
          array(
            'attributes' => array(
              'id' => 'media-node-' . $node->nid,
            ),
          )
        );

        $media_item['items'][$i]['class'][] = 'edgemakers-media-item';

        $i++;
      }
    }
    if (count($media_item['items']) > 0) {

      $html .= '<h4 class="has-child">Media<em></em></h4>';

      $media_item['title'] = '';
      $media_item['type'] = 'ul';
      $media_item['attributes'] = array('id' => 'media-list', 'class' => 'media-video');

      $media_html = theme('item_list', $media_item);
      $html .= $media_html;
    }


  }

  if (count($my_media_nodes) <= 0) {
    $html .= '<h4 class="has-child">Media</h4>';
  }

  $html .= '</div>';

  return $html;

}

/**
 * Return media list data by uid.
 *
 * @param int $limit
 *   - Limit in list.
 *
 * @return string
 *   - HTML code.
 */
function edgemakers_media_list_html($limit = 5) {

  global $user;
  $nodes = array();

  $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');

  $html = '<div class="toolbar-item media">';

  if ($user->uid !== 0) {

    $media_items = array('items' => array());
    $nodes = edgemakers_media_get_my_media($user->uid, $content_type);
    foreach ($nodes as $node) {
      $media_items['items'][] = array(
        'data' => l($node->title,
          'node/' . $node->nid,
          array(
            'html' => TRUE,
            'attributes' => array(
              'id' => 'media-node-' . $node->nid,
              'title' => $node->title,
            ),
          )
        ),
        'class' => array('edgemakers-media-item'),
      );
    }

    if (count($media_items['items']) > 0) {

      $html .= '<h4 class="has-child">Media<em></em></h4>';

      $media_items['title'] = '';
      $media_items['type'] = 'ul';
      $media_items['attributes'] = array('id' => 'media-list', 'class' => 'media-video');

      $media_html = theme('item_list', $media_items);
      $html .= $media_html;
    }
    else {
      $html .= '<h4 class="has-child">Media</h4>';
    }

  }
  else {
    $html .= '<h4 class="has-child">Media</h4>';
  }

  $html .= '</div>';

  return $html;

}

/**
 * Get my media in studio.
 *
 * @param int $uid
 *   - Account uid.
 *
 * @param string $content_type
 *   - Media type name.
 *
 * @param int $limit
 *   - Limit in list.
 *
 * @return Ambigous
 *   - <multitype:, An>
 */
function edgemakers_media_get_my_media($uid, $content_type, $limit = 5) {
  $query = db_select('node', 'n');

  $nodes = array();
  $nids = $query->condition('n.type', $content_type)->condition('n.status', NODE_PUBLISHED)->condition('n.uid', $uid)->fields('n', array('nid'))->orderBy('n.changed', 'DESC')->addTag('node_access')->range(0, $limit)->execute()->fetchCol();

  if ($nids) {
    $nodes = node_load_multiple($nids);
  }

  return $nodes;

}

/**
 * Ajax link callback.
 *
 * @param array $page_callback_result
 *   - Ajax return elements.
 *
 * @return string
 *   - Ajax output string, maybe json format.
 */
function edgemakers_media_ajax_callback($page_callback_result) {
  // Only render content.
  print $page_callback_result;
  // Perform end-of-request tasks.
  drupal_page_footer();
}

/**
 * Custome search by search module, but not hook_search_execute().
 *
 * @param string $type
 *   - Media type name.
 *
 * @param string $keys
 *   - Search keyword.
 *
 * @param int $page
 *   - Current page.
 *
 * @param int $pager
 *   - Limit in page.
 *
 * @return array
 *   - Search node data.
 */
function _edgemakers_media_upload_search_execute_result($type = '', $keys = '', $page = 0, $pager = 5) {

  $start = $page * $pager;
  $keys = trim($keys);

  if ($keys) {

    $query = db_select('search_index', 'i')
      ->condition('i.type', 'node');

    // Full text search, copy from search.extender.inc.
    $query->innerJoin('search_dataset', 'd', 'i.sid = d.sid  AND i.type = d.type');

    // Full text search by drupal default search.
//     $query->condition('d.data', '%' . strtolower($keys) . '%', 'LIKE');

    // Keys is multi and split by "space".
//     $keys_array = explode(' ', $keys);
//     $orkeys = db_or();
//     foreach ($keys_array as $key) {
//       $orkeys->condition('i.word', '%' . strtolower($key) . '%', 'LIKE');
//     }
//     $query->condition($orkeys);

    // Unique sid.
    $query->AddExpression('distinct i.sid', 'sid_node');

    $query->range($start, $pager);

    $query->join('node', 'n', 'n.nid = i.sid');
    $query->condition('n.type', 'media_for_upload');
    $query->condition('n.status', 1);

    // Search by media type.
    if ($type && strtolower($type) !== 'media') {
      $media_type_tid = _get_media_tid($type);
      $query->innerJoin('field_data_field_media_type', 'media_type', 'n.nid = media_type.entity_id');
      $query->condition('media_type.field_media_type_tid', $media_type_tid);
    }

    // Just return "share to gallery" media.
    $query->innerJoin('field_data_field_share_to_gallery', 'field_share', 'n.nid = field_share.entity_id');
    $query->condition('field_share.field_share_to_gallery_value', '1');

    // The numeric score of the word, higher being more important.
    $query->orderBy('i.score', 'ASC');

    $query->orderBy('n.title', 'ASC');
    $query->orderBy('i.sid', 'DESC');
    $query->orderBy('n.nid', 'DESC');

    // Join  field_tags table and term table.
    $query->leftJoin('field_data_field_tags', 'field_tags', 'n.nid = field_tags.entity_id');
    $query->leftJoin('taxonomy_term_data', 'term', 'field_tags.field_tags_tid = term.tid');
    // Order by tags by term ASC.
    $query->orderBy('term.name', 'ASC');

    // Key search by normal SQL.
    $orkeys = db_or();
    $orkeys->condition('n.title', '%' . strtolower($keys) . '%', 'LIKE');
    $orkeys->condition('term.name', '%' . strtolower($keys) . '%', 'LIKE');

    $query->condition($orkeys);

    $find = $query->execute();

    $results = array();

    foreach ($find as $item) {
      // Render the node.
      $node = node_load($item->sid_node);
      $results[] = $node;
    }

    return $results;

  }

  return '';

}

/**
 * Validate image.
 *
 * @param string $url
 *   - Image url.
 *
 * @return bool
 *   - boolean.
 */
function _checkRemoteFile($url) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  // Don't download content.
  curl_setopt($ch, CURLOPT_NOBODY, 1);
  curl_setopt($ch, CURLOPT_FAILONERROR, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  if (curl_exec($ch) !== FALSE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
