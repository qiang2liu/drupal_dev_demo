<?php

/**
 * @file
 * Edgemarkes media upload
 */

/**
 * Implements hook_menu().
 */
function edgemakers_media_upload_menu() {
  $items = array();

  // Module settings.
  $items['admin/config/system/ftesettings/media'] = array(
    'title' => 'Edgemakers Media Config',
    'description' => 'Edgemakers media settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgemakers_media_upload_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'media_upload.admin.inc',
    'file path' => drupal_get_path('module', 'edgemakers_media_upload') ,
  );

  $items['edgemarkers/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_on_toolbar',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',
    'page arguments' => array(5),
    'file' => 'media_upload.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_media_upload') ,
  );

  $items['edgemakers/media/info/ajax'] = array(
    'page callback' => 'edgemakers_media_view_html',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',
    'page arguments' => array(4, 5),
    'file' => 'media_upload.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_media_upload') ,
  );

  $items['edgemarkers/studio/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_on_studio',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',
    'page arguments' => array(6),
    'file' => 'media_upload.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_media_upload') ,
  );

  $items['edgemarkers/gallery/media/get/list/ajax'] = array(
    'page callback' => 'edgemakers_media_list_on_gallery',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',
    'page arguments' => array(6, 7, 8),
    'file' => 'media_upload.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_media_upload') ,
  );

  $items['edgemakers/media/download'] = array(
    'page callback' => 'edgemakers_media_upload_download',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page arguments' => array(3),
    'file' => 'media_upload.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_media_upload') ,
  );

  $items['edgemakers/media/studio/get/nav/ajax'] = array(
    'page callback' => 'edgemakers_media_show_nav',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_media_ajax_callback',
    'page arguments' => array(6, 7, 8, 9),
    'file' => 'media_upload.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_media_upload') ,
  );

  return $items;
}

/**
 * Implements hook_theme_registry_alter().
 */
function edgemakers_media_upload_theme_registry_alter(&$theme_registry) {
  $theme_registry['html5_player_default']['path'] = drupal_get_path('theme', 'newfteui').'/templates/other';
}

/**
 * Implements hook_form_alter().
 */
function edgemakers_media_upload_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'media_for_upload_node_form') {

    form_load_include($form_state, 'inc', 'node', 'node.pages');

    $form_state['title'] = 'Media Upload';
    
    $form['#prefix'] = '<div id="upload-media-ajax-wrapper">';
    $form['#suffix'] = '</div>';

    $form['title']['#attributes']['placeholder'] = t('MEDIA TITLE');
    $form['field_media_type'][LANGUAGE_NONE]['#options']['_none'] = t('MEDIA TYPE');
    $form['field_media_url'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('MEDIA URL');
    $form['field_tags'][LANGUAGE_NONE]['#attributes']['placeholder'] = t('TAGS');

    unset($form['actions']['preview']);
    unset($form['actions']['delete']);

    $vid = taxonomy_vocabulary_machine_name_load('media_file_types')->vid;
    $terms = taxonomy_get_tree($vid);
    $video_tid = 0;
    foreach ($terms as $term) {
      if ($term->name == t('Video')) {
        $video_tid = $term->tid;
      }
    }
    $form['field_media_url'][LANGUAGE_NONE][0]['value']['#states'] = array(
      'visible' => array(
        ':input[name="field_media_type[und]"]' => array(
          'value' => $video_tid,
        ),
      ),
    );
    $form['field_media_upload']['#states'] = array(
      'invisible' => array(
        ':input[name="field_media_type[und]"]' => array(
          array(
            'value' => '_none',
          ),
          array(
            'value' => $video_tid,
          ),
        ),
      ),
    );
    $form['actions']['submit']['#states'] = array(
      'disabled' => array(
        ':input[name="files[field_media_upload_und_0]"]' => array(
          '!value' => '',
        ),
        ':input[name="field_media_upload[und][0][fid]"]' => array(
          'value' => 0,
        ),
      ),
    );

    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'edgemakers_media_upload_ajax_submit',
      'wrapper' => 'upload-media-ajax-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );

    $form['actions']['submit']['#value'] = t('Upload');
    //just for the issue fte-427, overwriting the message of node /add/edit submiting
    $form['actions']['submit']['#submit'][0] = 'edgemakers_media_upload_node_form_submit';
    array_unshift($form['#validate'], 'edgemakers_media_upload_ajax_validate');

  }
}

//just for the issue fte-427, copy the function node_form_submit, only remove the drupal_set_message.

function edgemakers_media_upload_node_form_submit($form, &$form_state) {

  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  node_save($node);
  $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_type_get_name($node), '%title' => $node->title);

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
   // drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
   // drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = node_access('view', $node) ? 'node/' . $node->nid : '<front>';
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  // Clear the page and block caches.
  cache_clear_all();

}


/**
 * Implements hook_form_after_build() for edgemakers_media_upload_form().
 */
function _media_upload_form_after_build($form, $form_state) {
  array_unshift($form['#validate'], 'edgemakers_media_upload_ajax_validate');
  return $form;
}

/**
 * Implements hook_form_validate() for edgemakers_media_upload_form_validate().
 */
function edgemakers_media_upload_ajax_validate($form, &$form_state) {
  form_load_include($form_state, 'inc', 'node', 'node.pages');

  $vals = $form_state['values'];
  // Validat url while from youtube.
  $types = isset($vals['field_media_type']) ? $vals['field_media_type'][LANGUAGE_NONE] : NULL;
  $term = $types && count($types) > 0 ? taxonomy_term_load($types[0]['tid']) : '';
  if ($term) {
    $type = $term->name;
  }
  if ($type == 'Video') {
    $urls = isset($vals['field_media_url']) ? $vals['field_media_url'][LANGUAGE_NONE] : NULL;
    $media_url = $urls && count($urls) > 0 ? $urls[0]['value'] : '';

    if ($media_url) {

      module_load_include('inc', 'edgemakers_stage', 'stage.api');
      $youtube_url = _youtube_parser($media_url);

      if (!$youtube_url) {
        form_set_error('field_media_url[und][0][value]', 'Sorry, it is not a valid YouTube Link');
      }
    } else {
      form_set_error('field_media_url[und][0][value]', 'Sorry, please input a YouTube Link');
    }
  }
  else {
    $uploads = isset($vals['field_media_upload']) ? $vals['field_media_upload'][LANGUAGE_NONE] : NULL;
    $file = $uploads && count($uploads) > 0 ? file_load($uploads[0]['fid']) : '';

    if($file) {
      $upload = $file->uri;
      $extension = drupal_strtolower(drupal_substr($upload, strrpos($upload, '.') + 1));
      if($type == 'Image') {
        $allowedExtensions = array('jpg', 'jpeg', 'png', 'gif');
      } else if($type == 'Audio') {
        $allowedExtensions = array('wav', 'aif', 'mp3', 'mid');
      } else if($type == 'Docs') {
        $allowedExtensions = array('pdf');
      }
      if(!in_array($extension, $allowedExtensions)) {
        form_set_error('field_media_type[und][0][tid]', 'Sorry, only these extensions are available for your selected media type "'.$type.'": '. implode(', ', $allowedExtensions));
      }
    } else {
      form_set_error('', 'Sorry, you have to upload a media for your selected media type "'.$type.'"');

    }
  }
}


/**
 * Implements hook_form_submit() for edgemakers_media_upload_form().
 */
function edgemakers_media_upload_ajax_submit($form, &$form_state) {

  form_load_include($form_state, 'inc', 'node', 'node.pages');

  if (form_get_errors()) {
    return $form;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $commands = array();

  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();

  ctools_add_js('mediaListAjaxload', 'edgemakers_media_upload');

  print ajax_render($commands);
  exit;
}

/**
 * Implements hook_block_info().
 */
function edgemakers_media_upload_block_info() {

  $blocks['media_upload_link'] = array(
    'info' => t('Media upload link'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['toolbar_media_list'] = array(
    'info' => t('Media list on toolbar'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['studio_media_list'] = array(
    'info' => t('Media list on studio pane'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['gallery_media_list'] = array(
    'info' => t('All media list on gallery pane'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_book_view().
 */
function edgemakers_media_upload_block_view($delta = '') {
  global $user;

  switch ($delta) {
    case 'media_upload_link':
      $link_html = '<div class="toolbar-item media-upload">';
      $link_html .= _build_ctool_modal_link();
      $link_html .= '</div>';
      $block['content'] = $link_html;
      break;

    case 'toolbar_media_list':
      $block['subject'] = t('Media List on toolbar');
      $block['content'] = '<div id="my-media-list" class="toolbar-item media"></div>';
      break;

    case 'studio_media_list':
      $block['subject'] = t('Media list on studio pane');
      $block['content'] = '<div class="pane-studio-box media item-studio" id="studio-media-list-pane">
                            <h4>media</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="studio-media-list"></ul>
                              </div>
                          </div>';
      break;

    case 'gallery_media_list':
      $block['subject'] = t('All media list on gallery pane');
      $block['content'] = '<div class="pane-gallery-box pane-studio-box media item-studio" id="gallery-media-list-pane">
                            <h4>Media</h4>
                            <div class="scroll-wrapper">
                              <div class="arrow-left" pager="0"> < </div>
                              <div class="arrow-right" pager="1"> > </div>
                              <ul id="gallery-media-list"></ul>
                            </div>
                          </div>';
      break;
    default:
      $block['subject'] = '';
      $block['content'] = '';

  }

  return $block;

}

/**
 * Build link by ctool modal, and popup modal window.
 *
 * @return string
 *   - Model processed html code.
 */
function _build_ctool_modal_link() {
  global $user;

  $content_type = variable_get('edgemakers_media_content_type', 'media_for_upload');
  $type = str_replace('_', '-', $content_type);
  
  $link_class = array();

  if ($user->uid) {
    $upload_link = 'modal/node/add/' . $type . '/nojs/0';
    $link_class = array('ctools-use-modal', 'ctools-modal-modal-popup-mediaupload');
  }
  else {
    $upload_link = 'user/login';
  }

  $link = l(t('Upload'), $upload_link, array(
    'html' => TRUE,
    'attributes' => array(
      'class' => $link_class,
    ),
  ));

  $html = '<h4>' . $link . '</h4>';

  return $html;
}