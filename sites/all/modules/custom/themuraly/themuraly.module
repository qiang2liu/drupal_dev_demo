<?php

function themuraly_menu() {

  $items['mural/create'] = array(
    'page callback' => 'themuraly_mural_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  	'page arguments' => array(2, 3, 4),
    'file' => 'mural_op.inc',
  );
  $items['mural/share/%'] = array(
    'page callback' => 'muralshow_share',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  /*
  $items['mural/create/%'] = array(
    'page callback' => 'themuraly_mural_page',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  */
  $items['mural/%'] = array(
    'page callback' => 'muralshow',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  $items['mural/usersearch/autocomplete'] = array(
    'page callback' => '_mural_usersearch_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  $items['muraltest'] = array(
    'page callback' => 'muralapi_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mural/delete'] = array(
  	'page callback' => 'mural_delete',
  	'access callback' => TRUE,
 		'type' => MENU_CALLBACK,
 		'page arguments' => array(2),
  	'file' => 'mural_op.inc',
  );

  $items['mural/get/list/ajax'] = array(
  	'page callback' => 'themuraly_mural_list_html', // Render HTML
  	'type' => MENU_CALLBACK,
 		'access arguments' => array('access content'),
 		'delivery callback' => 'themuraly_mural_ajax_callback',  // Magic goes here
//  		'page arguments' => array(5),
  );

  $items['mural/studio/get/list/ajax/%'] = array(
  	'page callback' => 'themuraly_studio_mural_list_html', // Render HTML
  	'type' => MENU_CALLBACK,
 		'access arguments' => array('access content'),
 		'delivery callback' => 'themuraly_mural_ajax_callback',  // Magic goes here
 		'page arguments' => array(5, 6),
  );

  $items['mural/studio/list/page/ajax/%'] = array(
  	'page callback' => 'themuraly_studio_mural_list_json', // Render HTML
  	'type' => MENU_CALLBACK,
 		'access arguments' => array('access content'),
 		'delivery callback' => 'themuraly_mural_ajax_callback',  // Magic goes here
 		'page arguments' => array(5, 6, 7, 8),
  );

//   $items['mural/studio/list/page/ajax/%'] = array(
//     'page callback' => 'themuraly_studio_mural_list_json',
//     'page arguments' => array(5, 6),
//     'access arguments' => array('access content'),
//     'type' => MENU_CALLBACK,
//     'delivery callback' => 'themuraly_mural_ajax_callback',  // Magic goes here
//   );

  // @link http://deeson-online.co.uk/labs/advanced-ctools-run-ctools-javascript-call-any-time
  $items['mural/%ctools_js/refresh-elements'] = array(
    'title' => 'AJAX callback - refresh the elements on the page',
    'page callback' => 'themuraly_refresh',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['mural/ajax_link_callback'] = array();
  return $items;
}

function themuraly_refresh($js = FALSE) {

  if (!$js) {
    // this is js only
    return;
  }

  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  $commands = array();
  $commands[] = ajax_command_html('.some-class', 'some-value');
  ajax_render($commands);

}

function themuraly_block_info() {
  $blocks['studio_list'] = array(
    'info' => t('Studio list'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['mural_link'] = array(
    'info' => t('mural link'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['mural_list'] = array(
  	'info' => t('Mural List'), //The name that will appear in the block list.
  	'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['gallery_mural_list'] = array(
    'info' => t('Mural list on gallery'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view();
 */
function themuraly_block_view($delta = '') {

  global $user;

  switch ($delta) {
    case 'studio_list':

      if ($user->uid == 0) {
        $mural_link = 'modal_forms/nojs/login';
      	$link_class = array('ctools-use-modal',  'ctools-modal-modal-popup-small');
      	$login_link = l(t('My studio'), $mural_link , array(
        		'attributes' => array(
        			'class' => $link_class,
        		)
          )
        );

        $block['subject'] = t('');
        $block['content'] = $login_link . t('Login to your studio.');
      }
      else {

        $block['subject'] = t('studio');

        module_load_include('inc', 'themuraly', 'mural_op');

        // get user's mural name and room id
        $account = user_load($user->uid);
        $the_field_obj = field_get_items('user', $account, 'field_muralusername');
        $the_user_muralusername = $the_field_obj[0]['value'];
        $the_field_obj = field_get_items('user', $account, 'field_muralroomid');
        $the_user_roomid = $the_field_obj[0]['value'];

        $block['content'] = '<div id="studio-panes-mural-list">
                              <h2 class="item-studio">Studio</h2>
                              <div class="pane-studio-box my-idea item-studio" id="studio-my-idea">
                              ';
        if ($user->uid) {
          $block['content'] .= '<h4>my Ideas</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="studio-mural-list">';
          $block['content'] .= themuraly_studio_mural_list_html();
          $block['content'] .= '</ul>
                              </div>';
        }

        $block['content'] .= '</div>';

        $block['content'] .= '<div class="pane-studio-box ideas-shared-with-me item-studio" id="studio-share-with-me">';

        if ($user->uid) {
          $block['content'] .= '<h4>Ideas Shared with me</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="studio-mural-share-with-me-list"></ul>
                              </div>';
        }

        $block['content'] .= '</div>';

        $block['content'] .= '</div>';
      }

//       if (1==1 || !empty($the_user_muralusername)) {
//         $block['content'] = get_myideas_shareideas($user->uid, $the_user_muralusername,  $the_user_roomid);

//       }

//         $block['content'] = get_myideas_shareideas($user->uid, $the_user_muralusername, $the_user_roomid);
      break;
    case 'mural_link':

    	$block['subject'] = 'mural link';
    	$html = '<div class="toolbar-item add-an-idea" class="hidden"><h4>';

      if ($user->uid) {
        $mural_link = 'mural/create';
        $link_class = array('create-mural');
      }
      else {
      	$mural_link = 'modal_forms/nojs/login';
      	$link_class = array('ctools-use-modal',  'ctools-modal-modal-popup-small');
      }

      $links = l(t('Create Mural'), $mural_link , array(
      		'attributes' => array(
      			'class' => $link_class,
      		)
        )
      );

      $html .= '<h4>' . $links . '</h4></div>';

    	$block['content'] = $html;
    	break;
    case 'mural_list':
    	$block['subject'] = t('Mural List');
    	$block['content'] = '<div id="my-mural-list" class="toolbar-item mural"></div>';
    	break;

    case 'gallery_mural_list':
      $block['subject'] = t('Mural list on gallery');

      $block['content'] = '<div id="gallery-panes-mural-list">
                              <h2 class="item-studio">Gallery</h2>
          <div id="gallery-search-form">
            <input type="text" id="gallery-keyword" name="gallery-keyword" />
            <input type="button" id="gallery-search" value="' . t('Search') .'" />
          </div>
          <div>
            <span>Sort by: Alphabetical, Date, Tags</span>
          </div>
                              <div class="pane-studio-box ideas item-gallery" id="gallery-ideas">
                              ';
        if ($user->uid) {
          $block['content'] .= '<h4>Ideas</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="gallery-mural-list"></ul>
                              </div>';
        }

        $block['content'] .= '
                              </div>';

        $block['content'] .= '</div>';

      break;
  }
  return $block;
}

function _get_my_murals() {
  global $user;
  if ($user->uid) {

  }
}

function themuraly_theme($existing, $type) {
  return array(
    'muralypage' => array(
      'variables' => array('data' => NULL),
      'template' => 'templates/muralypage',
    ),
    'studio_ideas_list' => array(
      'variables' => array('myideas' => array(), 'myshareideas' => array()),
      'template' => 'templates/studioideas',
    ),
  );
}

function themuraly_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'murals_node_form') {

    form_load_include($form_state, 'inc', 'node', 'node.pages');
    $the_nid = $form['nid']['#value'];
//     unset($form['field_muralid']);
//     unset($form['field_muraluser']);

    if ($the_nid) {  //edit form
      unset($form['actions']['delete']);
      $form['mural_member_search'] = array(
        '#type' => 'textfield',
        '#title' => t('user'),
        '#maxlength' => 255,
        '#required' => FALSE,
        '#autocomplete_path' => 'mural/usersearch/autocomplete',
      	'#attributes' => array('autocomplete' => 'on'),
        /*'#attributes' => array(
        	'class' => array('position-relative'),
        ),*/
      );

      $form['field_city']['und']['0']['#title'] = '';

      $form['mural_addmember_ajax_link'] = array(
        '#type' => 'button',
        '#value' => t('invite'),
        // Note the /nojs portion of the href - if javascript is enabled,
        // this part will be stripped from the path before it is called.

        '#id' => 'ajax_link',
        '#ajax' => array(
          'wrapper' => 'mural_member_list',
          'callback' => 'mural_addmember_ajax_callback',
          'method' => 'html',
        ),
        '#prefix' => '<div class="mural_member_area">',
      );
      array_unshift($form['#validate'], '_themuralyajax_validate');
      array_unshift($form['#submit'], '_themuralyajax_submit');

      $form['mural_member_area'] = array(
        '#markup' => '<div id="mural_member_list"> ' . _mural_member_list($the_nid) . ' </div>',
        '#suffix' => '</div>',
      );
    }
  }
}

function _mural_member_list($the_nid, $para_muralid = '') {

  global $user;
  $ret = array();
  if ($para_muralid == '') {
    // get muralid
    $the_mural = node_load($the_nid);
    if (isset($the_mural->nid)) {
      $muralid_obj = field_get_items('node', $the_mural, 'field_muralid');
      if (!empty($muralid_obj[0]['value'])) {
        $the_muralid = $muralid_obj[0]['value'];
        $str_p = preg_match("/[0-9]+$/", $the_muralid, $matches);
        if ($str_p) {
          $the_muralid = $matches[0];
        }
      }
    }
  } else {
    $the_muralid = $para_muralid;
  }

  if (!empty($the_muralid)) {
    if ($user->uid > 0) {
      $account = user_load($user->uid);
      if (!empty($account->field_muralusername)) {
        $fieldinfo = field_get_items('user', $account, 'field_muralusername');
        if ($fieldinfo) {
          $muralusername = $fieldinfo[0]['value'];

          if (!empty($muralusername)) {
            //call api , get member
            $mural_api = new Muralapi;
            $mural_api_result = $mural_api->retrieve_a_mural($muralusername, $the_muralid);
            if (is_object($mural_api_result) && isset($mural_api_result->data)) {
              $muralapi_response_obj = drupal_json_decode($mural_api_result->data);
              if (!empty($muralapi_response_obj['members']) && is_array($muralapi_response_obj['members'])) {
                $the_muralusers = array_keys($muralapi_response_obj['members']);
              }

              if (!empty($the_muralusers)) {
                // get user's picture
                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', 'user')
                        ->entityCondition('bundle', 'user')
                        ->fieldCondition('field_muralusername', 'value', $the_muralusers, 'in');
                $results = $query->execute();

                if (!empty($results) && !empty($results['user'])) {
                  $the_uids = array_keys($results['user']);
                  if (!empty($the_uids)) {
                    $users_array = user_load_multiple($the_uids);

                    $avatarUris = explode('/', variable_get('user_picture_default', ''));
                    $avatarUri_default = file_build_uri(array_pop($avatarUris));
                    foreach ($users_array as $k => $u) {
                      if ($u->picture) {

                        $avatarUri = $u->picture->uri;
                      } else {
                        $avatarUri = $avatarUri_default;
                      }
                      $userpic = theme('image_style', array('style_name' => 'edgemakers_avatar', 'path' => $avatarUri, 'alt' => $u->name, 'title' => $u->name,));
                      if (user_access('access user profiles')) {
                        //$userpic = l($userpic, 'user/' . $u->uid, array('html' => TRUE));
                      }
                      $ret[]['data'] = $userpic;

                      //Add share nid for each invite user
                      if ($u->uid <> $user->uid) {
                        $field_mural_share_with_me = field_get_items('user', $u, 'field_mural_share_with_me');
                        if ($field_mural_share_with_me) {
                          $mural_share_with_me = $field_mural_share_with_me[0]['value'];
                        }
//                         dpm($mural_share_with_me);
                        if ($mural_share_with_me) {
                          $share_with_me = explode(',', $mural_share_with_me);
                        }
                        else {
                          $share_with_me = array();
                        }
//                         dpm($share_with_me);
                        $share_with_me[] = $the_nid;
                        $mural_share_with_me_val = implode(',', array_unique($share_with_me));


                        $new_account->uid = $u->uid;
                        $new_account->field_mural_share_with_me['und'][0]['value'] = $mural_share_with_me_val;
                        // save existing user
                        unset($new_account->pass);
                        $new_account = user_save((object) array('uid'=>$new_account->uid), (array) $new_account);
//                         dpm($new_account);
                      }

//                       // edit field-data
//                       $u->field_mural_share_with_me['und'][0]['value'] = $mural_share_with_me_val;
//                       unset($u->pass);
//                       // save existing user
//                       $u = user_save((object) array('uid'=>$u->uid), (array) $u);
                      // End Add share id.

                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }


  $ret = theme_item_list(array('items' => $ret, 'attributes' => array(), 'type' => 'ul',));

  return $ret;
}

function _themuralyajax_validate($form, &$form_state) {
  global $user;
  form_load_include($form_state, 'inc', 'node', 'node.pages');

  if ($form_state['triggering_element']['#type'] == 'submit') {
   $property_array = array();

    $title = check_plain($form_state['values']['title']);
    if (empty($title)) {
      return;
    }
    $property_array['title'] = $title;
    $lang = $form_state['values']['language'];
    $muralshared = $form_state['values']['field_muralshared'][$lang][0]['value'];
    $property_array['shared'] = (bool) $muralshared;

    // invoked by submit button, not ajax button :'invite'
    $the_nid = $form_state['values']['nid'];
    // get muralid
    $the_muralid = '';
    $the_mural = node_load($the_nid);
    if (isset($the_mural->nid)) {
      $muralid_obj = field_get_items('node', $the_mural, 'field_muralid');
      if (!empty($muralid_obj[0]['value'])) {
        $the_muralid = $muralid_obj[0]['value'];
        $str_p = preg_match("/[0-9]+$/", $the_muralid, $matches);
        if ($str_p) {
          $the_muralid = $matches[0];
        }
      }

    }
    if (!empty($the_muralid)) {
      if ($user->uid > 0) {
        $account = user_load($user->uid);
        if (!empty($account->field_muralusername)) {
          $fieldinfo = field_get_items('user', $account, 'field_muralusername');
          if ($fieldinfo) {
            $muralusername = $fieldinfo[0]['value'];

            if (!empty($muralusername)) {


              foreach ($property_array as $k => $v) {
                $mural_api = new Muralapi;
                $property_name = $k;
                $property_value = $v;
                $result = $mural_api->update_mural_properties($muralusername, $the_muralid, $property_name, $property_value);

//                 dpm($result);

                if (is_object($result) && isset($result->data)) {
                  $data = $result->data;
//                   dpm('Update mural info:');
//                   dpm($result);
//                   dpm('End update mural info');

                  if (!is_string($data) || strtoupper($data) != 'OK') {
                    $the_form_ele = $k;
                    if ($k == 'shared') {
                      $the_form_ele = 'field_muralshared';
                    }
                    form_set_error($the_form_ele, t('can\'t update the mural properties.'));
                  }
                }
              }

              //Update the thumburl when update the node.
              $mural_api = new Muralapi;
              $result = $mural_api->retrieve_a_mural($muralusername, $the_muralid);
              $data = $result->data;
              $r = drupal_json_decode($data);

              $form_state['values']['field_mural_thumburl'][$lang][0]['value'] = $r['thumbUrl'];

              // Sync memeber data from mural.
              if (is_object($result) && isset($result->data)) {
                $muralapi_response_obj = drupal_json_decode($result->data);
                if (!empty($muralapi_response_obj['members']) && is_array($muralapi_response_obj['members'])) {
                  $the_muralusers = array_keys($muralapi_response_obj['members']);
                }

                $form_state['values']['field_mural_members'][$lang][0]['value'] = serialize($the_muralusers);
              }

            }
          }
        }
      }
    }
  }
}

function _themuralyajax_submit($form, &$form_state) {
  form_load_include($form_state, 'inc', 'node', 'node.pages');
}

function mural_addmember_ajax_callback($form, $form_state) {
  global $user;
  $the_nid = $form_state['values']['nid'];
  $the_muralid = '';
  $the_mural = node_load($the_nid);
  if (isset($the_mural->nid)) {
    $muralid_obj = field_get_items('node', $the_mural, 'field_muralid');
    if (!empty($muralid_obj[0]['value'])) {
      $the_muralid = $muralid_obj[0]['value'];
      $str_p = preg_match("/[0-9]+$/", $the_muralid, $matches);
      if ($str_p) {
        $the_muralid = $matches[0];
      }
    }

  }
  if (!empty($the_muralid)) {

    $member_username = $form_state['values']['mural_member_search'];
    $muraluser_invite = check_plain($member_username);

    if ($user->uid > 0 && !empty($muraluser_invite)) {
      $account = user_load($user->uid);
      if (!empty($account->field_muralusername)) {
        $fieldinfo = field_get_items('user', $account, 'field_muralusername');
        if ($fieldinfo) {
          $muralusername = $fieldinfo[0]['value'];

          if (!empty($muralusername)) {
            $mural_api = new Muralapi;
            $result = $mural_api->invite_user_mural($muralusername, $the_muralid, array($muraluser_invite));
          }
        }

        /////////////////////////
      }
    }
  }

  return _mural_member_list($the_nid, $the_muralid);
}

function muralapi_create_room($mural_api, $muralusername, $title, $account) {
  $mural_api_result = $mural_api->create_room($muralusername, $title);
  if (is_object($mural_api_result) && isset($mural_api_result->data)) {
    $muralapi_response_obj = drupal_json_decode($mural_api_result->data);
    if (!empty($muralapi_response_obj['id'])) {
      $edit['field_muralroomid'][LANGUAGE_NONE][0]['value'] = $muralapi_response_obj['id'];
      user_save($account, $edit);
      return $muralapi_response_obj['id'];
    }
  }
  return '';
}

function muralapi_test() {
  $output_html = '';

//   include_once('mural_op.inc');
//   muralshow_share('lwgmural', '1376967210186');

//   themuraly_get_mural_info('http://staging.mural.ly/!/#/lwgmural/1377006043205');
//   _get_node_from_mural_id('1377006043205');

  themuraly_studio_mural_list_json('gallery', 0, 'untitle');

//   _test_mural_list_for_a_user();
  //_test_user_add();
  //_test_create_room();
  // _test_mural_create_mural();
  //_test_mural_duplicate_mural();
  //_test_mural_update_property_mural();
  //_test_mural_archive();
  //_test_mural_del();
//   _test_mural_list_for_a_user();
  // _test_mural_invite_member();
//   _test_retrieve_a_mural();
//   themuraly_mural_list_html();

//   themuraly_get_mural_info('http://staging.mural.ly/!/#/lwgmural/1376967210186');

  // $output_html = "<iframe frameborder='0' src='http://staging.mural.ly/embed/edgemakers/edgemakers/1374110398829' width=500px height=500px'></iframe>";
//   $output_html = "<iframe frameborder='0' src='http://staging.mural.ly/embed/edgemakers/edgemakers/1374641493558' width=500px height=500px'></iframe>";


  return $output_html;
}

function _test_mural_invite_member() {
  $username = 'kk2t';
  $muralid = '1375063051875';
  $muraluserids = array('kikora');
  $mural_api = new Muralapi;
  $result = $mural_api->invite_user_mural($username, $muralid, $muraluserids);
  dpm($result);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($r);
}

function _test_mural_del() {
  $mural_api = new Muralapi;
  $username = "testuser";
  $muralid = "1374197201377";
  $result = $mural_api->delete_mural($username, $muralid);
  $data = $result->data;  //it is a string
  //$r = drupal_json_decode($data);
  dpm($result);
  dpm($data);
}

function _test_create_room() {
  $mural_api = new Muralapi;
  $username = "testuser";
  $title = 'mymuralroom';
  $result = $mural_api->create_room($username, $title);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_retrieve_a_mural() {
  $username = 'kk2t';  //owner
  // $username = 'kikora';
  $muralid = '1375231303413';
  $muralid = '1375063051875';
  $muralid = '1375252040839';
  $muralid = '1375252809540';
  $mural_api = new Muralapi;
  $result = $mural_api->retrieve_a_mural($username, $muralid);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_mural_archive() {
  $mural_api = new Muralapi;
  $username = "testuser";
  $muralid = "1374197201377";
  $archive_flag = 1;
  $result = $mural_api->archive_mural($username, $muralid, $archive_flag);
  $data = $result->data;
  //$r = drupal_json_decode($data);
  dpm($result);
  dpm($data);
}

function _test_mural_update_property_mural() {
  $mural_api = new Muralapi;

  $username = 'kk2t';
  $muralid = '1375063051875';
  $property_name = "shared";
  $property_value = (bool) 1;
  $result = $mural_api->update_mural_properties($username, $muralid, $property_name, $property_value);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_mural_duplicate_mural() {
  $mural_api = new Muralapi;
  $params = array('title' => 'this is a duplicate from a mural', 'room' => 1373060830214,);
  $result = $mural_api->duplicate_mural('testuser', '1373655313624', $params);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_mural_create_mural() {
  $mural_api = new Muralapi;
  $str = rand(800, 10000);
  $params = array('title' => $str . ' this is a mural', 'room' => 1373060830214,);
  $result = $mural_api->create_mural('testuser', $params);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_mural_list_for_a_user() {
  $mural_api = new Muralapi;
  $result = $mural_api->get_all_murals('lwgmural');
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_user_add() {

  $mural_api = new Muralapi;
  $str = rand(800, 10000);
  $user = array();
  $user['username'] = "cldf" . $str;
  // $user['username'] = "ppt777";
  $user['email'] = "cldf" . $str . "@symbio.com";
  $user['source'] = "edgemakers";
  $user['nameIdentifier'] = 3;

  $mural_api_result = $mural_api->create_user($user, '/api/organizations/edgemakers/users', 'POST');
  dpm($mural_api_result);
  //dd($mural_api_result);
  $muralapi_response_obj = drupal_json_decode($mural_api_result->data);
  dpm($muralapi_response_obj);

  if (isset($muralapi_response_obj['hasErrors'])) {
    if (!$muralapi_response_obj['hasErrors']) {
      // successful, then
      $edit = array();
      // the $muralapi_response_obj will contain the user attribute ($muralapi_response_obj->user)
      // but now ,it has no this attribute, so , just reguard the $account->name as the  mural username
      $the_mural_username = "";
      if (isset($muralapi_response_obj['user'])) {
        if (isset($muralapi_response_obj['user']['username'])) {
          $the_mural_username = $muralapi_response_obj['user']['username'];
        }
      }


      $edit['field_muralusername'][LANGUAGE_NONE][0]['value'] = $the_mural_username;
      // user_save($account, $edit);
      dpm($edit);
    }
  }
}

/**
 * Implments hook_init();
 */
function themuraly_init() {
//   ctools_include('modal');
//   ctools_include('ajax');
//   ctools_add_js('ajax-responder');
//   ctools_add_js('dependent');
	drupal_add_css(drupal_get_path('module', 'themuraly') . '/css/themuraly.css');
	drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/themuraly.js');
// 	drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/refreshElements.js');
}


function themuraly_studio_mural_list_json($type = 'gallery', $page = '0', $keyword = '', $sortby = '') {

  $args = arg();

  global $user;
  $uid = 0;
  $clean_node = array();
  $html = '';
  $limit = 5;
  $start = $page * $limit;

  if ($type == 'my') {
    $uid = $user->uid;
  }

  $conditions = array();

  $orderby = array();

  if ($type == 'gallery') {
    // Current sort by Alphabetical, Date, Tags
    // Sort by Alphabetical on title.
    $orderby[0]['name'] = 'title';
    $orderby[0]['direction'] = 'ASC';

    // Sort by Alphabetical on Date[nid].
    $orderby[1]['name'] = 'nid';
    $orderby[1]['direction'] = 'DESC';

    // Order by tags, @TODO
    $vocab_info = field_info_field('field_tags');
    $vocab_keys = array();
    foreach ($vocab_info['settings']['allowed_values'] as $vocab_item) {
      $vocab_keys[] = $vocab_item['vocabulary'];
    }
    if (($vocab_keys[0])) {
      $vocab_name = $vocab_keys[0];
//       dpm($vocab_name);
    }

//     $query->join('node', 'n', 'n.nid = i.sid');

  }

  if ($keyword) {
    $murals_list = _themuraly_search_execute_result($keyword, $page);
//     dpm($murals_list);
//     return 'Test results';
  }
  else {
    $murals_list = themuraly_mural_list($uid, $start, $limit, $conditions, $orderby);
  }

  if (count($murals_list) <= 0) {
    return '';
  }
// 	dpm($murals_list);
// 		arsort($murals_list);

	$i = 1;
	foreach ($murals_list as $node) {

		if ($i == 1) {
      $class = 'first';
    }

    if ($i == count($murals_list)) {
      $class = 'last';
    }

    $node_user = user_load($node->uid);
    $node_field_first_name = field_get_items('user', $node_user, 'field_firstname');
    $node_first_name = $node_field_first_name && count($node_field_first_name) > 0 ? $node_field_first_name[0]['value'] : '';
    $node_field_last_name = field_get_items('user', $node_user, 'field_lastname');
    $node_last_name = $node_field_last_name && count($node_field_last_name) > 0 ? $node_field_last_name[0]['value'] : '';
    $node_username = $node_first_name . ' ' . $node_last_name;

    $html .= '<li>';

    $html .= '<div class="set-cover">
                    <h5>' . $node->title .'</h5>
                    <p class="inspiration">' . $node_username .'</p>
                  </div>';

    $node_mural_thumburl = field_get_items('node', $node, 'field_mural_thumburl');
    $defula_thumburl = 'https://s3.amazonaws.com/static.mural.ly/NoThumbnail.png';
    $mural_thumburl = empty($node_mural_thumburl[0]['value'])?$defula_thumburl:$node_mural_thumburl[0]['value'];

    $html .= '<span class="muralthumb ' . $node->title . '">';
    $mural_thumb = array('path' => $mural_thumburl);
    $html .= theme('image', $mural_thumb);
    $html .= '</span>';

    $view_url = l('<span class ="muralsettingicon"></span>', 'mural/' . $node->nid, array(
      'html' => true,
      'attributes' => array(
        'class' => array('studio-mural-list-item-link'),
        'nid' => $node->nid,
      ),
            )
    );

    $html .= $view_url;

    if ($user->uid == $node->uid) {
      $html .= $set_url;
    }

    $html .= '</li>';

    $i++;

	}

//   echo $html;
	return $html;

}

/**
 * Build mural list html on studio pans.
 *
 * @param int $uid
 * @param int $page
 * @return Ambigous <An, string>
 */
function themuraly_studio_mural_list_html($type = 'ideas', $page = '0') {

  global $user;
  $limit = 5;
  $start = $page * $limit;

  $html = '';

  if ($user->uid) {

    switch ($type) {
      case 'my':
        $nodes = themuraly_mural_list($user->uid, $start, $limit);
        break;
      case 'share':
        $account = user_load($user->uid);
        $the_field_obj = field_get_items('user', $account, 'field_mural_share_with_me');
        $mural_share_with_me = explode(',' , $the_field_obj[0]['value']);

        if ($mural_share_with_me) {
          $query = new EntityFieldQuery();

          $query->entityCondition('entity_type', 'node')
            ->propertyCondition('status', 1)
            ->propertyCondition('type', array('murals'))
            ->propertyCondition('nid', $mural_share_with_me, 'IN')
            ->propertyOrderBy('created', 'DESC')
            ->range($start, $limit);

          $result = $query->execute();

          if (!empty($result['node'])) {
            $nodes = node_load_multiple(array_keys($result['node']), '' , TRUE);
          }
        }

        break;
      default:
        $nodes = themuraly_mural_list('', $start, $limit);
        break;
    }

    $i = 1;

    if (is_array($nodes)) {

      foreach ($nodes as $knid => $node) {

        $node_first_name = '';
        $node_last_name = '';

        $node_muralfield = field_get_items('node', $node, 'field_muralid');
        $node_muralid = $node_muralfield[0]['value'];

        $node_mural_thumburl = field_get_items('node', $node, 'field_mural_thumburl');
        $defula_thumburl = 'https://s3.amazonaws.com/static.mural.ly/NoThumbnail.png';
        $mural_thumburl = empty($node_mural_thumburl[0]['value'])?$defula_thumburl:$node_mural_thumburl[0]['value'];

        $myideas_list[$node_muralid]['nid'] = $knid;
        $myideas_list[$node_muralid]['title'] = $node->title;
        $myideas_list[$node_muralid]['thumburl'] = $mural_thumburl;

        if ($user->uid == $node->uid) {
          $img_settings = array(
          	'path' => drupal_get_path('theme', 'newfteui') . '/images/iconPaneMuralSettings.png',
          );
          $img_gear = theme('image', $img_settings);
          if ($user->uid == $node->uid) {
            $set_link = 'modal/node/' . $node->nid . '/edit/ajax/0';
            $set_url = l($img_gear, $set_link, array(
              'html' => true,
              'attributes' => array(
                'class' => array('ctools-use-modal',  'ctools-modal-modal-popup-small', 'studio-mural-settings'),
                'nid' => $node->nid,
//                 'class' => array('studio-mural-settings', 'ctools-use-modal'),
              ),
                    )
            );

          } else {
            $set_url = '';
          }

          $myideas_list[$node_muralid]['seturl'] = $set_url;
        }

        $node_user = user_load($node->uid);
        $node_field_first_name = field_get_items('user', $node_user, 'field_firstname');
        $node_first_name = $node_field_first_name && count($node_field_first_name) > 0 ? $node_field_first_name[0]['value'] : '';
        $node_field_last_name = field_get_items('user', $node_user, 'field_lastname');
        $node_last_name = $node_field_last_name && count($node_field_last_name) > 0 ? $node_field_last_name[0]['value'] : '';
        $node_username = $node_first_name . ' ' . $node_last_name;

        $html .= '<li>';

        $html .= '<div class="set-cover">
                    <h5>' . $node->title .'</h5>
                    <p class="inspiration">' . $node_username .'</p>
                  </div>';

        $html .= '<span class="muralthumb ' . $node->title . '">';
        $mural_thumb = array('path' => $mural_thumburl);
        $html .= theme('image', $mural_thumb);
        $html .= '</span>';
//         $html .= '<span class="my-idea-mural-title">' . $node->title . '</span>';
//         $html .= '<span class="owner">' . $node_first_name . ' ' . $node_last_name . '</span>';

        $view_url = l('<span class ="muralsettingicon"></span>', 'mural/' . $node->nid, array(
          'html' => true,
          'attributes' => array(
            'class' => array('studio-mural-list-item-link'),
//             'class' => array('ctools-use-modal',  'ctools-modal-modal-popup-small'),
            'id' => 'media-node-' . $node->nid,
          ),
        ));

        $html .= $view_url;

        if ($user->uid == $node->uid) {
          $html .= $set_url;
        }

        $html .= '</li>';

//       $myideas_list[$node_muralid]['node'] = $node;

      }
    }

  }

//   $content = theme('studio_ideas_list', array('myideas' => $myideas_list, 'myshareideas' => $shareideas_list));

  return  $html;

}


function themuraly_mural_list($uid = '', $start = 0, $limit = 5, $conditions = array(), $sortby = array()) {

  $my_mural_nodes = array();

  if (empty($sortby)) {
    $sortby[$i]['name'] = 'nid';
    $sortby[$i]['direction'] = 'DESC';
  }


  if ($conditions) {
    $query = new EnergyEntityFieldQuery;

//     foreach ($conditions AS $con_key => $con_arry) {
//       $query_condition_field = $con_key . 'Condition';
//       dpm($query_condition_field);
//       if ($con_key == 'field') {
//         foreach ($con_arry AS $con) {
//           dpm($con);
//           $query->{$query_condition_field}($con['field'], $con['column'], $con['value'], $con['operator']);
//     //       $query->propertyCondition($condition['column'], $condition['value'], $condition['operator']);
//         }
//       }
//       else {
//         foreach ($con_arry AS $con) {
//           dpm($con);
//           $query->{$query_condition_field}($con['column'], $con['value'], $con['operator']);
//     //       $query->propertyCondition($condition['column'], $condition['value'], $condition['operator']);
//         }
//       }
//     }

  }
  else {
    $query = new EntityFieldQuery();
  }

  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', array('murals'))
    ->range($start, $limit);

  if ($uid) {
    $query->propertyCondition('uid', $uid);
  }

  foreach ($sortby AS $sort) {
    $query->propertyOrderBy($sort['name'], ($sort['direction'])?$sort['direction']:'DESC');
  }

//   dpm($query);

//   if ($sortby) {
//     switch (strtolower($sortby)) {
//       case 'alphabetical':
//         $query->propertyOrderBy('title', 'ASC');
//         break;
//       case 'date':
//         $query->propertyOrderBy('created', 'DESC');
//         break;
//       case 'location':
//         // @link https://drupal.org/node/1214150
//         $subquery = db_select('location');
//         $subquery->addField('location', 'lid');
//         $subquery->condition('location.city', $city);
//         // Add location field custom that must disable Nodes Location module.
//         // @link https://drupal.org/node/906968#comment-3823512
//         $query->fieldCondition('field_city', 'lid', $subquery, 'IN');
//         break;
//       case 'tags':

//         break;
//     }
//     $query->propertyOrderBy($sortby, 'DESC');
//   }
//   else {
//     $query->propertyOrderBy('created', 'DESC');
//   }

//   if ($keyword) {
//     $query->propertyCondition('uid', $uid);
//   }
//   dpm($query);

  $result = $query->execute();

//   dpm($result);

  if (!empty($result['node'])) {
    $my_mural_nodes = node_load_multiple(array_keys($result['node']), '' , TRUE);
  }

//   print("Nodes list:");
//   dpm($my_mural_nodes);

  return $my_mural_nodes;

}

/**
 * Return mural list data by uid.
 *
 * @param int $limit
 * @return string html
 */
function themuraly_mural_list_html($limit = 5) {

	global $user;

	$my_mural_nodes = array();
	$content_type = 'murals';

	$html = '<div class="toolbar-item media">';

	if ($user->uid !== 0) {

	  $my_mural_nodes = themuraly_mural_list($user->uid);
// 	  dpm($my_mural_nodes);
// 		arsort($my_mural_nodes);

		$i = 0;
		foreach ($my_mural_nodes as $node) {

			if ($i < $limit) {
				$mural_item['items'][$i]['data'] = l($node->title,
					'mural/' . $node->nid,
					array(
						'attributes' => array(
							'id' => 'media-node-' . $node->nid,
						)
					)
				);
				$mural_item['items'][$i]['class'][] = 'media-item';
				$i++;
			}

		}

		if (count($mural_item['items']) > 0) {

			$html .= '<h4 class="has-child">Mural<em></em></h4>';

			$mural_item['title'] = '';
			$mural_item['type'] = 'ul';
			$mural_item['attributes'] = array('id' => 'mural-list', 'class' => 'media-video');

			$media_html = theme_item_list($mural_item);
		}

		//dd($media_html, 'media list');

		$html .= $media_html;

	}

	if(count($my_mural_nodes) <= 0) {
		$html .= '<h4 class="has-child">Mural</h4>';
	}

	$html .= '</div>';

	return $html;

}

/**
 * Ajax link callback;
 * @param unknown_type $page_callback_result
 */
function themuraly_mural_ajax_callback($page_callback_result) {

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

	// Only render content
	print $page_callback_result;
	// Perform end-of-request tasks.
	drupal_page_footer();
}

/**
 * @param string $url
 *   - Mural url.
 */
function themuraly_get_mural_info($mural_url = '') {

  $mural_info = array();

  if ($mural_url) {

    $mural_url_info = parse_url($mural_url);
    $mural_info = explode('/' , $mural_url_info['fragment']);
    $mural_username = $mural_info[1];
    $mural_id = $mural_info[2];


    if ($mural_id) {

      $the_nodes = _get_node_from_mural_id($mural_id);

      if ($the_nodes) {

        foreach ($the_nodes AS $the_node) {
//           dpm('<pre>' . print_r($the_node, TRUE) . '</pre>');
          $field_mural_username = field_get_items('node', $the_node, 'field_muraluser');
          $mural_username = $field_mural_username && count($field_mural_username) > 0 ? $field_mural_username[0]['value'] : '';

          $field_mural_thumburl = field_get_items('node', $the_node, 'field_mural_thumburl');
//           dpm('$field_mural_thumburl: <pre>' . print_r($field_mural_thumburl, TRUE) . '</pre>');
          $mural_mural_thumburl = $field_mural_thumburl && count($field_mural_thumburl) > 0 ? $field_mural_thumburl[0]['value'] : '';
//           dpm('$mural_mural_thumburl: <pre>' . print_r($mural_mural_thumburl, TRUE) . '</pre>');

          $mural_info['id'] = 'edgemakers.' . $mural_id;
          $mural_info['title'] = $the_node->title;
          $mural_info['lastUpdatedBy'] = $mural_username;
          $mural_info['thumbUrl'] = empty($mural_mural_thumburl)?'':$mural_mural_thumburl;

          return $mural_info;
        }
      }

   }

   return false;

  }

  return false;

}

function _get_node_from_mural_id($mid) {

  if ($mid) {
    $nodeQuery = new EntityFieldQuery;

    $entities = $nodeQuery->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'murals')
    ->fieldCondition('field_muralid','value', $mid, '=')
    ->execute();

    if (!empty($entities['node'])) {
      $news_items_nids = array_keys($entities['node']);
      $news_items = entity_load('node', $news_items_nids);
//       dpm($news_items);
      return $news_items;
    }

  }
  return '';
}

/**
 * Update murals node when set submit.
 * @param unknown_type $mural_url
 */
function themuraly_update_node_by_mural($mural_url = ''){

  $mural_info = array();

  if ($mural_url) {

    $mural_url_info = parse_url($mural_url);
    $mural_info = explode('/' , $mural_url_info['fragment']);
    $mural_id = $mural_info[2];

    if ($mural_id) {
      $the_nodes = _get_node_from_mural_id($mural_id);
    }

    if (is_array($the_nodes)) {

//       dpm($the_nodes);

      foreach ($the_nodes AS $the_node) {

        $field_muraluser = field_get_items('node', $the_node, 'field_muraluser');

        if ($field_muraluser) {

//           dpm($field_muraluser);
//           dpm($mural_id);

          $muralusername = $field_muraluser[0]['value'];
          $mural_api = new Muralapi;
          $result = $mural_api->retrieve_a_mural($muralusername, $mural_id);
          $data = $result->data;
          $the_mural = drupal_json_decode($data);

//           dpm($the_mural['id']);

          if ($the_mural['id']) {
            $the_node->field_mural_thumburl['und'][0]['value'] = $the_mural['thumbUrl'];
            $mural_memebers = array_keys($the_mural['members']);
            $the_node->field_mural_members['und'][0]['value'] = serialize(field_muraluser);

            $submit_status = node_submit($the_node);
            $save_status = node_save($the_node);
          }

        }

      }
    }
  }

  return $mural_info;

}

/**
 * Custome search by search module, but not hook_search_execute().
 * Configuration the search weight for it.
 */
function _themuraly_search_execute_result($keys = '', $page = 0) {

  $pager = 5;
  $start = $page * $pager;

//   dpm('Start: ' . $start . ' | Pager: ' . $pager . ' | Keyword: ' . $keys);

  if ($keys) {

    $query = db_select('search_index', 'i')
      ->condition('i.type', 'node')                      //Search node.
      ->condition('i.word', '%' . $keys . '%', 'LIKE');  //Search key

    // distinct sid.
    $query->AddExpression('distinct sid', 'sid_node');

    $query->range($start, $pager);

    $query->join('node', 'n', 'n.nid = i.sid');
    $query->condition('n.type', 'murals');
    $query->condition('n.status', 1);

    $query->orderBy('n.title', 'ASC');//ORDER BY title
    $query->orderBy('i.sid', 'DESC');//ORDER BY title
    $query->orderBy('n.nid', 'DESC');//ORDER BY created

    // Join  field_tags table and term table.
    $query->leftJoin('field_data_field_tags','field_tags','n.nid = field_tags.entity_id');
    $query->leftJoin('taxonomy_term_data','term','field_tags.field_tags_tid = term.tid');
    // Order by tags by term ASC.
    $query->orderBy('term.name', 'ASC');//ORDER BY created
//     dpm($query);

    $find = $query->execute();
//     dpm($find);

    $results = array();

    foreach ($find as $item) {
      // Render the node.
      $node = node_load($item->sid_node);
      $results[] = $node;
    }

//     dpm($results);
    return $results;

  }

  return false;

}