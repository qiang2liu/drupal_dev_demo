<?php

function themuraly_menu() {
  // mural webhook
  $items['callback/muralwebhook'] = array(
    'title' => t('muralwebhook'),
    'type' => MENU_CALLBACK,
    'description' => t('mural webhook'),
    'page callback' => 'muralwebhook',
    'access callback' => TRUE,
    'file' => 'mural_op.inc',
  );
  // Admin config.
  $items['admin/config/system/ftesettings/mural-mail'] = array(
    'title' => t('Confirmation email configuration'),
    'description' => t('Confirmation email configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('themuraly_mail_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'themuraly_admin.inc.php',
  );

  $items['mural/create'] = array(
    'page callback' => 'themuraly_mural_page',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2, 3, 4),
    'file' => 'mural_op.inc',
  );

  $items['mural/topic/create'] = array(
    'page callback' => 'themuraly_topic_mural_create',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'file' => 'mural_op.inc',
  );

  $items['mural/share/%'] = array(
    'page callback' => 'muralshow_share',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  /*
    $items['mural/create/%'] = array(
    'page callback' => 'themuraly_mural_page',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
    );
   */
  $items['mural/%'] = array(
    'page callback' => 'muralshow',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
//     'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  $items['mural/emailsearch/autocomplete'] = array(
    'page callback' => '_mural_email_search_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  $items['mural/usersearch/autocomplete'] = array(
    'page callback' => '_mural_usersearch_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'mural_op.inc',
  );
  $items['muraltest'] = array(
    'page callback' => 'muralapi_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mural/delete'] = array(
    'page callback' => 'mural_delete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'file' => 'mural_op.inc',
  );

  $items['mural/get/list/ajax'] = array(
    'page callback' => 'themuraly_mural_list_html', // Render HTML
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'themuraly_mural_ajax_callback', // Magic goes here
//  		'page arguments' => array(5),
  );

  $items['mural/studio/get/list/ajax/%'] = array(
    'page callback' => 'themuraly_studio_mural_list_html', // Render HTML
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'themuraly_mural_ajax_callback', // Magic goes here
    'page arguments' => array(5, 6),
  );

  $items['mural/studio/list/page/ajax/%'] = array(
    'page callback' => 'themuraly_studio_mural_list_json', // Render HTML
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'themuraly_mural_ajax_callback', // Magic goes here
    'page arguments' => array(5, 6, 7, 8),
  );

//   $items['mural/studio/list/page/ajax/%'] = array(
//     'page callback' => 'themuraly_studio_mural_list_json',
//     'page arguments' => array(5, 6),
//     'access arguments' => array('access content'),
//     'type' => MENU_CALLBACK,
//     'delivery callback' => 'themuraly_mural_ajax_callback',  // Magic goes here
//   );
  // @link http://deeson-online.co.uk/labs/advanced-ctools-run-ctools-javascript-call-any-time
  $items['mural/%ctools_js/refresh-elements'] = array(
    'title' => 'AJAX callback - refresh the elements on the page',
    'page callback' => 'themuraly_refresh',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

//   $items['mural/invite/share'] = array(
//     'title' => 'Invite share mural',
//     'page callback' => 'themuraly_invite_share',
//     'page arguments' => array(3, 4, 5, 6, 7),
//     'access arguments' => array('access content'),
//     'type' => MENU_CALLBACK,
//   );
//   $items['mural/invite/%/%/%'] = array(
//     'title' => 'Reset password',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('themuraly_invite_share_form', 3, 4, 5, 'login', 6, 7, 8),
//     'access callback' => TRUE,
//     'type' => MENU_CALLBACK,
//   );

  $items['mural/invite/%/%/%'] = array(
    'title' => 'Reset password in themuraly.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('themuraly_invite_share_form', 2, 3, 4, 'login'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mural/ajax_link_callback'] = array();
  return $items;
}

function themuraly_invite_share_form($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL, $nid = '', $mid = '') {
// function themuraly_invite_share_form($p, $uid, $timestamp, $hashed_pass) {

  watchdog('Invitie Share', '$p in themuraly_invite_share_form = ' . print_r($p, TRUE) . '</pre>');

  global $user;

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      _user_update_invite($uid, $nid, $mid);
//       drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
    }
    // A different user is already logged in on the computer.
    else {
      // Logout current user.
      module_invoke_all('user_logout', $user);
      // Destroy the current session, and reset $user to the anonymous user.
      session_destroy();

      $mural_url = url("mural/invite/$uid/$timestamp/" . $hashed_pass . '/' . $nid . '/' . $mid, array('absolute' => TRUE));
      watchdog('Invite Share', "session_destroy(), URL: " . $mural_url);

      drupal_goto($mural_url);

//       print("session_destroy");
//       $reset_link_account = user_load($uid);
//       if (!empty($reset_link_account)) {
//         drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
//           array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
//       } else {
//         // Invalid one-time link specifies an unknown user.
//         drupal_set_message(t('The one-time login link you clicked is invalid.'));
//       }
    }
//     drupal_goto();
  } else {
    // Time out, in seconds, until login URL expires. Defaults to 24 hours =
    // 86400 seconds.
    $timeout = variable_get('user_password_reset_timeout', 86400);
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('/home');
      } elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
//         $action = 'login';
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          // Set the new user.
          $user = $account;
          // user_login_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_login_finalize();
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));
          // Let the user's password be changed without the current password check.
          $token = drupal_hash_base64(drupal_random_bytes(55));
          $_SESSION['pass_reset_' . $user->uid] = $token;
          _user_update_invite($uid, $nid, $mid);
//           drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
        } else {
          $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
          $form['actions'] = array('#type' => 'actions');
          $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("mural/invite/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      } else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('/home');
      }
    } else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}

function themuraly_refresh($js = FALSE) {

  if (!$js) {
    // this is js only
    return;
  }

  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  $commands = array();
  $commands[] = ajax_command_html('.some-class', 'some-value');
  ajax_render($commands);
}

function themuraly_block_info() {
  $blocks['studio_list'] = array(
    'info' => t('Studio list'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['mural_link'] = array(
    'info' => t('mural link'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['mural_list'] = array(
    'info' => t('Mural List'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['gallery_mural_list'] = array(
    'info' => t('Mural list on gallery'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['topic_mural_list'] = array(
    'info' => t('Mural list on topic'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view();
 */
function themuraly_block_view($delta = '') {

  global $user;

  switch ($delta) {
    case 'studio_list':

      if ($user->uid == 0) {
        $mural_link = 'modal_forms/nojs/login';
        $link_class = array('ctools-use-modal', 'ctools-modal-modal-popup-small');
        $login_link = l(t('My studio'), $mural_link, array(
          'attributes' => array(
            'class' => $link_class,
          )
                )
        );

        $block['subject'] = t('');
        $block['content'] = $login_link . t('Login to your studio.');
      } else {

        $block['subject'] = t('studio');

        module_load_include('inc', 'themuraly', 'mural_op');

        // get user's mural name and room id
        $account = user_load($user->uid);
        $the_field_obj = field_get_items('user', $account, 'field_muralusername');
        $the_user_muralusername = $the_field_obj[0]['value'];
        $the_field_obj = field_get_items('user', $account, 'field_muralroomid');
        $the_user_roomid = $the_field_obj[0]['value'];

        $block['content'] = '<div id="studio-panes-mural-list">
                              <h2 class="item-studio">Studio</h2>
                              <div class="pane-studio-box my-idea item-studio" id="studio-my-idea">
                              ';
        if ($user->uid) {
          $block['content'] .= '<h4>my Ideas</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="studio-mural-list">';
//           $block['content'] .= themuraly_studio_mural_list_html();
          $block['content'] .= '</ul>
                              </div>';
        }

        $block['content'] .= '</div>';

        $block['content'] .= '<div class="pane-studio-box ideas-shared-with-me item-studio" id="studio-share-with-me">';

        if ($user->uid) {
          $block['content'] .= '<h4>Ideas Shared with me</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="studio-mural-share-with-me-list"></ul>
                              </div>';
        }

        $block['content'] .= '</div>';

        $block['content'] .= '</div>';
      }

//       if (1==1 || !empty($the_user_muralusername)) {
//         $block['content'] = get_myideas_shareideas($user->uid, $the_user_muralusername,  $the_user_roomid);
//       }
//         $block['content'] = get_myideas_shareideas($user->uid, $the_user_muralusername, $the_user_roomid);
      break;
    case 'mural_link':

      $block['subject'] = 'mural link';
      $html = '<div class="toolbar-item add-an-idea" class="hidden"><h4>';

      if ($user->uid) {
        $mural_link = 'mural/create';
        $link_class = array('create-mural');
      } else {
        $mural_link = 'modal_forms/nojs/login';
        $link_class = array('ctools-use-modal', 'ctools-modal-modal-popup-small');
      }

      $links = l(t('Create Mural'), $mural_link, array(
        'attributes' => array(
          'class' => $link_class,
          'onClick' => 'nofresh = 1',
        )
              )
      );

      $html .= '<h4>' . $links . '</h4></div>';

      $block['content'] = $html;
      break;
    case 'mural_list':
      $block['subject'] = t('Mural List');
      $block['content'] = '<div id="my-mural-list" class="toolbar-item mural"></div>';
      break;

    case 'gallery_mural_list':
      $block['subject'] = t('Mural list on gallery');

      $block['content'] = '<div id="gallery-panes-mural-list">
                              <h2 class="item-studio">Gallery</h2>
          <div id="gallery-search-form">
            <input type="text" id="gallery-keyword" name="gallery-keyword" />
            <input type="button" id="gallery-search" value="' . t('Search') . '" />
          </div>
          <div>
            <span>Sort by: Alphabetical, Date, Tags</span>
          </div>
                              <div class="pane-studio-box ideas item-gallery" id="gallery-ideas">
                              ';
      if ($user->uid) {
        $block['content'] .= '<h4>Ideas</h4>
                              <div class="scroll-wrapper">
                                <div class="arrow-left" pager="0"> < </div>
                                <div class="arrow-right" pager="1"> > </div>
                                <ul id="gallery-mural-list"></ul>
                              </div>';
      }

      $block['content'] .= '
                              </div>';

      $block['content'] .= '</div>';

      break;
    case 'topic_mural_list':
      $block['subject'] = 'Mural list on topic';
      if ($node = menu_get_object()) {
        $block['content'] = '<div class="project-title"><h3>Projects</h3><p>' . t('Can you help these EdgeMakers with their projects?') . '</p></div>';
//         print('Node get from menu');
        $block['content'] .= '<div id="murals-topic-' . $node->nid . '" class="project-con">';
        $murals_html = themuraly_topic_mural_list($node->nid);
        $block['content'] .= $murals_html;
        $block['content'] .= '</div>';
      } else {
        $block['content'] = t('');
      }
      break;
  }
  return $block;
}

function _get_my_murals() {
  global $user;
  if ($user->uid) {

  }
}

function themuraly_theme($existing, $type) {
  return array(
    'muralypage' => array(
      'variables' => array('data' => NULL),
      'template' => 'templates/muralypage',
    ),
    'studio_ideas_list' => array(
      'variables' => array('myideas' => array(), 'myshareideas' => array()),
      'template' => 'templates/studioideas',
    ),
    'mural_item_box' => array(
      'variables' => array('node' => NULL, 'attributes' => array()),
    ),
//     theme_mural_item_box
  );
}

/**
 * @link https://drupal.org/node/381458#comment-6699162
 * @param array $element
 */
function themuraly_location_element_alter(&$element) {
//   unset($element['delete_location']);
  $element['city']['#attributes']['placeholder'] = t('City');
}

function _create_tmp_js($content) {
  $tmp_dir = file_directory_temp();
  $tmp_file_name = $tmp_dir . '/upclass_ctools_class_' . round(microtime(true) * 1000) . '.js';
// print($tmp_file_name);
  $fh = fopen($tmp_file_name, 'w') or die("can't open file");
  fwrite($fh, $content);
  fclose($fh);
  return $tmp_file_name;
}

/**
 * Implement hook_after_build();
 */
function themuraly_after_build($form, $form_state) {
//   dpm($form);
//   dpm($form_state);
//   watchdog('Debug Lugal', '<pre>' . print_r($form_state, TRUE) . '</pre>');

  if (isset($form_state['values']['field_muralshared'][LANGUAGE_NONE])) {
//     drupal_set_message('<pre>' . print_r($form_state['values']['field_muralshared'], TRUE) . '</pre>');
    if ($form_state['values']['field_muralshared'][LANGUAGE_NONE] == 1) {
      $is_shared = 1;
    } else {
      $is_shared = 0;
    }
  }

  if (($form_state['node']->field_muralshared['und']['0']['value'] == 1)
          OR (isset($is_shared) && $is_shared == 1)
  ) {
    $share_mail_class = '';
  } else {
    $share_mail_class = 'hidden';
  }
  $form['field_mail_to_share'][LANGUAGE_NONE]['#prefix'] = '<div id="invite_email_box" class="' . $share_mail_class . '">';
  // First I re-attach the original submit handler to the form
//   $form['buttons']['submit']['#submit'] = array('node_form_submit');
//   drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/removeTextareaResizea.js');
//   drupal_add_js('alert("muralsetting.");jQuery("#modalContent").addClass("mural-settings-form-class");', array('type'=>'inline'));
  // Create tmp js file and reload it.
  $script = 'jQuery("#modalContent").addClass("mural-settings-form-class");';

  $tmp_js = _create_tmp_js($script);

  drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/populatePopup.js',
    array(
      'type' => 'file',
      'scope' => 'footer',
    )
  );

  drupal_add_js($tmp_js);

  $form['tmp_js'] = array(
    '#type' => 'hidden',
    '#value' => $tmp_js,
    '#attributes' => array(
      'name' => 'temp_js_file',
    ),
  );


  // Change mural title on mural windows;
//   $form['#attributes']['onSubmit'] = 'changeTitleAfterSetting()';


  return $form;
}

/**
 * Implments hook_form_alter();
 */
function themuraly_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'murals_node_form') {

    $form['#after_build'][] = 'themuraly_after_build';

//     if (arg(0) == 'modal') {

    drupal_add_css(drupal_get_path('module', 'themuraly') . '/css/themuraly.css');


      $form['#prefix'] = '<div class="mural-setting-title"><h2>Mural Settings</h2><div class="mural-setting-form">

                            <div class="mural-setting-form-tran-back">&nbsp;</div>

                          </div>';
    $form['#surfix'] = '</div>';
    form_load_include($form_state, 'inc', 'node', 'node.pages');
    $the_nid = $form['nid']['#value'];
    unset($form['field_muralid']);
    unset($form['field_muraluser']);
    unset($form['field_mural_thumburl']);
    unset($form['field_muraltype']);
    unset($form['field_topic_mural']);

    $form['body']['und']['0']['value']['#attributes']['placeholder'] = t('Description');
    $form['body']['und']['0']['value']['#resizable'] = FALSE;

    // Dropdown select box style.
    $form['field_challenges_category'][LANGUAGE_NONE]['#options']['_none'] = t('Wicked Problem');
    $form['field_topic_mural'][LANGUAGE_NONE]['#options']['_none'] = t('Topic');

    $share_to_gallery_default_options = $form['field_share_to_gallery'][LANGUAGE_NONE]['#options'];

    //$share_to_gallery_options['_none'] = t('Share to Gallery');

    //foreach ($share_to_gallery_default_options AS $k => $v) {
    //  if ($k !== '_none') {
    //    $share_to_gallery_options[$k] = $v;
    //  }
    //}

    //$form['field_share_to_gallery'][LANGUAGE_NONE]['#options'] = $share_to_gallery_options;
//       drupal_set_message('Share to Gallery options: <pre>' . print_r(($share_to_gallery_options), TRUE) . '</pre>');
//       $form['field_share_to_gallery'][LANGUAGE_NONE]['#options']['_none'] = t('Share to Gallery');
//       $form['field_share_to_gallery'][LANGUAGE_NONE]['#attributes'] = array(
//         'size' => 2,
//       );
    //drupal_map_assoc($form['field_share_to_gallery'][LANGUAGE_NONE]['#options']);
    //$form['field_share_to_gallery'][LANGUAGE_NONE]['#order_by'] = 'text'; // May contain values as "text" or "value".
    //$form['field_share_to_gallery'][LANGUAGE_NONE]['#sort_order'] = 'asc'; // May contain values as "asc" or "desc".


    //$form['field_muralshared'][LANGUAGE_NONE]['#options']['_none'] = t('Privacy');
    $form['field_muralshared'][LANGUAGE_NONE]['#attributes'] = array(
//         'size' => 2,
      'onChange' => 'showInviteEmailBox()',
    );

//       $form['field_muralshared'][LANGUAGE_NONE] = array(
//         '#ajax' => array(
//             // When 'event' occurs, Drupal will perform an ajax request in the
//             // background. Usually the default value is sufficient (eg. change for
//             // select elements), but valid values include any jQuery event,
//             // most notably 'mousedown', 'blur', and 'submit'.
//             'event' => 'change',
//             'callback' => 'mymodule_ajax_callback',
//             'wrapper' => 'invite_email_box',
//         ),
//       );

    $form['field_mail_to_share'][LANGUAGE_NONE]['#suffix'] = '</div>';
    $form['field_mail_to_share'][LANGUAGE_NONE]['0']['value']['#autocomplete_path'] = 'mural/usersearch/autocomplete';
    $form['field_mail_to_share'][LANGUAGE_NONE]['0']['value']['#attributes'] = array('autocomplete' => 'on');
    $form['field_mail_to_share'][LANGUAGE_NONE]['0']['value']['#attributes']['placeholder'] = t('Invite people by user name');
//       , 'placeholder' => 'Enter email address');
//       $form['field_mail_to_share'][LANGUAGE_NONE]['0']['value']['#value'] = '';
//       $form['field_mail_to_share'][LANGUAGE_NONE]['0']['value']['#attributes']['placeholder'] = t('Description');
//       $form['actions']['submit']['#attributes'] = array(
//         'onClick' => 'changeTitleAfterSetting(this.val);return false;'
//       );

    if ($the_nid) {  //edit form
      unset($form['actions']['delete']);

//         $form['field_mail_to_share']['#autocomplete_path'] = 'mural/emailsearch/autocomplete';
//         $form['field_mail_to_share']['#attributes'] = array('autocomplete' => 'on');

      $form['field_city']['und']['0']['#title'] = '';

      $form['field_city']['city']['und']['#title'] = 'Location info city title.';
//         $form['field_city']['und']['0']['#after_build'] = array('_add_placeholder');
//         $form['field_city']['city']['#attributes']['placeholder'] = T('City Name');

      $form['field_city'][LANGUAGE_NONE]['0']['#attributes']['placeholder'] = t('City');
      $form['field_tags'][LANGUAGE_NONE]['#attributes']['placeholder'] = T('TAGS');

//         $form['mural_addmember_ajax_link'] = array(
//           '#type' => 'button',
//           '#value' => t('invite'),
//           // Note the /nojs portion of the href - if javascript is enabled,
//           // this part will be stripped from the path before it is called.
//           '#id' => 'ajax_link',
//           '#ajax' => array(
//             'wrapper' => 'mural_member_list',
//             'callback' => 'mural_addmember_ajax_callback',
//             'method' => 'html',
//           ),
//           '#prefix' => '<div class="mural_member_area">',
//         );
//         $form['field_mail_to_share'] = array(
//           '#type' => 'textfield',
//           '#title' => t('user'),
//           '#maxlength' => 255,
//           '#required' => FALSE,
//           '#autocomplete_path' => 'mural/emailsearch/autocomplete',
//         	'#attributes' => array('autocomplete' => 'on'),
//         );

//       array_unshift($form['#validate'], '_themuralyajax_validate');
      array_unshift($form['#submit'], '_themuralyajax_submit');

      foreach ($form['#validate'] AS $key=>$val) {
        if ($val == 'node_form_validate') {
          unset($form['#validate'][$key]);
        }
      }

      $form['#validate'][] = '_node_harck_validate';
      $form['#validate'][] = '_themuralyajax_validate';

      watchdog('Debug', 'Form validate: <pre>' . print_r($form['#validate'], TRUE) . '</pre>');

      $hash = md5(microtime());
      $form['#attached']['js'] = array(
//         drupal_get_path('module', 'themuraly') . '/js/removeTextareaResizea.js' => array(
//           'cache' => FALSE,
//           'preprocess' => TRUE,
//         ),
        drupal_get_path('module', 'themuraly') . '/js/populatePopup.js',
      );
//         drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/removeTextareaResizea.js');
//         $form['#attached']['js'][] = array(
//           'data' => array('showInviteEmailBox()'),
//           'type' => 'inline',
//         );
//         $form['mural_member_area'] = array(
//           '#markup' => '<div id="mural_member_list"> ' . _mural_member_list($the_nid) . ' </div>',
//           '#suffix' => '</div>',
//         );
    }
//     }
  }
}

function _mural_member_list($the_nid, $para_muralid = '') {

  global $user;
  $ret = array();
  if ($para_muralid == '') {
    // get muralid
    $the_mural = node_load($the_nid);
    if (isset($the_mural->nid)) {
      $muralid_obj = field_get_items('node', $the_mural, 'field_muralid');
      if (!empty($muralid_obj[0]['value'])) {
        $the_muralid = $muralid_obj[0]['value'];
        $str_p = preg_match("/[0-9]+$/", $the_muralid, $matches);
        if ($str_p) {
          $the_muralid = $matches[0];
        }
      }
    }
  } else {
    $the_muralid = $para_muralid;
  }

  if (!empty($the_muralid)) {
    if ($user->uid > 0) {
      $account = user_load($user->uid);
      if (!empty($account->field_muralusername)) {
        $fieldinfo = field_get_items('user', $account, 'field_muralusername');
        if ($fieldinfo) {
          $muralusername = $fieldinfo[0]['value'];

          if (!empty($muralusername)) {
            //call api , get member
            $mural_api = new Muralapi;
            $mural_api_result = $mural_api->retrieve_a_mural($muralusername, $the_muralid);
            if (is_object($mural_api_result) && isset($mural_api_result->data)) {
              $muralapi_response_obj = drupal_json_decode($mural_api_result->data);
              if (!empty($muralapi_response_obj['members']) && is_array($muralapi_response_obj['members'])) {
                $the_muralusers = array_keys($muralapi_response_obj['members']);
              }

              if (!empty($the_muralusers)) {
                // get user's picture
                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', 'user')
                        ->entityCondition('bundle', 'user')
                        ->fieldCondition('field_muralusername', 'value', $the_muralusers, 'in');
                $results = $query->execute();

                if (!empty($results) && !empty($results['user'])) {
                  $the_uids = array_keys($results['user']);
                  if (!empty($the_uids)) {
                    $users_array = user_load_multiple($the_uids);

                    $avatarUris = explode('/', variable_get('user_picture_default', ''));
                    $avatarUri_default = file_build_uri(array_pop($avatarUris));
                    foreach ($users_array as $k => $u) {
                      if ($u->picture) {

                        $avatarUri = $u->picture->uri;
                      } else {
                        $avatarUri = $avatarUri_default;
                      }
                      $userpic = theme('image_style', array('style_name' => 'edgemakers_avatar', 'path' => $avatarUri, 'alt' => $u->name, 'title' => $u->name,));
                      if (user_access('access user profiles')) {
                        //$userpic = l($userpic, 'user/' . $u->uid, array('html' => TRUE));
                      }
                      $ret[]['data'] = $userpic;

                      //Add share nid for each invite user
                      if ($u->uid <> $user->uid) {
                        $field_mural_share_with_me = field_get_items('user', $u, 'field_mural_share_with_me');
                        if ($field_mural_share_with_me) {
                          $mural_share_with_me = $field_mural_share_with_me[0]['value'];
                        }

                        if ($mural_share_with_me) {
                          $share_with_me = explode(',', $mural_share_with_me);
                        } else {
                          $share_with_me = array();
                        }

                        $share_with_me[] = $the_nid;
                        $mural_share_with_me_val = implode(',', array_unique($share_with_me));


                        $new_account->uid = $u->uid;
                        $new_account->field_mural_share_with_me['und'][0]['value'] = $mural_share_with_me_val;
                        // save existing user
                        unset($new_account->pass);
                        $new_account = user_save((object) array('uid' => $new_account->uid), (array) $new_account);
                      }

//                       // edit field-data
//                       $u->field_mural_share_with_me['und'][0]['value'] = $mural_share_with_me_val;
//                       unset($u->pass);
//                       // save existing user
//                       $u = user_save((object) array('uid'=>$u->uid), (array) $u);
                      // End Add share id.
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }


  $ret = theme_item_list(array('items' => $ret, 'attributes' => array(), 'type' => 'ul',));

  return $ret;
}

//Add share nid for each invite user
function _update_user_share_with_me($account = array(), $nid = '') {

  global $user;

//   watchdog('Mural Share', 'Share to me '  . $nid . ' : update $account 817: <pre>' . print_r($account, TRUE) . '</pre> | node id: ' . $nid);

  if ($nid && $account) {

//     if ($account->uid <> $user->uid) {

    $field_mural_share_with_me = field_get_items('user', $account, 'field_mural_share_with_me');

    if ($field_mural_share_with_me) {
      $mural_share_with_me = $field_mural_share_with_me[0]['value'];
    }

    if ($mural_share_with_me) {
      $share_with_me = explode(',', $mural_share_with_me);
    } else {
      $share_with_me = array();
    }

    $share_with_me[] = $nid;

//       watchdog('Mural Share', 'Share to me update $mural_share_with_me: <pre>' . print_r($mural_share_with_me, TRUE) . '</pre> | node id: ' . $nid);

    $mural_share_with_me_val = implode(',', array_unique($share_with_me));

//       watchdog('Mural Share', 'Share to me update $$mural_share_with_me_val: <pre>' . print_r($mural_share_with_me_val, TRUE) . '</pre> | node id: ' . $nid);

    $new_account->uid = $account->uid;
    $new_account->field_mural_share_with_me['und'][0]['value'] = $mural_share_with_me_val;
    // save existing user
    unset($new_account->pass);
    $new_account = user_save((object) array('uid' => $new_account->uid), (array) $new_account);

    watchdog('Mural Share', 'Share to me update: <pre>' . print_r($new_account, TRUE) . '</pre> | node id: ' . $nid);

//     }
  }
}

function _node_harck_validate($form, &$form_state) {

  $node = (object) $form_state['values'];
//   node_validate($node, $form, $form_state);

//   $node = $form_state['node'];

//   if (isset($node->nid) && (node_last_changed($node->nid) > $node->changed)) {
//     form_set_error('changed', t('The content on this page has either been modified by another user, or you have already submitted modifications using this form. As a result, your changes cannot be saved.'));
//   }

  // Validate the "authored by" field.
  if (!empty($node->name) && !($account = user_load_by_name($node->name))) {
    // The use of empty() is mandatory in the context of usernames
    // as the empty string denotes the anonymous user. In case we
    // are dealing with an anonymous user we set the user ID to 0.
    form_set_error('name', t('The username %name does not exist.', array('%name' => $node->name)));
  }

  // Validate the "authored on" field.
  if (!empty($node->date) && strtotime($node->date) === FALSE) {
    form_set_error('date', t('You have to specify a valid date.'));
  }

  // Invoke hook_validate() for node type specific validation and
  // hook_node_validate() for miscellaneous validation needed by modules. Can't
  // use node_invoke() or module_invoke_all(), because $form_state must be
  // receivable by reference.
  $function = node_type_get_base($node) . '_validate';
  if (function_exists($function)) {
    $function($node, $form, $form_state);
  }
  foreach (module_implements('node_validate') as $module) {
    $function = $module . '_node_validate';
    $function($node, $form, $form_state);
  }

  entity_form_field_validate('node', $form, $form_state);

}

function _themuralyajax_validate($form, &$form_state) {

  global $user;

  form_load_include($form_state, 'inc', 'node', 'node.pages');

  watchdog('Debug', 'Node info: <pre>' . print_r($form_state['node'], TRUE) . '</pre>, Last changed: ' . date('Y-m-d H:i:s', $form_state['node']->changed));

  $lang = $form_state['values']['language'];

//   watchdog('Mural Settings', 'Formstate data: <pre>' . print_r($form_state, TRUE) . '</pre>');
  // Debug
//   dpm($form_state);
//   form_set_error($the_form_ele, t('can\'t update the mural properties.'));
  // End Debug;

  if ($form_state['triggering_element']['#type'] == 'submit') {
    $property_array = array();

    $title = check_plain($form_state['values']['title']);
    if (empty($title)) {
      return;
    }
    $property_array['title'] = $title;
//     $lang = $form_state['values']['language'];
    $muralshared = $form_state['values']['field_muralshared'][$lang][0]['value'];
    $property_array['shared'] = (bool) $muralshared;

    $share_to_gallery = $form_state['values']['field_share_to_gallery'][$lang][0]['value'];

    if (!$muralshared) {
      if ($share_to_gallery) {
        form_set_error('field_muralshared', t('Privacy must public while "Share to gallery"'));
      }
    }

//     form_set_error('field_muralshared', t('Must set public in privacy when you choice "Share to gallery"'));
    // invoked by submit button, not ajax button :'invite'
    $the_nid = $form_state['values']['nid'];
    // get muralid
    $the_muralid = '';
    $the_mural = node_load($the_nid);
    if (isset($the_mural->nid)) {
      $muralid_obj = field_get_items('node', $the_mural, 'field_muralid');
      if (!empty($muralid_obj[0]['value'])) {
        $the_muralid = $muralid_obj[0]['value'];
        $str_p = preg_match("/[0-9]+$/", $the_muralid, $matches);
        if ($str_p) {
          $the_muralid = $matches[0];
        }
      }
    }
    if (!empty($the_muralid)) {
      if ($user->uid > 0) {
        $account = user_load($user->uid);
        if (!empty($account->field_muralusername)) {
          $fieldinfo = field_get_items('user', $account, 'field_muralusername');
          if ($fieldinfo) {
            $muralusername = $fieldinfo[0]['value'];

            if (!empty($muralusername)) {


              foreach ($property_array as $k => $v) {
                $mural_api = new Muralapi;
                $property_name = $k;
                $property_value = $v;
                $result = $mural_api->update_mural_properties($muralusername, $the_muralid, $property_name, $property_value);

                if (is_object($result) && isset($result->data)) {
                  $data = $result->data;

                  if (!is_string($data) || strtoupper($data) != 'OK') {
                    $the_form_ele = $k;
                    if ($k == 'shared') {
                      $the_form_ele = 'field_muralshared';
                    }
//                     form_set_error($the_form_ele, t('can\'t update the mural properties.'));
                  }
                }
              }

              // Update the thumburl when update the node.
              $mural_api = new Muralapi;
              $result = $mural_api->retrieve_a_mural($muralusername, $the_muralid);
              $data = $result->data;
              $r = drupal_json_decode($data);
//               watchdog("Debug Mural API", '<pre>' . print_r($data, TRUE) . '</pre>');

              $form_state['values']['field_mural_thumburl'][$lang][0]['value'] = $r['thumbUrl'];

              // Sync memeber data from mural.
              $the_muralusers = '';
              if (is_object($result) && isset($result->data)) {
                $muralapi_response_obj = drupal_json_decode($result->data);
                if (!empty($muralapi_response_obj['members']) && is_array($muralapi_response_obj['members'])) {
                  $the_muralusers = array_keys($muralapi_response_obj['members']);
                }

                $form_state['values']['field_mural_members'][$lang][0]['value'] = serialize($the_muralusers);
              }
            }
          }
        }
      }
    }

    // Validation location info.
    $validate_city = $form_state['values']['field_city'][LANGUAGE_NONE][0]['city'];
    $validate_county = $form_state['values']['field_city'][LANGUAGE_NONE][0]['country'];

    if ($validate_city) {
      if (!_valid_location_address($validate_county, $validate_city)) {
        form_set_error('field_city', t('Invalid location'));
      }
    }

    // Validate mail.
    $mail_to_share = $form_state['values']['field_mail_to_share'][LANGUAGE_NONE][0]['value'];
// dpm($form_state);
    $form_state['values']['field_mail_to_share'][LANGUAGE_NONE][0]['value'] = '';
// dpm($mail_to_share);
    if ($mail_to_share && $muralshared) {
      if (_valid_local_user($mail_to_share)) {
        $account = user_load_by_name($mail_to_share);
        $send_email = $account->mail;

        // Invite user by log in node;
        $invite = array();
        $invite['ower']['uid'] = $user->uid;
        $invite['ower']['username'] = $user->name;
        $invite['invite_user']['uid'] = $account->uid;
        $invite['invite_user']['username'] = $account->name;
        $invite['nid'] = $the_nid;
        $invite_node = _create_new_invite($invite);

        $the_mural->invite_uid = $account->uid;
        $the_mural->invite_nid = $invite_node->nid;

        // Invite user by Mural API.
//         $fieldinfo = field_get_items('user', $account, 'field_muralusername');
//         if ($fieldinfo) {
//           $muraluser_invite = $fieldinfo[0]['value'];
//         }
//         $mural_api = new Muralapi;
//         $result = $mural_api->invite_user_mural($muralusername, $the_muralid, array($muraluser_invite));
        watchdog('Mural share', 'Invite API result:<pre>' . print_r($the_mural, TRUE) . '</pre>');
        // End invite.
        // Update account share with me.
//         _update_user_share_with_me($account, $the_nid);

        if (_send_share_mail($the_mural, $send_email)) {
          watchdog('Mural Share', $user->name . ' share mural to ' . $mail_to_share);
          $form_state['values']['field_mail_to_share'][LANGUAGE_NONE][0]['value'] = '';
        } else {
          watchdog('Mural Share', $user->name . ' share mural to ' . $mail_to_share . ', send mail fail');
          $form_state['values']['field_mail_to_share'][LANGUAGE_NONE][0]['value'] = '';
        }
//         form_set_error('field_mail_to_share', t('Invalid account in our system.'));
      } else {
        $form['field_mail_to_share'][LANGUAGE_NONE]['#prefix'] = '<div id="invite_email_box" class="">';
        form_set_error('field_mail_to_share', t('Invalid account'));
      }
    }

//     form_set_error('field_mail_to_share', t('Invalid account'));
  }
}

function themuraly_invite_share($uid = '', $nid = '', $mid = '', $timestamp = '', $hashed_pass = '') {

  watchdog('Invite Share', 'User uid: ' . $uid . '| Node nid: ' . $nid . ' | Timestamp: ' . $timestamp . ' | Hash password: ' . $hashed_pass);

  if ($uid == 1) {
    return FALSE;
  }

  _user_update_invite($uid, $nid, $mid);
  exit;

  global $user;

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    watchdog('Invite Share', "User already login");
    if ($user->uid !== $uid) {
      // Logout current user.
      module_invoke_all('user_logout', $user);
      // Destroy the current session, and reset $user to the anonymous user.
      session_destroy();

      watchdog('Invite Share', "session_destroy()");

      // Relogin by url uid, copy from function user_pass_reset() in user.pages.inc.
      $action = 'login';

      // Time out, in seconds, until login URL expires. Defaults to 24 hours =
      // 86400 seconds.
      $timeout = variable_get('user_password_reset_timeout', 86400);
      $current = REQUEST_TIME;
      // Some redundant checks for extra security ?
      $users = user_load_multiple(array($uid), array('status' => '1'));
      if ($timestamp <= $current && $account = reset($users)) {

        $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login);
        watchdog('Invite Share', "Reset user info: <pre>" . print_r($account, TRUE) . '</pre>  condition:' . $timestamp <= $current . ' | Hashed pass:' . $hashed_pass);

        // No time out for first time login.
        if ($account->login && $current - $timestamp > $timeout) {
          drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
//           drupal_goto('user/password');
        }
//         elseif ($account->uid && $timestamp <= $current && $hashed_pass) {
        elseif ($account->uid && $timestamp <= $current && $hashed_pass) {

          watchdog('Invite Share', "URL auto login hashed_pass: <pre>" . print_r($hashed_pass, TRUE) . '</pre>');

          // First stage is a confirmation form, then login
          if ($action == 'login') {
            // Set the new user.
            $user = $account;
            // user_login_finalize() also updates the login timestamp of the
            // user, which invalidates further use of the one-time login link.
            user_login_finalize();

            // Let the user's password be changed without the current password check.
            $token = drupal_hash_base64(drupal_random_bytes(55));
            $_SESSION['pass_invite_' . $user->uid] = $token;

            watchdog('Invite Share', 'URL auto login sucess . <pre>' . print_r($user, TRUE) . '</pre>');

            drupal_goto();

            return "HOME<pre>" . print_r($user, TRUE) . '</pre>';

            _user_update_invite($uid, $nid, $mid, $token);

//             drupal_goto('user/' . $user->uid, array('query' => array('pass-reset-token' => $token)));
          } else {
            $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
            $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
            $form['actions'] = array('#type' => 'actions');
            $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
            $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
            return $form;
          }
        }
      }

      watchdog('Invite Share', "URL user auto login info: <pre>" . print_r($user, TRUE) . '</pre>');
    }

    _user_update_invite($uid, $nid, $mid);
  } else {
    // Relogin by url uid, copy from function user_pass_reset() in user.pages.inc.
    $action = 'login';

    // Time out, in seconds, until login URL expires. Defaults to 24 hours =
    // 86400 seconds.
    $timeout = variable_get('user_password_reset_timeout', 86400);
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
//           drupal_goto('user/password');
      } elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {

        watchdog('Invite Share', "URL auto login hashed_pass: <pre>" . print_r($hashed_pass, TRUE) . '</pre>');

        // First stage is a confirmation form, then login
        if ($action == 'login') {
          // Set the new user.
          $user = $account;
          // user_login_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_login_finalize();

          // Let the user's password be changed without the current password check.
          $token = drupal_hash_base64(drupal_random_bytes(55));
          $_SESSION['pass_reset_' . $user->uid] = $token;

          watchdog('Invite Share', 'URL auto login sucess');

          _user_update_invite($uid, $nid, $mid, $token);

//             drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
        } else {
          $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
          $form['actions'] = array('#type' => 'actions');
          $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      }
    }
  }

//   _user_update_invite($uid, $nid, $mid);
}

function _get_topic_nid_by_tid($lang = '', $tid = '') {
  $topic_nid = '';
  if ($tid) {
    $term = taxonomy_term_load($tid);

    if (isset($term->field_challenge_topic[$lang]['0'])) {
      watchdog('Debug', 'Term info: <pre>' . print_r($term->field_challenge_topic[$lang]['0'], TRUE) . '</pre>');
      $topic_nid = $term->field_challenge_topic[$lang]['0']['target_id'];
    }
//     if ($term->)
  }
  return $topic_nid;
}

function _user_update_invite($uid, $nid, $mid) {

  watchdog('Invite Share', 'Current user: <pre>' . print_r($account, TRUE) . '</pre>');

  $share_node = node_load($nid);
  $share_node->field_invite_flag['und'][0]['value'] = 1;
  node_save($share_node);
//     print($nid . 'Invite node: <pre>' . print_r($share_node, TRUE) . '</pre>');
  $account = user_load($uid);
  _update_user_share_with_me($account, $mid);
  watchdog('Mural Share', $mid . ': _update_user_share_with_me result: <pre>' . print_r($account, TRUE) . '</pre>');

  $field_mural_share_with_me = field_get_items('user', $account, 'field_mural_share_with_me');

  if ($field_mural_share_with_me) {
    $mural_share_with_me = $field_mural_share_with_me[0]['value'];
  }

  // get mural info.
  $mural_info = node_load($mid);
  $field_muralid_info = field_get_items('node', $mural_info, 'field_muralid');
  if ($field_muralid_info) {
    $mural_id = $field_muralid_info[0]['value'];
  }

  $field_muralid_user = field_get_items('node', $mural_info, 'field_muraluser');
  if ($field_muralid_user) {
    $muralusername = $field_muralid_user[0]['value'];
  }

  //Ensure share mural is share property is TRUE.
  include_once('mural_op.inc');
  $mural_api = new Muralapi;
  $property_name = "shared";
  $property_value = (bool) 1;
  $result_share = $mural_api->update_mural_properties($muralusername, $mural_id, $property_name, $property_value);
  $data = $result_share->data;
  watchdog('Mural Share', 'Ensure share. <pre>' . print_r($data, TRUE) . '</pre>');

  //Ensure share mural is share property is TRUE.
  $fieldinfo = field_get_items('user', $account, 'field_muralusername');
  if ($fieldinfo) {
    $muraluser_invite = $fieldinfo[0]['value'];
  }
  $mural_api = new Muralapi;
  $result = $mural_api->invite_user_mural($muralusername, $mural_id, array($muraluser_invite));
  $data = $result_share->data;
  watchdog('Mural Share', 'Ensure member: <pre>' . print_r($data, TRUE) . '</pre>');

//   $fieldinfo = field_get_items('user', $account, 'field_muralusername');
//   if ($mural_info) {
//     $muralusername = $fieldinfo[0]['value'];
//   }

  watchdog('Invite Share', 'Share node info: <pre>' . print_r($share_node, TRUE) . '</pre>');

//   /mural/share/dev_student1/1379300425095#1379336277.381
  drupal_goto('home', array(
//     'fragment' => 'mural/share/'. $muralusername . '/' . $mural_id,
    'fragment' => 'mural/' . $mid,
//     'query' => array('pass-reset-token' => $token),
  ));
}

function _create_new_invite($invite = array()) {
  $newNode = (object) NULL;
  $newNode->type = 'mural_invite_info';
  $newNode->title = $invite['ower']['username'] . ' invite ' . $invite['invite_user']['username'];
  $newNode->created = strtotime("now");
  $newNode->changed = strtotime("now");
  $newNode->status = 1;
  $newNode->comment = 0;
  $newNode->promote = 0;
  $newNode->moderate = 0;
  $newNode->sticky = 0;
  $newNode->language = 'und';

  // Custom field.
  $newNode->uid = $invite['invite_user']['uid'];
  $newNode->field_mural_ower['und'][0]['value'] = $invite['ower']['uid'];
  $newNode->field_invite_user['und'][0]['value'] = $invite['invite_user']['uid'];
  $newNode->field_mural_nid['und'][0]['value'] = $invite['nid'];

  node_object_prepare($newNode);
  node_save($newNode);

  return $newNode;
}

function _valid_location_address($country = '', $city = '') {
  if ($country && $city) {
    $city = str_replace(' ', '+', $city);
    // $valite_url = 'http://maps.googleapis.com/maps/api/geocode/json?address=' . $city . ',' . $country . '&sensor=false';
    $valite_url = 'http://maps.googleapis.com/maps/api/geocode/json?address=' . $city . '&sensor=false';
    $location_info = drupal_http_request($valite_url);
    $location_val = drupal_json_decode($location_info->data);

    if ($location_val['status'] == 'OK') {
      return true;
    }
  }
  return false;
}

function _valid_local_user($user) {
  $ret = array();
  $query = db_select('users', 'u');
  $query->leftJoin('field_data_field_muralusername', 'f', '(u.uid = f.entity_id and f.bundle = :p)', array(':p' => 'user'));
  $query->fields('u', array('uid', 'name'))
          ->isNotNull(field_muralusername_value)
          ->condition('u.name', $user, '=');
  $result = $query->execute();
  foreach ($result as $row) {
    $ret[] = check_plain($row->uid);
  }
// dpm($ret);
  if (count($ret) >= 1) {
    return true;
  }

  return false;
}

function _valid_local_email($mail) {
  $ret = array();
  $query = db_select('users', 'u');
  $query->leftJoin('field_data_field_muralusername', 'f', '(u.uid = f.entity_id and f.bundle = :p)', array(':p' => 'user'));
  $query->fields('u', array('uid', 'name'))
          ->isNotNull(field_muralusername_value)
          ->condition('u.mail', $mail, '=');
  $result = $query->execute();
  foreach ($result as $row) {
    $ret[] = check_plain($row->uid);
  }

  if (count($ret) >= 1) {
    return true;
  }

  return false;
}

function _send_share_mail($node = array(), $mail_to_share = '') {

  $timestamp = time();
  $account = user_load($node->invite_uid);
  $haspasswd = user_pass_rehash($account->pass, $timestamp, $account->login);

//   user_pass_reset_url($account);

  $reset_url = url("user/reset/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
  $mural_url = url("mural/invite/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login) . '/' . $node->invite_nid . '/' . $node->nid, array('absolute' => TRUE));

  $default_subject = <<<EOT
[current-user:field_firstname] [current-user:field-lastname] shared a mural with you
EOT;

  $default_body = <<<EOT
Hi,<br/>
<br/>
[current-user:field_firstname] [current-user:field-lastname] shared a mural with you:<br/>
<br/>
If you agree with the invitation, please click <a href="$mural_url">$mural_url</a> to open the mural.<br/>
<br/>
<br/>
--  [site:name] team
EOT;

  global $language;
  $status = false;

  if ($mail_to_share) {
    $subject = variable_get('share_mural_mail_subject', $default_subject);
    $mail_body = variable_get('share_mural_mail_body', $default_body);

    $subject = $default_subject;
    $mail_body['value'] = $default_body;

//     _user_mail_text('register_admin_created_body', NULL, array(), FALSE)
//     $text = t($mail_body['value'], array(), array('langcode' => $langcode));
//     $output = token_replace($input, array('node' => $node), array('language' => $language));
    $m_subject = token_replace($subject, array('node' => $node), array('language' => $language));
    $m_body = token_replace($default_body, array('node' => $node), array('language' => $language));
//     $mbody = token_replace($text, array('node' => $node), array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));

    watchdog('Mural share', 'Body replace token is: ' . $default_body);

    $m->from = variable_get('themuraly_mail_sender', 'no-reply@trueresults.com');
    $m->return = variable_get('themuraly_mail_return', 'no-reply@trueresults.com');
    $m->to = $mail_to_share;
    $m->subject = $m_subject;
    $m->body = $m_body;
//     $m->attachment = $job->attachment;
    // Drupal_set_message('Mail cattachment:<pre>' . print_r($m->attachment, TRUE) . '</pre>');
    // Drupal_mail in drupao core.
    $status = themuraly_drupalsendmail($m);

    //$status = mail($mail_to_share, 'test mail from local', 'Mail body, and it\'s a test mail.');
  }

  return $status;
}

function _themuralyajax_submit($form, &$form_state) {

  $lang = $form_state['values']['language'];

  watchdog('Debug', 'Form state info:<pre>' . print_r($form_state, TRUE) . '</pre>');

  form_load_include($form_state, 'inc', 'node', 'node.pages');

  if (form_get_errors()) {
    return $form;
  }

  watchdog('Debug', 'Form state info:<pre>' . print_r($form_state, TRUE) . '</pre>');

  // Save node.
  $save_node = $form_state['node'];
  watchdog('Debug', 'Save node: <pre>' . print_r($save_node, TRUE) . '</pre>');

  // Get topic node nid from category.
  if (isset($form_state['values']['field_challenges_category'])) {
    if ($form_state['values']['field_challenges_category'][$lang]['0']['tid']) {
      $topic_nid = _get_topic_nid_by_tid($lang, $form_state['values']['field_challenges_category'][$lang]['0']['tid']);
      $save_node->field_topic_mural[$lang]['0']['target_id'] = ($topic_nid) ? $topic_nid : '';
    }
    watchdog('Debug', $lang . ' | topic nid: ' . $topic_nid .' | Get category: <pre>' . print_r($form_state['values'], TRUE) . '</pre>');
//     form_set_error('field_challenges_category', t('Update topic by category.'));
  }

  entity_form_submit_build_entity('node', $save_node, $form, $form_state);
  node_submit($save_node);
  node_save($save_node);
  // Remove tmp js file.
  watchdog('Debug', 'Remove tmp js: <pre>' . print_r($form_state['complete form']['tmp_js'], TRUE) . '</pre>');
  if ($form_state['complete form']['tmp_js']) {
    $tmp_js_path = $form_state['complete form']['tmp_js']['#value'];
//     watchdog('Debug', 'Remove tmp js: <pre>' . print_r($tmp_js_path, TRUE) . '</pre>');
    @unlink($tmp_js_path);
  }

  ctools_include('modal');
  ctools_include('ajax');

  $commands = array();

  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();

  ctools_add_js('refreshElements', 'themuraly');

//   ctools_add_js('ctools-ajax-upload-media', 'edgemakers_media_upload');

  print ajax_render($commands);
  exit;
}

function mural_addmember_ajax_callback($form, $form_state) {
  global $user;
  $the_nid = $form_state['values']['nid'];
  $the_muralid = '';
  $the_mural = node_load($the_nid);
  if (isset($the_mural->nid)) {
    $muralid_obj = field_get_items('node', $the_mural, 'field_muralid');
    if (!empty($muralid_obj[0]['value'])) {
      $the_muralid = $muralid_obj[0]['value'];
      $str_p = preg_match("/[0-9]+$/", $the_muralid, $matches);
      if ($str_p) {
        $the_muralid = $matches[0];
      }
    }
  }
  if (!empty($the_muralid)) {

    $member_username = $form_state['values']['mural_member_search'];
    $muraluser_invite = check_plain($member_username);

    if ($user->uid > 0 && !empty($muraluser_invite)) {
      $account = user_load($user->uid);
      if (!empty($account->field_muralusername)) {
        $fieldinfo = field_get_items('user', $account, 'field_muralusername');
        if ($fieldinfo) {
          $muralusername = $fieldinfo[0]['value'];

          if (!empty($muralusername)) {
            $mural_api = new Muralapi;
            $result = $mural_api->invite_user_mural($muralusername, $the_muralid, array($muraluser_invite));
          }
        }

        /////////////////////////
      }
    }
  }

  return _mural_member_list($the_nid, $the_muralid);
}

function muralapi_create_room($mural_api, $muralusername, $title, $account) {
  $mural_api_result = $mural_api->create_room($muralusername, $title);
  if (is_object($mural_api_result) && isset($mural_api_result->data)) {
    $muralapi_response_obj = drupal_json_decode($mural_api_result->data);
    if (!empty($muralapi_response_obj['id'])) {
      $edit['field_muralroomid'][LANGUAGE_NONE][0]['value'] = $muralapi_response_obj['id'];
      user_save($account, $edit);
      return $muralapi_response_obj['id'];
    }
  }
  return '';
}

function muralapi_test() {

  global $user;

  print('Test: <pre>' . print_r($user, TRUE) . '</pre>');
//   dpm($user);

  $output_html = '';

//   include_once('mural_op.inc');
//   muralshow_share('lwgmural', '1376967210186');
//   themuraly_get_mural_info('http://staging.mural.ly/!/#/lwgmural/1377006043205');
//   _get_node_from_mural_id('1377006043205');
//   themuraly_studio_mural_list_json('gallery', 1, 'Copy of');
//  themuraly_topic_mural_list(539);
//   _test_mural_list_for_a_user();
 // _test_user_add();
 _test_change_profile();
  //_test_change_password();
  //_test_create_room();
//   _test_mural_create_mural();
  //_test_mural_duplicate_mural();
  //_test_mural_update_property_mural();
  //_test_mural_archive();
  //_test_mural_del();
//   _test_mural_list_for_a_user();
  // _test_mural_invite_member();
  // _test_retrieve_a_mural();
//   themuraly_mural_list_html();
//   themuraly_get_mural_info('http://staging.mural.ly/!/#/lwgmural/1376967210186');
  // $output_html = "<iframe frameborder='0' src='http://staging.mural.ly/embed/edgemakers/edgemakers/1374110398829' width=500px height=500px'></iframe>";
//   $output_html = "<iframe frameborder='0' src='http://staging.mural.ly/embed/edgemakers/edgemakers/1374641493558' width=500px height=500px'></iframe>";


  return $output_html;
}
function _test_change_profile() {
  $username = 'zzxxcc001';
  $profile['name'] = 'fg';
  $profile['surname'] = 'ii';
  $profile['thumbUrl'] = rawurlencode('http://tp4.sinaimg.cn/1189615035/180/5675994286/1');
  $mural_api = new Muralapi;
  $result = $mural_api->mural_profile_change($username, $profile);
  dpm($result);
}
function _test_change_password() {
  $username = 'cldf6668';
  $newpass = '12345';
  $mural_api = new Muralapi;
  $result = $mural_api->change_password($username, $newpass);
  dpm($result);
}

function _test_mural_invite_member() {
  $username = 'kk2t';
  $muralid = '1375063051875';
  $muraluserids = array('kikora');
  $mural_api = new Muralapi;
  $result = $mural_api->invite_user_mural($username, $muralid, $muraluserids);
  dpm($result);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($r);
}

function _test_mural_del() {
  $mural_api = new Muralapi;
  $username = "testuser";
  $muralid = "1374197201377";
  $result = $mural_api->delete_mural($username, $muralid);
  $data = $result->data;  //it is a string
  //$r = drupal_json_decode($data);
  dpm($result);
  dpm($data);
}

function _test_create_room() {
  $mural_api = new Muralapi;
  $username = "testuser";
  $title = 'mymuralroom';
  $result = $mural_api->create_room($username, $title);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_retrieve_a_mural() {
  $username = 'kk2t';  //owner
  // $username = 'kikora';
  $muralid = '1375231303413';
  $muralid = '1375063051875';
  $muralid = '1375252040839';
  $muralid = '1375252809540';

  $username = 'dev_student1';
  $username = 'lugaltest';
  $muralid = '1379327802962';
  $muralid = '1379337407854';
  $muralid = '1379338377473';
  $muralid = '1379338517428';
  $muralid = '1379040192281';

  $mural_api = new Muralapi;
  $result = $mural_api->retrieve_a_mural($username, $muralid);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
  print('Mural API $result info: <pre>' . print_r($result, TRUE) . '</pre>');
  print('Mural info: <pre>' . print_r($r, TRUE) . '</pre>');
}

function _test_mural_archive() {
  $mural_api = new Muralapi;
  $username = "testuser";
  $muralid = "1374197201377";
  $archive_flag = 1;
  $result = $mural_api->archive_mural($username, $muralid, $archive_flag);
  $data = $result->data;
  //$r = drupal_json_decode($data);
  dpm($result);
  dpm($data);
}

function _test_mural_update_property_mural() {
  $mural_api = new Muralapi;

  $username = 'kk2t';
  $muralid = '1375063051875';
  $property_name = "shared";
  $property_value = (bool) 1;
  $result = $mural_api->update_mural_properties($username, $muralid, $property_name, $property_value);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_mural_duplicate_mural() {
  $mural_api = new Muralapi;
  $params = array('title' => 'this is a duplicate from a mural', 'room' => 1373060830214,);
  $result = $mural_api->duplicate_mural('testuser', '1373655313624', $params);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_mural_create_mural() {
  $mural_api = new Muralapi;
  $str = rand(800, 10000);
  $params = array('title' => $str . ' this is a mural', 'room' => 1378864394167,);
  $result = $mural_api->create_mural('cldf5418', $params);
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_mural_list_for_a_user() {
  $mural_api = new Muralapi;
  $result = $mural_api->get_all_murals('cldf5418');
  $data = $result->data;
  $r = drupal_json_decode($data);
  dpm($result);
  dpm($r);
}

function _test_user_add() {

  $mural_api = new Muralapi;
  $str = rand(800, 10000);
  $user = array();
  $user['username'] = "cldf" . $str;
  //$user['username'] = "dev-edgemakers";
  $user['email'] = "dev_devedgemakers" . $str . "@symbio.com";
  $user['source'] = "dev-edgemakers";
  $user['nameIdentifier'] = 3;
  $user['password'] = '123';

  $mural_api_result = $mural_api->create_user($user, '/api/organizations/dev-edgemakers/users', 'POST');
  dpm($mural_api_result);
  //dd($mural_api_result);
  $muralapi_response_obj = drupal_json_decode($mural_api_result->data);
  dpm($muralapi_response_obj);

  if (isset($muralapi_response_obj['hasErrors'])) {
    if (!$muralapi_response_obj['hasErrors']) {
      // successful, then
      $edit = array();
      // the $muralapi_response_obj will contain the user attribute ($muralapi_response_obj->user)
      // but now ,it has no this attribute, so , just reguard the $account->name as the  mural username
      $the_mural_username = "";
      if (isset($muralapi_response_obj['user'])) {
        if (isset($muralapi_response_obj['user']['username'])) {
          $the_mural_username = $muralapi_response_obj['user']['username'];
        }
      }


      $edit['field_muralusername'][LANGUAGE_NONE][0]['value'] = $the_mural_username;
      // user_save($account, $edit);
      dpm($edit);
    }
  }
}

/**
 * Implments hook_init();
 */
function themuraly_init() {
//   ctools_include('modal');
//   ctools_include('ajax');
//   ctools_add_js('ajax-responder');
//   ctools_add_js('dependent');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_css(drupal_get_path('module', 'themuraly') . '/css/themuraly.css');
  drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/themuraly.js');
//   drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/populatePopup.js');
// 	drupal_add_js(drupal_get_path('module', 'themuraly') . '/js/refreshElements.js');
}

function themuraly_studio_mural_list_json($type = 'gallery', $page = '0', $keyword = '', $sortby = '') {

  global $user;
  $uid = 0;

  $limit = 5;
  $start = $page * $limit;

  $html = '';

  if ($type == 'my') {
    $uid = $user->uid;
  }

  $conditions = array();

  $orderby = array();

  if ($type == 'gallery') {
    // Current sort by Alphabetical, Date, Tags
    // Sort by Alphabetical on title.
    $orderby[0]['name'] = 'title';
    $orderby[0]['direction'] = 'ASC';

    // Sort by Alphabetical on Date[nid].
    $orderby[1]['name'] = 'nid';
    $orderby[1]['direction'] = 'DESC';

    // Order by tags
    $vocab_info = field_info_field('field_tags');
    $vocab_keys = array();
    foreach ($vocab_info['settings']['allowed_values'] as $vocab_item) {
      $vocab_keys[] = $vocab_item['vocabulary'];
    }
    if (($vocab_keys[0])) {
      $vocab_name = $vocab_keys[0];
    }

  }

  if ($keyword) {
    $murals_list = _themuraly_search_execute_result($keyword, $page);
  } else {
    $conditions['field'][] = array(
      'field' => 'field_share_to_gallery',
      'column' => 'value',
      'value' => '1',
      'operator' => '=',
    );
    // Mural share property.
    $conditions['field'][] = array(
      'field' => 'field_muralshared',
      'column' => 'value',
      'value' => '1',
      'operator' => '=',
    );

    $murals_list = themuraly_mural_list($uid, $start, $limit, $conditions, $orderby);

  }

  if (count($murals_list) <= 0) {
    return '';
  }

  $i = 1;
  foreach ($murals_list as $node) {

    if ($i == 1) {
      $class = 'first';
    }

    if ($i == count($murals_list)) {
      $class = 'last';
    }

    $node_user = user_load($node->uid);
    $node_field_first_name = field_get_items('user', $node_user, 'field_firstname');
    $node_first_name = $node_field_first_name && count($node_field_first_name) > 0 ? $node_field_first_name[0]['value'] : '';
    $node_field_last_name = field_get_items('user', $node_user, 'field_lastname');
    $node_last_name = $node_field_last_name && count($node_field_last_name) > 0 ? $node_field_last_name[0]['value'] : '';
    $node_username = $node_first_name . ' ' . $node_last_name;

    $html .= '<li>';

    $html .= '<div class="set-cover">
                    <h5 title="' . $node->title . '">' . $node->title . '</h5>
                    <p class="inspiration">' . $node_username . '</p>
                  </div>';

    $node_mural_thumburl = field_get_items('node', $node, 'field_mural_thumburl');
    $defula_thumburl = 'https://s3.amazonaws.com/static.mural.ly/NoThumbnail.png';
    $mural_thumburl = empty($node_mural_thumburl[0]['value']) ? $defula_thumburl : $node_mural_thumburl[0]['value'];

    $html .= '<span class="muralthumb ' . $node->title . '">';
    $mural_thumb = array('path' => $mural_thumburl);
    $html .= theme('image', $mural_thumb);
    $html .= '</span>';

    $view_url = l('<span class ="muralsettingicon"></span>', 'mural/' . $node->nid, array(
      'html' => true,
      'attributes' => array(
        'class' => array('studio-mural-list-item-link'),
        'nid' => $node->nid,
        'title' => $node->title,
        'onClick' => 'showMuralDialog("mural/' . $node->nid . '");return false;',
      ),
    ));

    $html .= $view_url;

//     if ($user->uid == $node->uid) {
//       $html .= $set_url;
//     }

    $html .= '</li>';

    $i++;
  }

//   echo $html;
  return $html;
}

/**
 * Build mural list html on studio pans.
 *
 * @param int $uid
 * @param int $page
 * @return Ambigous <An, string>
 */
function themuraly_studio_mural_list_html($type = 'ideas', $page = '0') {

  global $user;
  $limit = 5;
  $start = $page * $limit;
  $nodes = '';

  $html = '';

  if ($user->uid) {

    switch ($type) {
      case 'my':
        $nodes = themuraly_mural_list($user->uid, $start, $limit);
        break;
      case 'share':
        $account = user_load($user->uid);
        $the_field_obj = field_get_items('user', $account, 'field_mural_share_with_me');
        $mural_share_with_me = explode(',', $the_field_obj[0]['value']);

        if ($mural_share_with_me) {
          $query = new EntityFieldQuery();

          $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('status', 1)
                  ->propertyCondition('type', array('murals'))
                  ->propertyCondition('nid', $mural_share_with_me, 'IN')
                  ->propertyOrderBy('created', 'DESC')
                  ->range($start, $limit);

          $result = $query->execute();

          if (!empty($result['node'])) {
            $nodes = node_load_multiple(array_keys($result['node']), '', TRUE);
          }
        }

        break;
      default:
        $nodes = themuraly_mural_list('', $start, $limit);
        break;
    }

    $i = 1;

    if (is_array($nodes)) {

      foreach ($nodes as $knid => $node) {

        $node_first_name = '';
        $node_last_name = '';

        $node_muralfield = field_get_items('node', $node, 'field_muralid');
        $node_muralid = $node_muralfield[0]['value'];

        $node_mural_thumburl = field_get_items('node', $node, 'field_mural_thumburl');
        $defula_thumburl = 'https://s3.amazonaws.com/static.mural.ly/NoThumbnail.png';
        $mural_thumburl = empty($node_mural_thumburl[0]['value']) ? $defula_thumburl : $node_mural_thumburl[0]['value'];

        $myideas_list[$node_muralid]['nid'] = $knid;
        $myideas_list[$node_muralid]['title'] = $node->title;
        $myideas_list[$node_muralid]['thumburl'] = $mural_thumburl;

        if ($user->uid == $node->uid) {
          $img_settings = array(
            'path' => drupal_get_path('theme', 'newfteui') . '/images/iconPaneMuralSettings.png',
          );
          $img_gear = theme('image', $img_settings);
          if ($user->uid == $node->uid) {
            $set_link = 'modal/node/' . $node->nid . '/edit/ajax/0';
            $set_url = l($img_gear, $set_link, array(
              'html' => true,
              'attributes' => array(
                'class' => array('ctools-use-modal', 'ctools-modal-modal-popup-small', 'studio-mural-settings'),
                'nid' => $node->nid,
//                 'class' => array('studio-mural-settings', 'ctools-use-modal'),
              ),
                    )
            );
          } else {
            $set_url = '';
          }

          $myideas_list[$node_muralid]['seturl'] = $set_url;
        }

        $node_user = user_load($node->uid);
        $node_field_first_name = field_get_items('user', $node_user, 'field_firstname');
        $node_first_name = $node_field_first_name && count($node_field_first_name) > 0 ? $node_field_first_name[0]['value'] : '';
        $node_field_last_name = field_get_items('user', $node_user, 'field_lastname');
        $node_last_name = $node_field_last_name && count($node_field_last_name) > 0 ? $node_field_last_name[0]['value'] : '';
        $node_username = $node_first_name . ' ' . $node_last_name;

        $html .= '<li>';

        $html .= '<div class="set-cover">
                    <h5 title="' . $node->title . '">' . $node->title . '</h5>
                    <p class="inspiration">' . $node_username . '</p>
                  </div>';

        $html .= '<span class="muralthumb ' . $node->title . '">';
        $mural_thumb = array('path' => $mural_thumburl);
        $html .= theme('image', $mural_thumb);
        $html .= '</span>';
//         $html .= '<span class="my-idea-mural-title">' . $node->title . '</span>';
//         $html .= '<span class="owner">' . $node_first_name . ' ' . $node_last_name . '</span>';

        $view_url = l('<span class ="muralsettingicon"></span>', 'mural/' . $node->nid, array(
          'html' => true,
          'attributes' => array(
            'class' => array('studio-mural-list-item-link'),
//             'class' => array('ctools-use-modal',  'ctools-modal-modal-popup-small'),
            'id' => 'media-node-' . $node->nid,
            'title' => $node->title,
            'onClick' => 'showMuralDialog("mural/' . $node->nid . '");return false;',
          ),
        ));

        $html .= $view_url;

        if ($user->uid == $node->uid) {
          $html .= $set_url;
        }

        $html .= '</li>';

      }
    }
  else {
      if ($page == 0) {
        return '';
      }
    }
  }

//   $content = theme('studio_ideas_list', array('myideas' => $myideas_list, 'myshareideas' => $shareideas_list));

  return $html;
}

function themuraly_mural_list($uid = '', $start = 0, $limit = 5, $conditions = array(), $sortby = array()) {

  $my_mural_nodes = array();

  if (empty($sortby)) {
    $sortby[0]['name'] = 'nid';
    $sortby[0]['direction'] = 'DESC';
  }

  if ($conditions) {

    $query = new EntityFieldQuery();

    foreach ($conditions AS $con_key => $con_arry) {
      $query_condition_field = $con_key . 'Condition';
      if ($con_key == 'field') {
        foreach ($con_arry AS $con) {
          $query->fieldCondition($con['field'], $con['column'], $con['value'], $con['operator']);
        }
      } else {
        foreach ($con_arry AS $con) {
          $query->{$query_condition_field}($con['column'], $con['value'], $con['operator']);
        }
      }
    }
  } else {
    $query = new EntityFieldQuery();
  }

  $query->entityCondition('entity_type', 'node')
          ->propertyCondition('status', 1)
          ->propertyCondition('type', array('murals'))
          ->range($start, $limit);

  if ($uid) {
    $query->propertyCondition('uid', $uid);
  }

  foreach ($sortby AS $sort) {
    $query->propertyOrderBy($sort['name'], ($sort['direction']) ? $sort['direction'] : 'DESC');
  }

  $result = $query->execute();

  if (!empty($result['node'])) {
    $my_mural_nodes = node_load_multiple(array_keys($result['node']), '', TRUE);
  }

  return $my_mural_nodes;

}

/**
 * Return mural list data by uid.
 *
 * @param int $limit
 * @return string html
 */
function themuraly_mural_list_html($limit = 5) {

  global $user;

  $my_mural_nodes = array();
  $content_type = 'murals';

  $html = '<div class="toolbar-item media">';

  if ($user->uid !== 0) {

    $my_mural_nodes = themuraly_mural_list($user->uid);

    $count = count($my_mural_nodes);
    $i = 0;

    foreach (array_values($my_mural_nodes) as $key => $node) {

      // Get prev/next.
      if (($key - 1) < 0) {
        $prev = $my_mural_nodes[$count - 1]->nid;
      }
      else {
        $prev = $my_mural_nodes[$key - 1]->nid;
      }

      if (($key + 1) > ($count - 1)) {
        $next = $my_mural_nodes[0]->nid;
      }
      else {
        $next = $my_mural_nodes[$key + 1]->nid;
      }

      if ($i < $limit) {
        $mural_item['items'][$i]['data'] = l($node->title, 'mural/' . $node->nid, array(
          'attributes' => array(
            'id' => 'media-node-' . $node->nid,
            'title' => $node->title,
            'onClick' => 'showMuralDialog("mural/' . $node->nid . '");return false;',
            'prev' => $prev,
            'next' => $next,
            'current' => $node->nid,
          )
        ));
        $mural_item['items'][$i]['class'][] = 'mural-item';
        $i++;
      }
    }

    if (count($mural_item['items']) > 0) {

      $html .= '<h4 class="has-child">Mural<em></em></h4>';

      $mural_item['title'] = '';
      $mural_item['type'] = 'ul';
      $mural_item['attributes'] = array('id' => 'mural-list', 'class' => 'media-video');

      $media_html = theme_item_list($mural_item);
    }

    //dd($media_html, 'media list');

    $html .= $media_html;
  }

  if (count($my_mural_nodes) <= 0) {
    $html .= '<h4 class="has-child">Mural</h4>';
  }

  $html .= '</div>';

  return $html;
}

/**
 * Ajax link callback;
 * @param unknown_type $page_callback_result
 */
function themuraly_mural_ajax_callback($page_callback_result) {

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  // Only render content
  print $page_callback_result;
  // Perform end-of-request tasks.
  drupal_page_footer();
}

/**
 * @param string $url
 *   - Mural url.
 */
function themuraly_get_mural_info($mural_url = '') {

  $mural_info = array();

  if ($mural_url) {

    $mural_url_info = parse_url($mural_url);
    $mural_info = explode('/', $mural_url_info['fragment']);
    $mural_username = $mural_info[1];
    $mural_id = $mural_info[2];


    if ($mural_id) {

      $the_nodes = _get_node_from_mural_id($mural_id);

      if ($the_nodes) {

        foreach ($the_nodes AS $the_node) {

          $field_mural_username = field_get_items('node', $the_node, 'field_muraluser');
          $mural_username = $field_mural_username && count($field_mural_username) > 0 ? $field_mural_username[0]['value'] : '';
          $field_mural_thumburl = field_get_items('node', $the_node, 'field_mural_thumburl');
          $mural_mural_thumburl = $field_mural_thumburl && count($field_mural_thumburl) > 0 ? $field_mural_thumburl[0]['value'] : '';

          $mural_info['id'] = 'edgemakers.' . $mural_id;
          $mural_info['title'] = $the_node->title;
          $mural_info['lastUpdatedBy'] = $mural_username;
          $mural_info['thumbUrl'] = empty($mural_mural_thumburl) ? '' : $mural_mural_thumburl;

          return $mural_info;
        }
      }
    }

    return false;
  }

  return false;
}

function _get_node_from_mural_id($mid) {

  if ($mid) {
    $nodeQuery = new EntityFieldQuery;

    $entities = $nodeQuery->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'murals')
            ->fieldCondition('field_muralid', 'value', $mid, '=')
            ->execute();

    if (!empty($entities['node'])) {
      $news_items_nids = array_keys($entities['node']);
      $news_items = entity_load('node', $news_items_nids);
      return $news_items;
    }
  }
  return '';
}

/**
 * Update murals node when set submit.
 * @param unknown_type $mural_url
 */
function themuraly_update_node_by_mural($mural_url = '') {

  $mural_info = array();

  if ($mural_url) {

    $mural_url_info = parse_url($mural_url);
    $mural_info = explode('/', $mural_url_info['fragment']);
    $mural_id = $mural_info[2];

    if ($mural_id) {
      $the_nodes = _get_node_from_mural_id($mural_id);
    }

    if (is_array($the_nodes)) {

      foreach ($the_nodes AS $the_node) {

        $field_muraluser = field_get_items('node', $the_node, 'field_muraluser');

        if ($field_muraluser) {

          $muralusername = $field_muraluser[0]['value'];
          $mural_api = new Muralapi;
          $result = $mural_api->retrieve_a_mural($muralusername, $mural_id);
          $data = $result->data;
          $the_mural = drupal_json_decode($data);

          if ($the_mural['id']) {
            $the_node->field_mural_thumburl['und'][0]['value'] = $the_mural['thumbUrl'];
            $mural_memebers = array_keys($the_mural['members']);
            $the_node->field_mural_members['und'][0]['value'] = serialize(field_muraluser);

            $submit_status = node_submit($the_node);
            $save_status = node_save($the_node);
          }
        }
      }
    }
  }

  return $mural_info;
}

/**
 * Custome search by search module, but not hook_search_execute().
 * Configuration the search weight for it.
 */
function _themuraly_search_execute_result($keys = '', $page = 0) {


  $pager = 5;
  $start = $page * $pager;
  $keys = trim($keys);

//   print("Page: " . $page);
//   // Build matching conditions
//   $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
//   $query->join('node', 'n', 'n.nid = i.sid');
//   $query->condition('n.status', 1)->addTag('node_access')->searchExpression($keys, 'node');
//   // Insert special keywords.
//   $query->setOption('type', 'n.type');
//   $query->setOption('language', 'n.language');
//   if ($query->setOption('term', 'ti.tid')) {
//     $query->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
//   }
//   // Custom field condition.
//   $query->condition('n.type', 'murals');
//   // Join "Share to gallery" field.
//   $query->innerJoin('field_data_field_share_to_gallery','field_gallery','n.nid = field_gallery.entity_id');
//   $query->condition('field_gallery.field_share_to_gallery_value', 1);
//   $query->orderBy('n.title', 'ASC');//ORDER BY title
//   $query->orderBy('n.nid', 'DESC');//ORDER BY created
//   // Join  field_tags table and term table.
//   $query->leftJoin('field_data_field_tags','field_tags','n.nid = field_tags.entity_id');
//   $query->leftJoin('taxonomy_term_data','term','field_tags.field_tags_tid = term.tid');
//   // Order by tags by term ASC.
//   $query->orderBy('term.name', 'ASC');//ORDER BY created
//   $query->range($start, $pager);
//   // END Custome field condition.
//   // Only continue if the first pass query matches.
//   if (!$query->executeFirstPass()) {
//     return array();
//   }
//   // Add the ranking expressions.
//   _node_rankings($query);
// //   $query->limit($pager);
// //   $query->offset($start);
//   $query->range($start, $pager);
//   // Load results.
//   $find = $query->execute();
//   print('Query execute result:<pre>' . print_r($find, TRUE) . '</pre>');
//   $results = array();
//   foreach ($find as $item) {
//     // Build the node body.
//     $node = node_load($item->sid);
//     node_build_content($node, 'search_result');
//     $node->body = drupal_render($node->content);
//     // Fetch comments for snippet.
//     $node->rendered .= ' ' . module_invoke('comment', 'node_update_index', $node);
//     // Fetch terms for snippet.
//     $node->rendered .= ' ' . module_invoke('taxonomy', 'node_update_index', $node);
//     $extra = module_invoke_all('node_search_result', $node);
//     $results[] = $node;
// //     $results[] = array(
// //       'link' => url('node/' . $item->sid, array('absolute' => TRUE)),
// //       'type' => check_plain(node_type_get_name($node)),
// //       'title' => $node->title,
// //       'user' => theme('username', array('account' => $node)),
// //       'date' => $node->changed,
// //       'node' => $node,
// //       'extra' => $extra,
// //       'score' => $item->calculated_score,
// //       'snippet' => search_excerpt($keys, $node->body),
// //     );
//   }
//   return $results;
//   ( (d.data LIKE :db_condition_placeholder_6 ESCAPE '\\') AND (d.data LIKE :db_condition_placeholder_7 ESCAPE '\\') )


  if ($keys) {

    watchdog('Debug', 'Keys: ' . $keys);

    $query = db_select('search_index', 'i')
            ->condition('i.type', 'node');                      //Search node.
//       ->condition('i.word', '%' . $keys . '%', 'LIKE');  //Search key
    // Full text search, copy from search.extender.inc.
//     $query->innerJoin('search_dataset', 'd', 'i.sid = d.sid  AND i.type = d.type');

    // full text search.
//     $query->condition('d.data', '%' . strtolower($keys) . '%', 'LIKE');

    // Keys is multi and split by "space".
//     $keys_array = explode(' ', $keys);
//     $orkeys = db_or();
//     foreach ($keys_array AS $key) {
//       $orkeys->condition('i.word', '%' . strtolower($key) . '%', 'LIKE');
//     }
//     $query->condition($orkeys);

    // distinct sid.
    $query->AddExpression('distinct i.sid', 'sid_node');

    $query->range($start, $pager);

    $query->join('node', 'n', 'n.nid = i.sid');
    $query->condition('n.type', 'murals');
    $query->condition('n.status', 1);

    // The numeric score of the word, higher being more important.
    $query->orderBy('i.score', 'ASC'); //ORDER BY title

    $query->orderBy('n.title', 'ASC'); //ORDER BY title
    $query->orderBy('i.sid', 'DESC'); //ORDER BY title
    $query->orderBy('n.nid', 'DESC'); //ORDER BY created
    // Join "Share to gallery" field.
    $query->innerJoin('field_data_field_share_to_gallery', 'field_gallery', 'n.nid = field_gallery.entity_id');
    $query->condition('field_gallery.field_share_to_gallery_value', 1);

    // Join "Mural share propty".
    $query->innerJoin('field_data_field_muralshared', 'field_muralshared', 'n.nid = field_muralshared.entity_id');
    $query->condition('field_muralshared.field_muralshared_value', 1);

    // Tags search.
    // Join  field_tags table and term table.
    $query->leftJoin('field_data_field_tags', 'field_tags', 'n.nid = field_tags.entity_id');
    $query->leftJoin('taxonomy_term_data', 'term', 'field_tags.field_tags_tid = term.tid');
    // Order by tags by term ASC.
    $query->orderBy('term.name', 'ASC'); //ORDER BY created

    // Key search by normal SQL.
    $orkeys = db_or();
    $orkeys->condition('n.title', '%' . strtolower($keys) . '%', 'LIKE');
    $orkeys->condition('term.name', '%' . strtolower($keys) . '%', 'LIKE');

    $query->condition($orkeys);

//     watchdog('Debug', 'SQL execute before: ' . ((string) $query) . '<pre>' .  print_r($query->arguments(), TRUE) . '</pre>');

    // Debug.
//     print('Query:<pre>' . print_r($query, TRUE) . '</pre>');
//     dpm($query);
    // End Debug.

    $find = $query->execute();
//     watchdog('Debug', 'Search result: <pre>' . print_r($find, TRUE) . '</pre> | $query <pre>' . print_r($query, TRUE) . '</pre>');
//     watchdog('Debug', 'SQL after execute: ' . ((string) $query) . '<pre>' .  print_r($query->arguments(), TRUE) . '</pre>');
    // Debug.
//     print('Query execute result:<pre>' . print_r($find, TRUE) . '</pre>');
//     WHERE  (i.type = "node") AND (d.data LIKE "%copy of%" ESCAPE '\\') AND( (i.word LIKE :db_condition_placeholder_2 ESCAPE '\\') OR (i.word LIKE :db_condition_placeholder_3 ESCAPE '\\') )AND (n.type = :db_condition_placeholder_4) AND (n.status = :db_condition_placeholder_5) AND (field_gallery.field_share_to_gallery_value = :db_condition_placeholder_6)
//     dpm($find);
    // End Debug.

    $results = array();

    foreach ($find as $item) {
//       watchdog('Debug', 'Item of search result: <pre>' . print_r($item, TRUE) . '</pre>');
      // Render the node.
      $node = node_load($item->sid_node);
      $results[] = $node;
    }

    return $results;
  }

  return false;
}

/**
 * Send mail by drupal_mail core function
 *
 * @param array $m
 * @return boolean
 */
function themuraly_drupalsendmail($m) {

  global $base_url;

  $header = array();

//   $header['From'] = $m->from;
  $header['Sender'] = $m->from;
//   $header['Return-Path'] = ($m->return)?$m->return:$m->from;

  $header['Sender'] = '1.0';
  $header['Content-Transfer-Encoding'] = '8Bit';
  $header['X-Mailer'] = 'Drupal Webform (PHP/' . phpversion() . ')';
  $header['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

  //$my_module = 'foo';
  $my_module = basename(__FILE__, '.module');
  //$my_mail_token = 'bar';
  $my_mail_token = 'send share mail';

  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'to' => $m->to,
    'subject' => $m->subject,
    'body' => $m->body,
    'headers' => $header,
  );

  $system = drupal_mail_system($my_module, $my_mail_token);

  $system_mail_status = @$system->mail($message);
  watchdog("mail system", $my_module . '|' . print_r($system_mail_status, TRUE));

  return $system_mail_status;
}

/**
 * Murals list on topic.
 * @param int $nid
 * @return Ambigous <string, Ambigous, The, unknown, A, Optional>
 */
function themuraly_topic_mural_list($nid = '') {
  global $user;
  $conditions = array();

  $murals_list_html = '';
  if ($nid) {
    $conditions['field'][] = array(
      'field' => 'field_topic_mural',
      'column' => 'target_id',
      'value' => $nid,
      'operator' => '=',
    );
    $conditions['field'][] = array(
      'field' => 'field_muralshared',
      'column' => 'value',
      'value' => 1,
      'operator' => '=',
    );
    $murals_list = themuraly_mural_list('', 0, 5, $conditions);
//     print('<pre>' . print_r($murals_list, TRUE) . '</pre>');
    $murals_list_html .= theme_mural_list_box('topic', $murals_list);
    return $murals_list_html;
  }
  return $murals_list_html;
}

/**
 * Theme mural box list.
 * @param array $nodes
 * @return string|Ambigous <string, The, unknown, A, Optional>
 */
function theme_mural_list_box($type = 'studio', $nodes) {

  $mural = array();
  $attributes = array();
  $attributes['type'] = $type;
  $mural_list = '';

  if (is_array($nodes)) {

    if (count($nodes) <= 0) {
      return '';
    }

    $i = 1;
    foreach ($nodes as $node) {
//   	  echo "topic type: " . $type;
//   	  $attributes['type'] = $type;
      $item = theme('mural_item_box', array('node' => $node), $attributes);
      $mural['items'][$i]['data'] = $item;
      $i++;
    }

    if (count($mural['items'] > 0)) {
      $mural['title'] = '';
      $mural['type'] = 'ul';
      $mural['attributes'] = array(
        'id' => 'topic-mural-list',
      );
      $mural_list = theme_item_list($mural);
    } else {
      $mural_list = t('Mural is empty in topic.');
    }
  }

  return $mural_list;
}

/**
 * Theme mural box list.
 * @param object $node
 * @return string
 *   - HTML code.
 */
function theme_mural_item_box($item = array(), $attributes = array()) {

  global $user;
  $html = '';
  $node = $item['node'];

  foreach ($attributes AS $key => $value) {
    $item_attributes[$key] = $value;
  }

//   print('Node: <pre>' . print_r($node, TRUE) . '</pre>');
  if ($node->nid) {

    $node_user = user_load($node->uid);
//     print('User: <pre>' . print_r($node_user, TRUE) . '</pre>');
    $node_field_first_name = field_get_items('user', $node_user, 'field_firstname');
    $node_first_name = $node_field_first_name && count($node_field_first_name) > 0 ? $node_field_first_name[0]['value'] : '';
    $node_field_last_name = field_get_items('user', $node_user, 'field_lastname');
    $node_last_name = $node_field_last_name && count($node_field_last_name) > 0 ? $node_field_last_name[0]['value'] : '';
    $node_username = $node_first_name . ' ' . $node_last_name;
    $node_user_avatar = theme('user_picture', array('account' => $node_user));

    $view_url = l('<span class ="muralsettingicon"></span>', 'mural/' . $node->nid, array(
      'html' => true,
      'attributes' => array(
        'class' => array('mural-list-item-link'),
        'nid' => $node->nid,
        'onClick' => 'showMuralDialog("?q=mural/' . $node->nid . '");jQuery("#mural-back-to-dashboard").show();return false;',
      ),
    ));

    $html .= '<div>';

    if ($node->field_topic_mural[LANGUAGE_NONE]['0']['target_id']) {    // Topic mural list

      if (!empty($node_user->picture)) {
        // @TODO: Ideally this function would only be passed file objects, but
        // since there's a lot of legacy code that JOINs the {users} table to
        // {node} or {comments} and passes the results into this function if we
        // a numeric value in the picture field we'll assume it's a file id
        // and load it for them. Once we've got user_load_multiple() and
        // comment_load_multiple() functions the user module will be able to load
        // the picture files in mass during the object's load process.
        if (is_numeric($node_user->picture)) {
          $node_user->picture = file_load($node_user->picture);
        }
        if (!empty($node_user->picture->uri)) {
          $filepath = $node_user->picture->uri;
        }
      }
      elseif (variable_get('user_picture_default', '')) {
        $filepath = variable_get('user_picture_default', '');
      }

      $avatar_img = array(
        'path' => $filepath,
        'width' => '74px',
        'height' => '74px',
      );
      $avatar_picture = theme('image', $avatar_img);
//       print('User image: ' . $filepath . ' | Image :' . $avatar_picture);

      $view_url = l($node->title, '#', array(
        'attributes' => array(
          'nid' => $node->nid,
          'onClick' => 'showMuralDialog("?q=mural/' . $node->nid . '");jQuery("#mural-back-to-dashboard").show();return false;',
        ),
      ));

      $html .= '<h3 class="author">' . $node_username . '</h3>';
      $html .= '<span class="mural-title">' . $view_url . '</span>';
      $html .= '<span class="user-avatar">' . $avatar_picture . '</span>';
    } else {                                                             // Default mural list
      $html .= '<div class="set-cover">
                      <h5 title ="' . $node->title . '">' . $node->title . '</h5>
                      <p class="inspiration">' . $node_username . '</p>
                    </div>';

      $node_mural_thumburl = field_get_items('node', $node, 'field_mural_thumburl');
      $defula_thumburl = 'https://s3.amazonaws.com/static.mural.ly/NoThumbnail.png';
      $mural_thumburl = empty($node_mural_thumburl[0]['value']) ? $defula_thumburl : $node_mural_thumburl[0]['value'];
      $mural_thumb = array('path' => $mural_thumburl);

      $html .= '<span class="muralthumb ' . $node->title . '">';
      $html .= theme('image', $mural_thumb);
      $html .= '</span>';

      $view_url = l('<span class ="muralsettingicon"></span>', 'mural/' . $node->nid, array(
        'html' => true,
        'attributes' => array(
          'class' => array('mural-list-item-link'),
          'nid' => $node->nid,
          'onClick' => 'showMuralDialog("?q=mural/' . $node->nid . '");jQuery("#mural-back-to-dashboard").show();return false;',
        ),
              )
      );

      $html .= $view_url;

      if ($user->uid == $node->uid) {
        $html .= $set_url;
      }

      $html .= '<span class="user-avatar">' . $node_user_avatar . '</span>';
    }

    $html .= '</div>';

//     print($html);
  }

  return $html;
}

// hook_mail
function themuraly_mail($key, &$message, $params) {
  switch ($key) {
    case 'mural_updated':
      // send notification when a mural is updated
      $message['subject'] = t('Mural updated');
      $message['body'][] = t('Your mural @mural_name is updated.', array('@mural_name' => $params['node']->title));
      $message['body'][] = url('node/' . $params['node']->nid, array('absolute' => TRUE));
      break;

    default:
    // nothing
  }
}

function themuraly_page_alter(&$page) {
  $the_path = current_path();
  if (strpos($the_path, 'mural') !== false) {
    drupal_set_breadcrumb(array());
  }
}

// modify the lat/lng data (get them by google geocode api, only according to city)
// location module get the "wrong" data for some address (e.g., "beijing, united states" )
// maybe , location moudle provide some ways  to get the "correct" data .
// but current,  modify them in the hook_node_update.
function themuraly_node_update($node) {
  if ($node->type == 'murals') {

    $l = field_get_items('node', $node, 'field_city');
    $city = '';
    $lid = '';


    if (!empty($l[0]['city'])) {
      $city = $l[0]['city'];
      $lid = $l[0]['lid'];
    }
    if ($city != '' && $lid != '') {
      // get the lat/long info again through the google api according to city, no country.
      $the_url = 'http://maps.googleapis.com/maps/api/geocode/json?address=' . $city . '&sensor=false';
      $location_info = drupal_http_request($the_url);
      $location_val = drupal_json_decode($location_info->data);

      if ($location_val['status'] == 'OK') {
        if (isset($location_val['results'][0]['geometry']['location']['lat'])) {
          $fields = array('latitude' => $location_val['results'][0]['geometry']['location']['lat'],
            'longitude' => $location_val['results'][0]['geometry']['location']['lng']
          );

          db_merge('location')
                  ->key(array('lid' => $lid))
                  ->fields($fields)
                  ->execute();
        }
      }
    }
  }
}

