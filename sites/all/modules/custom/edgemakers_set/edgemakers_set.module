<?php
require_once 'edgemakers_set.pages.inc';
/**
 * Implements hook_menu().
 */
function edgemakers_set_menu() {
  $items['admin/edgemakers/set'] = array(
    'title' => 'Manage Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgemakers_set_admin_list_form'),
    'access arguments' => array('administer edgemakers'),
  );
  $items['admin/edgemakers/set/list'] = array(
    'title' => 'Manage Set',
    'access arguments' => array('administer edgemakers'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/edgemakers/set/create'] = array(
    'title' => 'Create Set',
    'page callback' => 'edgemakers_set_admin_create_page',
    'access arguments' => array('administer edgemakers'),
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/edgemakers/set/ajaxdelete/%'] = array(
    'title' => 'Delete Set',
    'page callback' => 'edgemakers_set_admin_delete_action',
    'page arguments' => array(4),
    'access arguments' => array('administer edgemakers'),
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
  );
  $items['admin/edgemakers/set/answers/%'] = array(
    'title' => 'Answers',
    'page callback' => 'edgemakers_set_answers_page',
    'page arguments' => array(4),
    'access arguments' => array('administer edgemakers'),
    'file' => 'edgemakers_set.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/edgemakers/set/submissions/%webform_menu'] = array(
    'title' => 'Submissions',
    'page callback' => 'webform_results_submissions',
    'page arguments' => array(4, FALSE, '50'),
    'access callback' => 'webform_results_access',
    'access arguments' => array(4),
    'file path' => drupal_get_path('module', 'webform'),
    'file' => 'includes/webform.report.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['edgemakers/set/ajaxlike'] = array(
    'title' => 'Delete Set',
    'page callback' => 'edgemakers_set_like',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'edgemakers_set.pages.inc',
  );
  return $items;
}
/**
 * Implements hook_form_alter().
 *
}*/
function edgemakers_set_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'edgemakers_set_node_form') {
    if(arg(0) == 'admin' && arg(1) == 'edgemakers' || arg(0) == 'modal') {
      $form['actions']['submit']['#submit'][] = 'edgemakers_set_node_submit_redirect_handler';
      $node = $form_state['node'];
      if (!isset($node->nid)) {
        //is node/add
        unset($form['actions']['preview']);
      } else {
        //is node/edit
        form_load_include($form_state, 'inc', 'node', 'node.pages');
        $form['field_set_type']['#disabled'] = TRUE;
        unset($form['actions']['preview'], $form['actions']['delete']);
      }
    }
    $langcode = isset($form['#language']) ? $form['#language'] : LANGUAGE_NONE;
    $form['field_set_type'][$langcode]['#after_build'] = array('_edgemakers_set_load_my_javascript');
    $form['actions']['#suffix'] = '<script>edgemakers_set_fields_update();</script>';
    unset($form['field_set_murally_type'][$langcode]['#options']['_none']);
  } else if (substr($form_id, 0, 20) == 'webform_client_form_') {
    if(arg(0) == 'node') return;
    $form['actions']['submit']['#ajax'] = array(
      'wrapper' => 'em-webform',
      'callback' => 'edgemakers_set_webform_client_form_callback',
      'method' => 'replace',
      'effect' => 'fade',
    );
    $form['actions']['#suffix'] = '<script>
    Drupal.settings.ajax = Drupal.settings.ajax || {};
    Drupal.settings.ajax["edit-submit"] = {
        callback: "edgemakers_set_webform_client_form_callback",
        event: "mousedown",
        keypress: true,
        prevent: "key",
        submit: {
            _triggering_element_name: "op",
            _triggering_element_value: "Submit"
        },
        url: "system/ajax",
        wrapper:"em-webform"
    };
    Drupal.attachBehaviors();</script>';
  } else if ($form_id == 'comment_node_edgemakers_set_form') {
    if(arg(0) == 'node') return;
    $form['#validate'][] = 'edgemakers_set_comment_validate';
    $form['#prefix'] = '<div id="comment-form-wrapper">';
    $form['#suffix'] = '</div>';
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'edgemakers_set_comment_form_callback',
    );
    $form['actions']['#suffix'] = '<script>
    Drupal.settings.ajax = Drupal.settings.ajax || {};
    Drupal.settings.ajax["edit-submit"] = {
        callback: "edgemakers_set_comment_form_callback",
        event: "mousedown",
        keypress: true,
        prevent: "key",
        submit: {
            _triggering_element_name: "op",
            _triggering_element_value: "Submit"
        },
        url: "system/ajax"
    };
    Drupal.attachBehaviors();
    </script>';
  }
}
function edgemakers_set_comment_validate($form, &$form_state) {
  $isanonymous = $form_state['values']['is_anonymous'];
  $node = $form['#node'];
  $term = strtolower($node->term->name);
  if($term == 'video with q&a' && $isanonymous) {
    form_set_error('', t('Sorry, you have to login to answer the question.'));
  }
}
function edgemakers_set_comment_form_callback($form, &$form_state) {
  comment_form_validate($form, $form_state);
  $errors = form_get_errors();
  $commands = array();
  $formSelector = "#comment-form-wrapper";
  if (!$errors) {
    comment_form_submit($form, $form_state);
    $comment = $form_state['comment'];
    $node = $form['#node'];
    $output = drupal_render(comment_view($comment, $node));
    $commands[] = ajax_command_prepend("#comments-list", $output);
    $term = strtolower($node->term->name);
    if($term == 'video with q&a') {
      $commands[] = ajax_command_remove($formSelector);
    } else {
      $new_form_state = array();
      $new_form_state['build_info']['args'][] = (object) array('nid' => $node->nid);
      $new_form_state['input'] = array();
      $output = drupal_render(drupal_build_form($form['#form_id'], $new_form_state));
      $commands[] = ajax_command_replace($formSelector, $output);
    }
    drupal_get_messages('status');
  } else {
    form_clear_error();
    $output = '';
    foreach($errors as $error) {
      $output .= '<div class="messages error">'.$error.'</div>';
    }
    $commands[] = ajax_command_remove($formSelector.' .messages');
    $commands[] = ajax_command_prepend($formSelector, $output);
    drupal_get_messages('error');
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}
function edgemakers_set_webform_client_form_callback($form, &$form_state) {
  webform_client_form_validate($form, $form_state);
  $errors = form_get_errors();
  form_clear_error();
  if (!$errors) {
    webform_client_form_pages($form, $form_state);
    webform_client_form_submit($form, $form_state);
    $output = "Thank you!";
  } else {
    $output = '<div id="em-webform">';
    $output .= drupal_render($form);
    $output .= '</div>';
    form_clear_error();
  }
  return $output;
}
/**
 * Implements hook_node_validate().
 *
 */
function edgemakers_set_node_validate($node, $form, &$form_state) {
  if($node->type == 'edgemakers_set') {
    $terms = _edgemakers_set_get_terms();
    $types = field_get_items('node', $node, 'field_set_type');
    $type = $types && count($types) > 0 ? $terms[$types[0]['tid']] : '';

    if($type == 'Inspiration' || $type == 'Showcase' || $type == 'Video with Comments' || $type == 'Video with Q&A' || $type == 'Video') {
      $urls = field_get_items('node', $node, 'field_set_url');
      $url = $urls && count($urls) > 0 ? $urls[0]['url'] : '';
      if($url == '') {
        form_set_error('field_set_url', t('Please fill in the URL'));
      } else if(!edgemakers_set_youtube_parser($url)) {
        form_set_error('field_set_url', t('Please fill in a Youtube Link'));
      }
    }
    if($type == 'Text' || $type == 'Video with Comments' || $type == 'Video with Q&A') {
      $bodys = field_get_items('node', $node, 'body');
      $body = $bodys && count($bodys) > 0 ? $bodys[0]['value'] : '';
      if($body == '') {
        form_set_error('body', t('Please fill in the Display text'));
      }
    }
    if($type == 'Image') {
      $images = field_get_items('node', $node, 'field_set_image');
      $image = $images && count($images) > 0 ? (isset($images[0]['width']) ? $images[0]['width'] : '') : '';
      if($image == '') {
        form_set_error('field_set_image', t('Please upload the Proxy Image'));
      }
    }
    if($type == 'Topic Page') {
      $topics = field_get_items('node', $node, 'field_set_topic');
      $topic = $topics && count($topics) > 0 ? $topics[0]['target_id'] : '';
      if($topic == '') {
        form_set_error('field_set_topic', t('Please Select a Topic'));
      }
    }
    if($type == 'Survey & Assessment') {
      $surveys = field_get_items('node', $node, 'field_set_survey');
      $survey = $surveys && count($surveys) > 0 ? $surveys[0]['target_id'] : '';
      if($survey == '') {
        form_set_error('field_set_survey', t('Please Select a Survey'));
      }
    }
    if($type == 'Document') {
      $documents = field_get_items('node', $node, 'field_set_document');
      $document = $documents && count($documents) > 0 ? $documents[0]['fid'] : '';
      if($document == '') {
        form_set_error('field_set_document', t('Please Upload a Document'));
      }
    }
    if($type == 'Idea') {
      $murallyTypes = field_get_items('node', $node, 'field_set_murally_type');
      $murallyType = $murallyTypes && count($murallyTypes) > 0 ? $murallyTypes[0]['value'] : '';
      if($murallyType == '') {
        form_set_error('field_set_murally_type', t('Please Select Mural.ly Type'));
      } else if(($murallyType == 1 || $murallyType == 2) && !edgemakers_set_murally_parser($url)) {
        form_set_error('field_set_url', t('Please fill in a Mural.ly Link'));
      }
    }
  }
}
/**
 * Implements hook_theme().
 */
function edgemakers_set_theme() {
  return array(
    'set_item' => array(
      'variables' => array('item' => NULL),
    ),
    // Templates for default widget types.
    'rate_template_like' => array(
      'variables' => array('links' => NULL, 'results' => NULL, 'mode' => NULL, 'just_voted' => FALSE, 'content_type' => NULL, 'content_id' => NULL, 'display_options' => NULL),
      'template' => 'like',
      'path' => drupal_get_path('module', 'edgemakers_set') . '/templates',
    ),
  );
}
/**
 * Theme of each set item.
 *
 * @param object $item
 */
function theme_set_item($variables) {
  $item = $variables['item'];
  $output = '';
  if (isset($item->nid)) {
    $type = strtolower($item->term->name);
    $className = array(str_replace(' ', '_', $type).'');
    $set_image = '';
    $link = 'node/'.$item->nid;
    switch ($type) {
      case 'image':
        $images = field_get_items('node', $item, 'field_set_image');
        $image = $images && count($images) > 0 ? $images[0]['uri'] : '';
        if ($image) {
          $set_image = theme('image_style', array('style_name' => 'edgemakers_set', 'path' => $image));
        }
        if($set_image) {
          $output .= l($set_image, $link, array('html' => TRUE, 'attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        } else {
          $output .= l($item->title, $link, array('attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        }
        break;
      case 'idea':
        $murallyTypes = field_get_items('node', $node, 'field_set_murally_type');
        $murallyType = $murallyTypes && count($murallyTypes) > 0 ? $murallyTypes[0]['value'] : '';
        if($murallyType == 0) {
          $link = 'mural/create';
        } else {
          $urls = field_get_items('node', $item, 'field_set_url');
          $url = $urls && count($urls) > 0 ? $urls[0]['url'] : '';
          $templateid = edgemakers_set_murally_parser($url);
          if($murallyType == 1) {
            $link = 'mural/share/'.$templateid;
          } else if($murallyType == 2) {
            $link = 'mural/create/'.$templateid;
          }
        } 
        $output .= l($item->title, $link, array('attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        break;
      case 'text':
        $output .= l($item->title, $link, array('attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        break;
      case 'topic page':
        $topics = field_get_items('node', $item, 'field_set_topic');
        $topicId = $topics && count($topics) > 0 ? $topics[0]['target_id'] : '';
        $link = 'node/'.$topicId;
        $output .= l($item->title, $link, array('attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        break;
      case 'inspiration':
      case 'showcase':
      case 'video':
      case 'video with comments':
      case 'video with q&a':
        $withThumbnails = field_get_items('node', $item, 'field_set_withthumbnail');
        $withThumbnail = $withThumbnails && count($withThumbnails) > 0 ? $withThumbnails[0]['value'] : 0;
        if($withThumbnail) {
          $urls = field_get_items('node', $item, 'field_set_url');
          $url = $urls && count($urls) > 0 ? $urls[0]['url'] : '';
          $videoId = edgemakers_set_youtube_parser($url);
          if($videoId) {
            $set_image = '<div class="crop"><img src="http://img.youtube.com/vi/'.$videoId.'/0.jpg" /></div>';
          }
        }
        if($set_image) {
          $output .= l($set_image, $link, array('html' => TRUE, 'attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        } else {
          $output .= l($item->title, $link, array('attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        }
        break;
      case 'survey & assessment':
        $surveys = field_get_items('node', $item, 'field_set_survey');
        $surveyId = $surveys && count($surveys) > 0 ? $surveys[0]['target_id'] : '';
        $link = 'node/'.$surveyId;
        $output .= l($item->title, $link, array('attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        break;
      default:
        $output .= l($item->title, $link, array('attributes' => array('class' => $className, 'id' => 'node-' . $item->nid)));
        break;
    }
  }
  return $output;
}
/**
 * Implements hook_image_default_styles().
 */
function edgemakers_set_image_default_styles() {
  $styles = array();

  $styles['edgemakers_set'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 133, 'height' => 133),
        'weight' => 0,
      ),
    )
  );

  return $styles;
}
/**
 * Implements hook_rate_templates().
 */
function edgemakers_set_rate_templates() {
  $templates = array();

  $templates['like'] = new stdClass();
  $templates['like']->value_type = 'points';
  $templates['like']->options = array(
    array(1, 'like'),
  );
  $templates['like']->theme = 'rate_template_like';
  $templates['like']->customizable = FALSE;
  $templates['like']->translate = TRUE;
  $templates['like']->template_title = t('Like');

  return $templates;
}
function edgemakers_set_theme_registry_alter(&$theme_registry) {
  $theme_registry['webform_results_submissions']['template'] = drupal_get_path('module', 'edgemakers_set').'/templates/webform-results-submissions';
  $theme_registry['pager']['variables']['item_attributes'] = NULL;
}
function edgemakers_set_murally_parser($url) {
	preg_match("#(?<=murally\/)[\d]{13}#", $url, $matches);
	if(is_array($matches) && count($matches) > 0) 
		return $matches[0];
	return false;
}
function edgemakers_set_youtube_parser($url) {
	preg_match("#(?<=v=)[a-zA-Z0-9-]+(?=&)|(?<=v\/)[^&\n]+|(?<=v=)[^&\n]+|(?<=youtu.be/)[^&\n]+#", $url, $matches);
	if(is_array($matches) && count($matches) > 0)
		return $matches[0];
	return false;
}