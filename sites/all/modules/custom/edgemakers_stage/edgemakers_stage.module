<?php
/**
 * @file
 * This module creates a Views Slideshow Xtra content type and
 * example slide nodes.
 */

/**
 * Implements hook_init().
 */
function edgemakers_stage_init() {
  drupal_add_js(
    drupal_get_path('module', 'edgemakers_stage')
    . '/js/edgemakers_stage.js',
    array(
      'scope' => 'footer',
    )
  );

  drupal_add_css(drupal_get_path('module', 'edgemakers_stage') . '/css/edgemakers_stage.css');

}

/**
 * Implements hook_menu().
 */
function edgemakers_stage_menu() {

  $items = array();

  // Module settings.
  $items['admin/config/system/ftesettings/edgemakers'] = array(
    'title' => 'Edgemakers Stage',
    'description' => 'settings for Stage',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edgemakers_stage_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'edgemakers_stage') ,
  );

  // Remove set from stage by ajax.
  $items['admin/edgemakers/stage/setindex/ajaxdelete/%'] = array(
    'title' => 'Delete Set',
    'page callback' => 'edgemakers_set_index_delete_action',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('administer edgemakers'),
  );

  // Remove set from stage.
  $items['admin/edgemakers/stage/setindex/delete/%'] = array(
    'title' => 'Delete Set',
    'page callback' => 'edgemakers_set_index_delete_action',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('administer edgemakers'),
  );

  // Page tab menu.
  $items['admin/edgemakers/stage'] = array(
    'title' => 'Manage Stage',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'edgemakers_stage_page',
    'access arguments' => array('administer edgemakers'),
    'file' => 'stage.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_stage') ,
  );

  $items['admin/edgemakers/stage/list'] = array(
    'title' => 'Manage stage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'edgemakers_stage_page',
    'access arguments' => array('administer edgemakers'),
    'file' => 'stage.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_stage') ,
  );

  $items['admin/edgemakers/stage/create'] = array(
    'title' => 'Create Stage',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'edgemakers_stage_create_page',
    'access arguments' => array('administer edgemakers'),
    'file' => 'stage.manage.inc',
    'file path' => drupal_get_path('module', 'edgemakers_stage') ,
  );

  $items['admin/edgemakers/stage/managebox'] = array(
    'title' => 'Manage Set',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'edgemakers_stage_managebox_page',
    'page arguments' => array(4),
    'access arguments' => array('administer edgemakers'),
    'file' => 'stage.pages.inc',
    'file path' => drupal_get_path('module', 'edgemakers_stage') ,
  );

  // API URL.
  // Remove set from stage.
  $items['edgemakers/stage/api/list'] = array(
    'page callback' => 'edgemakers_stage_api_list_json',
    'access arguments' => array('access content'),
    'file path' => drupal_get_path('module', 'edgemakers_stage'),
    'file' => 'stage.api.inc',
  );

  $items['edgemarkers/stage/get/set/ajax'] = array(
    'page callback' => 'edgemakers_stage_api_set_list_html',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_stage_ajax_callback',
    'page arguments' => array(5),
    'file path' => drupal_get_path('module', 'edgemakers_stage'),
    'file' => 'stage.api.inc',
  );

  $items['edgemakers/stage/api/set/info/ajax'] = array(
    'page callback' => 'edgemakers_stage_api_set_view_html',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'edgemakers_stage_ajax_callback',
    'page arguments' => array(6),
    'file path' => drupal_get_path('module', 'edgemakers_stage'),
    'file' => 'stage.api.inc',
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function edgemakers_stage_theme() {
  return array(
    'edgemakers_stage_set_list_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_foo().
 *
 * Displays help and module information.
 */
function edgemakers_stage_help($path, $arg) {
  $help_test = '';
  switch ($path) {
    case "admin/help#stage":
      $help_test = '<p>' . t("Admin stage of set.") . '</p>';
      break;

  }
  return $help_test;
}

/**
 * Remove set from stage.
 *
 * @param int $stage_id
 *   - Stage id.
 *
 * @param int $set_id
 *   - Set id.
 *
 * @param int $ajax
 *   - Is ajax call.
 */
function edgemakers_set_index_delete_action($stage_id = '', $set_id = '', $ajax = 0) {

  $callbak_url = $_GET[Q];

  $destination = explode("&destination=", $callbak_url);

  $stage = node_load($stage_id);

  if (isset($stage->box_index_data[LANGUAGE_NONE])) {
    $stage_index = unserialize($stage->box_index_data[LANGUAGE_NONE][0]['value']);

    foreach ($stage_index as $key => $index) {
      if ($index['set_id'] == $set_id) {
        unset($stage_index[$key]);
      }
    }

    // Update index data in stage.
    $stage->box_index_data[$stage->language][0]['value'] = serialize($stage_index);

    node_submit($stage);
    $save_status = node_save($stage);

    if ($ajax) {
      _edgemakers_stage_box_index_list_update($stage_id, $destination[1]);
    }
    else {
      $set = node_load($set_id);
      drupal_set_message(t('Set [@set_title] deleted.', array('@set_title' => $set->title)));
      drupal_goto('admin/edgemakers/stage/managebox/' . $stage_id);
    }

  }

}

/**
 * Implements hook_form_alter().
 */
function edgemakers_stage_form_alter(&$form, $form_state, $form_id) {
  $type = str_replace("-", "_", variable_get('edgemakers_stage_content_type', 'stage'));
  $stage_form_id = $type . '_node_form';

  if ($form_id == $stage_form_id) {

    if ((arg(1) == 'edgemakers' && arg(2) == 'stage')
      || (arg(0) == 'modal')
    ) {

      $form['actions']['submit']['#submit'][] = '_edgemakers_stage_node_submit_redirect_handler';
      $form['#redirect'] = 'admin/edgemakers/set';

      unset($form['actions']['preview']);
      unset($form['actions']['delete']);
      unset($form['box_index_data']);

    }
  }
}

/**
 * Handler form submit.
 */
function _edgemakers_stage_node_submit_redirect_handler($form, &$form_state) {
  unset($_REQUEST['destination']);
  unset($form['#redirect']);
  $form_state['redirect'] = 'admin/edgemakers/stage';
}

/**
 * Update setes list in stage.
 *
 * @param int $stage_id
 *   - Stage id.
 */
function _edgemakers_stage_box_index_list_update($stage_id = '', $destination = '') {
  $output = _edgemakers_stage_mangebox_index_list_html($stage_id, $destination);
  $commands = array();
  $commands[] = ajax_command_replace('#stage_manage_box_index_list', '<div id="stage_manage_box_index_list">' . $output . '</div>');
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Build form html from hook_form().
 *
 * @param int $stage_id
 *   - Stage id
 *
 * @return Ambigous
 *   - <The, void, string, A, boolean>
 */
function _edgemakers_stage_mangebox_index_list_html($stage_id, $destination = '') {
  module_load_include('inc', 'edgemakers_stage', 'stage.pages');
  $form = drupal_get_form('edgemakers_stage_set_list_form', $stage_id);
  $form['#action'] = url($destination);
  return drupal_render($form);
}

/**
 * Implements hook_block_info().
 */
function edgemakers_stage_block_info() {

  $blocks['stage_list'] = array(
    'info' => t('Stage list'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_book_view().
 */
function edgemakers_stage_block_view($delta = '') {

  module_load_include('inc', 'edgemakers_stage', 'stage.api');

  global $base_root;
  global $base_path;

  switch ($delta) {
    case 'stage_list':
      $block['subject'] = t('Stage list block title');

      // Load the javascript and the css.
      drupal_add_library('system', 'ui.dialog');

      $block['content'] = '<div id="set-view-region" class="hidden">
          <div id="stage-set-view"></div>
          <div id="back-to-dashboard" class="set-nav hidden back-to-dashboard">
            <span class="back-to-dashboard">&nbsp;</span>
          </div>
          <div id="set-nav" class="set-nav hidden">
              <span id="node-1010" class="prev">Previous</span>
              <span id="back-set-list" style="display: none;">&nbsp;</span>
              <span id="node-2020" class="next">Next</span>
          </div>
      </div>';
      $block['content'] .= '<div id="ajaxload"></div><div id="stage-set-list">';
      $block['content'] .= '</div>';
      break;
  }

  return $block;
}

/**
 * Implements hook_node_delete().
 */
function edgemakers_stage_node_delete($node) {

  if ($node->type == 'edgemakers_set') {

    $type = variable_get('edgemakers_stage_content_type', 'stage');
    $stages = node_load_multiple(array(), array('type' => $type));

    foreach ($stages as $stage) {

      if (isset($stage->box_index_data[LANGUAGE_NONE])) {

        $stage_index = unserialize($stage->box_index_data[LANGUAGE_NONE][0]['value']);

        foreach ($stage_index as $key => $index) {

          if ($index['set_id'] == $node->nid) {
            $msg = t('Remove set "@set_title"  from "@stage_title" stage list.', array(
              '@set_title' => $node->title,
              '@stage_title' => $stage->title,
            ));
            drupal_set_message($msg);
            unset($stage_index[$key]);
          }
        }

        $stage->box_index_data[$stage->language][0]['value'] = serialize($stage_index);
        node_submit($stage);
        $save_status = node_save($stage);

      }

    }
  }

}

/**
 * Sort array by value key.
 *
 * @link http://stackoverflow.com/questions/2699086/
 *   - sort-multidimensional-array-by-value-2
 *
 * @param array $array
 *   - array data.
 *
 * @param array $key
 *   - array data.
 */
function aasort(&$array, $key) {
  $sorter = array();
  $ret = array();
  reset($array);
  foreach ($array as $ii => $va) {
    $sorter[$ii] = $va[$key];
  }
  asort($sorter);
  $i = 0;
  foreach ($sorter as $ii => $va) {
    $ret[$i] = $array[$ii];
    $i++;
  }
  $array = $ret;
}
